Found a 129 line (1040 tokens) duplication in the following files: 
Starting at line 57 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityStarvingThrottlingProducerTest.java
Starting at line 45 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ThrottlingProducerTest.java

    for (int i = 0; i < 7; i++) {
      mConsumers[i] = mock(Consumer.class);
      mProducerContexts[i] = mock(ProducerContext.class);
      mProducerListeners[i] = mock(ProducerListener2.class);
      mResults[i] = mock(Object.class);
      when(mProducerContexts[i].getProducerListener()).thenReturn(mProducerListeners[i]);
      when(mProducerContexts[i].getId()).thenReturn(mRequestIds[i]);
      final int iFinal = i;
      doAnswer(
              new Answer() {
                @Override
                public Object answer(InvocationOnMock invocation) throws Throwable {
                  mThrottlerConsumers[iFinal] = (Consumer<Object>) invocation.getArguments()[0];
                  return null;
                }
              })
          .when(mInputProducer)
          .produceResults(any(Consumer.class), eq(mProducerContexts[i]));
    }
  }

  @Test
  public void testThrottling() {
    // First two requests are passed on immediately
    mThrottlingProducer.produceResults(mConsumers[0], mProducerContexts[0]);
    assertNotNull(mThrottlerConsumers[0]);
    verify(mProducerListeners[0]).onProducerStart(mProducerContexts[0], PRODUCER_NAME);
    verify(mProducerListeners[0])
        .onProducerFinishWithSuccess(mProducerContexts[0], PRODUCER_NAME, null);

    mThrottlingProducer.produceResults(mConsumers[1], mProducerContexts[1]);
    assertNotNull(mThrottlerConsumers[1]);
    verify(mProducerListeners[1]).onProducerStart(mProducerContexts[1], PRODUCER_NAME);
    verify(mProducerListeners[1])
        .onProducerFinishWithSuccess(mProducerContexts[1], PRODUCER_NAME, null);

    // Third and fourth requests are queued up
    mThrottlingProducer.produceResults(mConsumers[2], mProducerContexts[2]);
    assertNull(mThrottlerConsumers[2]);
    verify(mProducerListeners[2]).onProducerStart(mProducerContexts[2], PRODUCER_NAME);
    verify(mProducerListeners[2], never())
        .onProducerFinishWithSuccess(mProducerContexts[2], PRODUCER_NAME, null);

    mThrottlingProducer.produceResults(mConsumers[3], mProducerContexts[3]);
    assertNull(mThrottlerConsumers[3]);
    verify(mProducerListeners[3]).onProducerStart(mProducerContexts[3], PRODUCER_NAME);
    verify(mProducerListeners[3], never())
        .onProducerFinishWithSuccess(mProducerContexts[3], PRODUCER_NAME, null);

    // First request fails, third request is kicked off, fourth request remains in queue
    mThrottlerConsumers[0].onFailure(mException);
    verify(mConsumers[0]).onFailure(mException);
    assertNotNull(mThrottlerConsumers[2]);
    verify(mProducerListeners[2])
        .onProducerFinishWithSuccess(mProducerContexts[2], PRODUCER_NAME, null);
    assertNull(mThrottlerConsumers[3]);
    verify(mProducerListeners[3], never())
        .onProducerFinishWithSuccess(mProducerContexts[3], PRODUCER_NAME, null);

    // Fifth request is queued up
    mThrottlingProducer.produceResults(mConsumers[4], mProducerContexts[4]);
    assertNull(mThrottlerConsumers[4]);
    verify(mProducerListeners[4]).onProducerStart(mProducerContexts[4], PRODUCER_NAME);
    verify(mProducerListeners[4], never())
        .onProducerFinishWithSuccess(mProducerContexts[4], PRODUCER_NAME, null);

    // Second request gives intermediate result, no new request is kicked off
    Object intermediateResult = mock(Object.class);
    mThrottlerConsumers[1].onNewResult(intermediateResult, Consumer.NO_FLAGS);
    verify(mConsumers[1]).onNewResult(intermediateResult, Consumer.NO_FLAGS);
    assertNull(mThrottlerConsumers[3]);
    assertNull(mThrottlerConsumers[4]);

    // Third request finishes, fourth request is kicked off
    mThrottlerConsumers[2].onNewResult(mResults[2], Consumer.IS_LAST);
    verify(mConsumers[2]).onNewResult(mResults[2], Consumer.IS_LAST);
    assertNotNull(mThrottlerConsumers[3]);
    verify(mProducerListeners[3])
        .onProducerFinishWithSuccess(mProducerContexts[3], PRODUCER_NAME, null);
    assertNull(mThrottlerConsumers[4]);

    // Second request is cancelled, fifth request is kicked off
    mThrottlerConsumers[1].onCancellation();
    verify(mConsumers[1]).onCancellation();
    assertNotNull(mThrottlerConsumers[4]);
    verify(mProducerListeners[4])
        .onProducerFinishWithSuccess(mProducerContexts[4], PRODUCER_NAME, null);

    // Fourth and fifth requests finish
    mThrottlerConsumers[3].onNewResult(mResults[3], Consumer.IS_LAST);
    mThrottlerConsumers[4].onNewResult(mResults[4], Consumer.IS_LAST);
  }

  @Test
  public void testNoThrottlingAfterRequestsFinish() {
    // First two requests are passed on immediately
    mThrottlingProducer.produceResults(mConsumers[0], mProducerContexts[0]);
    assertNotNull(mThrottlerConsumers[0]);
    verify(mProducerListeners[0]).onProducerStart(mProducerContexts[0], PRODUCER_NAME);
    verify(mProducerListeners[0])
        .onProducerFinishWithSuccess(mProducerContexts[0], PRODUCER_NAME, null);

    mThrottlingProducer.produceResults(mConsumers[1], mProducerContexts[1]);
    assertNotNull(mThrottlerConsumers[1]);
    verify(mProducerListeners[1]).onProducerStart(mProducerContexts[1], PRODUCER_NAME);
    verify(mProducerListeners[1])
        .onProducerFinishWithSuccess(mProducerContexts[1], PRODUCER_NAME, null);

    // First two requests finish
    mThrottlerConsumers[0].onNewResult(mResults[3], Consumer.IS_LAST);
    mThrottlerConsumers[1].onNewResult(mResults[4], Consumer.IS_LAST);

    // Next two requests are passed on immediately
    mThrottlingProducer.produceResults(mConsumers[2], mProducerContexts[2]);
    assertNotNull(mThrottlerConsumers[2]);
    verify(mProducerListeners[2]).onProducerStart(mProducerContexts[2], PRODUCER_NAME);
    verify(mProducerListeners[2])
        .onProducerFinishWithSuccess(mProducerContexts[2], PRODUCER_NAME, null);

    mThrottlingProducer.produceResults(mConsumers[3], mProducerContexts[3]);
    assertNotNull(mThrottlerConsumers[3]);
    verify(mProducerListeners[3]).onProducerStart(mProducerContexts[3], PRODUCER_NAME);
    verify(mProducerListeners[3])
        .onProducerFinishWithSuccess(mProducerContexts[3], PRODUCER_NAME, null);

    // Next two requests finish
    mThrottlerConsumers[2].onNewResult(mResults[3], Consumer.IS_LAST);
    mThrottlerConsumers[3].onNewResult(mResults[4], Consumer.IS_LAST);
  }
=====================================================================
Found a 125 line (950 tokens) duplication in the following files: 
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java

    testWriteAfterToByteBuf(mAshmemPool);
  }

  private void testBasic_1(final MemoryChunkPool mPool, final PoolStats<byte[]> mStats)
      throws Exception {
    MemoryPooledByteBufferOutputStream os1 = new MemoryPooledByteBufferOutputStream(mPool);
    MemoryPooledByteBuffer sb1 = doWrite(os1, mData);
    Assert.assertEquals(16, sb1.getCloseableReference().get().getSize());
    assertArrayEquals(mData, getBytes(sb1), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(1, 0),
            8, new IntPair(0, 1),
            4, new IntPair(0, 1)),
        mStats.getBucketStats());
  }

  private void testBasic_2(final MemoryChunkPool mPool, final PoolStats<byte[]> mStats)
      throws Exception {
    MemoryPooledByteBufferOutputStream os2 = new MemoryPooledByteBufferOutputStream(mPool, 8);
    MemoryPooledByteBuffer sb2 = doWrite(os2, mData);
    Assert.assertEquals(16, sb2.getCloseableReference().get().getSize());
    assertArrayEquals(mData, getBytes(sb2), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(1, 0),
            8, new IntPair(0, 1),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
  }

  private void testBasic_3(final MemoryChunkPool mPool, final PoolStats<byte[]> mStats)
      throws Exception {
    MemoryPooledByteBufferOutputStream os3 = new MemoryPooledByteBufferOutputStream(mPool, 16);
    MemoryPooledByteBuffer sb3 = doWrite(os3, mData);
    Assert.assertEquals(16, sb3.getCloseableReference().get().getSize());
    assertArrayEquals(mData, getBytes(sb3), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(1, 0),
            8, new IntPair(0, 0),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
  }

  private void testBasic_4(final MemoryChunkPool mPool, final PoolStats<byte[]> mStats)
      throws Exception {
    MemoryPooledByteBufferOutputStream os4 = new MemoryPooledByteBufferOutputStream(mPool, 32);
    MemoryPooledByteBuffer sb4 = doWrite(os4, mData);
    Assert.assertEquals(32, sb4.getCloseableReference().get().getSize());
    assertArrayEquals(mData, getBytes(sb4), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(1, 0),
            16, new IntPair(0, 0),
            8, new IntPair(0, 0),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
  }

  private static void testClose(final MemoryChunkPool mPool, final PoolStats<byte[]> mStats) {
    MemoryPooledByteBufferOutputStream os = new MemoryPooledByteBufferOutputStream(mPool);
    os.close();
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(0, 0),
            8, new IntPair(0, 0),
            4, new IntPair(0, 1)),
        mStats.getBucketStats());
  }

  private static void testToByteBufException(final MemoryChunkPool mPool) {
    MemoryPooledByteBufferOutputStream os1 = new MemoryPooledByteBufferOutputStream(mPool);
    os1.close();
    os1.toByteBuffer();
    Assert.fail();
  }

  private void testWriteAfterToByteBuf(final MemoryChunkPool mPool) throws Exception {
    MemoryPooledByteBufferOutputStream os1 = new MemoryPooledByteBufferOutputStream(mPool);
    MemoryPooledByteBuffer buf1 = doWrite(os1, Arrays.copyOf(mData, 9));
    MemoryPooledByteBuffer buf2 = doWrite(os1, Arrays.copyOf(mData, 3));
    Assert.assertEquals(12, buf2.size());

    final CloseableReference<MemoryChunk> chunk = buf1.getCloseableReference();
    Assert.assertEquals(3, chunk.getUnderlyingReferenceTestOnly().getRefCountTestOnly());
    os1.close();
    buf1.close();
    buf2.close();
    Assert.assertEquals(0, chunk.getUnderlyingReferenceTestOnly().getRefCountTestOnly());
  }

  // write out the contents of data into the output stream
  private static MemoryPooledByteBuffer doWrite(MemoryPooledByteBufferOutputStream os, byte[] data)
      throws Exception {
    for (int i = 0; i < data.length; i++) {
      os.write(data, i, 1);
    }
    return os.toByteBuffer();
  }

  // assert that the first 'length' bytes of expected are the same as those in 'actual'
  private static void assertArrayEquals(byte[] expected, byte[] actual, int length) {
    Assert.assertTrue(expected.length >= length);
    Assert.assertTrue(actual.length >= length);
    for (int i = 0; i < length; i++) {
      Assert.assertEquals(expected[i], actual[i]);
    }
  }

  private static byte[] getBytes(MemoryPooledByteBuffer bb) {
    byte[] bytes = new byte[bb.size()];
    bb.getCloseableReference().get().read(0, bytes, 0, bytes.length);
    return bytes;
  }
}
=====================================================================
Found a 128 line (891 tokens) duplication in the following files: 
Starting at line 45 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 45 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java

    mBufferFactory = new MemoryPooledByteBufferFactory(mAshmemPool, pooledByteStreams);
  }

  @Test
  public void testNewByteBuf_1() throws Exception {
    testNewByteBuf_1(mBufferFactory, mBufferStats);
  }

  @Test
  public void testNewByteBuf_2() throws Exception {
    testNewByteBuf_2(mBufferFactory, mBufferStats);
  }

  @Test
  public void testNewByteBuf_3() throws Exception {
    testNewByteBuf_3(mBufferFactory, mBufferStats);
  }

  @Test
  public void testNewByteBuf_4() throws Exception {
    testNewByteBuf_4(mBufferFactory, mBufferStats);
  }

  @Test
  public void testNewByteBuf_5() {
    testNewByteBuf_5(mBufferFactory, mBufferStats);
  }

  private void testNewByteBuf_1(
      final MemoryPooledByteBufferFactory mFactory, final PoolStats mStats) throws Exception {
    MemoryPooledByteBuffer sb1 = mFactory.newByteBuffer(new ByteArrayInputStream(mData));
    Assert.assertEquals(16, sb1.getCloseableReference().get().getSize());
    assertArrayEquals(mData, getBytes(sb1), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(1, 0),
            8, new IntPair(0, 1),
            4, new IntPair(0, 1)),
        mStats.getBucketStats());
  }

  private void testNewByteBuf_2(
      final MemoryPooledByteBufferFactory mFactory, final PoolStats mStats) throws Exception {
    MemoryPooledByteBuffer sb2 = mFactory.newByteBuffer(new ByteArrayInputStream(mData), 8);
    Assert.assertEquals(16, sb2.getCloseableReference().get().getSize());
    assertArrayEquals(mData, getBytes(sb2), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(1, 0),
            8, new IntPair(0, 1),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
  }

  private void testNewByteBuf_3(
      final MemoryPooledByteBufferFactory mFactory, final PoolStats mStats) throws Exception {
    MemoryPooledByteBuffer sb3 = mFactory.newByteBuffer(new ByteArrayInputStream(mData), 16);
    Assert.assertEquals(16, sb3.getCloseableReference().get().getSize());
    assertArrayEquals(mData, getBytes(sb3), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(1, 0),
            8, new IntPair(0, 0),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
  }

  private void testNewByteBuf_4(
      final MemoryPooledByteBufferFactory mFactory, final PoolStats mStats) throws Exception {
    MemoryPooledByteBuffer sb4 = mFactory.newByteBuffer(new ByteArrayInputStream(mData), 32);
    Assert.assertEquals(32, sb4.getCloseableReference().get().getSize());
    assertArrayEquals(mData, getBytes(sb4), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(1, 0),
            16, new IntPair(0, 0),
            8, new IntPair(0, 0),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
  }

  private static void testNewByteBuf_5(
      final MemoryPooledByteBufferFactory mFactory, final PoolStats mStats) {
    MemoryPooledByteBuffer sb5 = mFactory.newByteBuffer(5);
    Assert.assertEquals(8, sb5.getCloseableReference().get().getSize());
    Assert.assertEquals(
        1, sb5.getCloseableReference().getUnderlyingReferenceTestOnly().getRefCountTestOnly());
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(0, 0),
            8, new IntPair(1, 0),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
    sb5.close();
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(0, 0),
            8, new IntPair(0, 1),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
  }

  // Assert that the first 'length' bytes of expected are the same as those in 'actual'
  private static void assertArrayEquals(byte[] expected, byte[] actual, int length) {
    Assert.assertTrue(expected.length >= length);
    Assert.assertTrue(actual.length >= length);
    for (int i = 0; i < length; i++) {
      Assert.assertEquals(expected[i], actual[i], i);
    }
  }

  private static byte[] getBytes(MemoryPooledByteBuffer bb) {
    byte[] bytes = new byte[bb.size()];
    bb.getCloseableReference().get().read(0, bytes, 0, bytes.length);
    return bytes;
  }
}
=====================================================================
Found a 103 line (806 tokens) duplication in the following files: 
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java

    testNewByteBuf_5(mBufferFactory, mBufferStats);
  }

  private void testNewByteBuf_1(
      final MemoryPooledByteBufferFactory mFactory, final PoolStats mStats) throws Exception {
    MemoryPooledByteBuffer sb1 = mFactory.newByteBuffer(new ByteArrayInputStream(mData));
    Assert.assertEquals(16, sb1.getCloseableReference().get().getSize());
    assertArrayEquals(mData, getBytes(sb1), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(1, 0),
            8, new IntPair(0, 1),
            4, new IntPair(0, 1)),
        mStats.getBucketStats());
  }

  private void testNewByteBuf_2(
      final MemoryPooledByteBufferFactory mFactory, final PoolStats mStats) throws Exception {
    MemoryPooledByteBuffer sb2 = mFactory.newByteBuffer(new ByteArrayInputStream(mData), 8);
    Assert.assertEquals(16, sb2.getCloseableReference().get().getSize());
    assertArrayEquals(mData, getBytes(sb2), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(1, 0),
            8, new IntPair(0, 1),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
  }

  private void testNewByteBuf_3(
      final MemoryPooledByteBufferFactory mFactory, final PoolStats mStats) throws Exception {
    MemoryPooledByteBuffer sb3 = mFactory.newByteBuffer(new ByteArrayInputStream(mData), 16);
    Assert.assertEquals(16, sb3.getCloseableReference().get().getSize());
    assertArrayEquals(mData, getBytes(sb3), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(1, 0),
            8, new IntPair(0, 0),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
  }

  private void testNewByteBuf_4(
      final MemoryPooledByteBufferFactory mFactory, final PoolStats mStats) throws Exception {
    MemoryPooledByteBuffer sb4 = mFactory.newByteBuffer(new ByteArrayInputStream(mData), 32);
    Assert.assertEquals(32, sb4.getCloseableReference().get().getSize());
    assertArrayEquals(mData, getBytes(sb4), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(1, 0),
            16, new IntPair(0, 0),
            8, new IntPair(0, 0),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
  }

  private static void testNewByteBuf_5(
      final MemoryPooledByteBufferFactory mFactory, final PoolStats mStats) {
    MemoryPooledByteBuffer sb5 = mFactory.newByteBuffer(5);
    Assert.assertEquals(8, sb5.getCloseableReference().get().getSize());
    Assert.assertEquals(
        1, sb5.getCloseableReference().getUnderlyingReferenceTestOnly().getRefCountTestOnly());
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(0, 0),
            8, new IntPair(1, 0),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
    sb5.close();
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(0, 0),
            8, new IntPair(0, 1),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
  }

  // Assert that the first 'length' bytes of expected are the same as those in 'actual'
  private static void assertArrayEquals(byte[] expected, byte[] actual, int length) {
    Assert.assertTrue(expected.length >= length);
    Assert.assertTrue(actual.length >= length);
    for (int i = 0; i < length; i++) {
      Assert.assertEquals(expected[i], actual[i], i);
    }
  }

  private static byte[] getBytes(MemoryPooledByteBuffer bb) {
    byte[] bytes = new byte[bb.size()];
    bb.getCloseableReference().get().read(0, bytes, 0, bytes.length);
    return bytes;
  }
}
=====================================================================
Found a 92 line (529 tokens) duplication in the following files: 
Starting at line 165 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 160 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(255, mFadeDrawable.mAlphas[2]);
  }

  @Test
  public void testImmediateTransition() {
    testImmediateTransition(true);
    testImmediateTransition(false);
  }

  private void testImmediateTransition(boolean fadeUpToLayer) {
    resetInteractions();
    if (fadeUpToLayer) {
      mFadeDrawable.fadeUpToLayer(1);
    } else {
      mFadeDrawable.fadeToLayer(1);
    }
    Assert.assertEquals(fadeUpToLayer, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    verify(mCallback).invalidateDrawable(mFadeDrawable);

    mFadeDrawable.finishTransitionImmediately();
    verify(mCallback, times(2)).invalidateDrawable(mFadeDrawable);
    Assert.assertEquals(fadeUpToLayer ? 255 : 0, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(FadeDrawable.TRANSITION_NONE, mFadeDrawable.mTransitionState);
  }

  @Test
  public void testZeroTransition() {
    testZeroTransition(true);
    testZeroTransition(false);
  }

  private void testZeroTransition(boolean fadeUpToLayer) {
    resetInteractions();
    mFadeDrawable.setTransitionDuration(0);
    if (fadeUpToLayer) {
      mFadeDrawable.fadeUpToLayer(1);
    } else {
      mFadeDrawable.fadeToLayer(1);
    }
    Assert.assertEquals(fadeUpToLayer, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    verify(mCallback).invalidateDrawable(mFadeDrawable);

    mFadeDrawable.draw(mCanvas);
    Assert.assertEquals(fadeUpToLayer ? 255 : 0, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(FadeDrawable.TRANSITION_NONE, mFadeDrawable.mTransitionState);
    if (fadeUpToLayer) {
      verify(mLayers[0]).draw(mCanvas);
    }
    verify(mLayers[1]).draw(mCanvas);
  }

  @Test
  public void testTransition() {
    testTransition(true);
    testTransition(false);
  }

  private void testTransition(boolean fadeUpToLayer) {
    // duration is set to 85 ms
    // 85 = 5 * 17; 5 frames of 17ms
    // 255 / 5 = 51; each frame alpha should increase by 51

    // reset drawable
    mFadeDrawable.reset();

    // start animation
    resetInteractions();
    mFadeDrawable.setTransitionDuration(85);
    if (fadeUpToLayer) {
      mFadeDrawable.fadeUpToLayer(1);
    } else {
      mFadeDrawable.fadeToLayer(1);
    }
    Assert.assertEquals(fadeUpToLayer, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    verifyNoMoreInteractions(mCallback, mLayers[0], mLayers[1], mLayers[2]);

    // first frame
    resetInteractions();
    mFadeDrawable.draw(mCanvas);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
=====================================================================
Found a 108 line (517 tokens) duplication in the following files: 
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 235 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java

    verify(sourceCloseableAnimatedImage).close();
  }

  private void setupNewSourceImage() {
    mSourceBitmap = mock(Bitmap.class);
    mSourceCloseableStaticBitmap = mock(CloseableStaticBitmap.class);
    when(mSourceCloseableStaticBitmap.getUnderlyingBitmap()).thenReturn(mSourceBitmap);
    mSourceCloseableImageRef = CloseableReference.<CloseableImage>of(mSourceCloseableStaticBitmap);
  }

  private void setupNewDestinationImage() {
    mDestinationBitmap = mock(Bitmap.class);
    mDestinationCloseableBitmapRef =
        CloseableReference.of(mDestinationBitmap, mBitmapResourceReleaser);
    doReturn(mDestinationCloseableBitmapRef)
        .when(mPostprocessor)
        .process(mSourceBitmap, mPlatformBitmapFactory);
  }

  private RepeatedPostprocessorConsumer produceResults() {
    mPostprocessorProducer.produceResults(mConsumer, mProducerContext);
    ArgumentCaptor<Consumer> consumerCaptor = ArgumentCaptor.forClass(Consumer.class);
    verify(mInputProducer).produceResults(consumerCaptor.capture(), eq(mProducerContext));
    return (RepeatedPostprocessorConsumer) consumerCaptor.getValue();
  }

  private RepeatedPostprocessorRunner getRunner() {
    ArgumentCaptor<RepeatedPostprocessorRunner> captor =
        ArgumentCaptor.forClass(RepeatedPostprocessorRunner.class);
    mInOrder.verify(mPostprocessor).setCallback(captor.capture());
    return captor.getValue();
  }

  private void performNewResult(RepeatedPostprocessorConsumer postprocessorConsumer, boolean run) {
    setupNewSourceImage();
    setupNewDestinationImage();
    postprocessorConsumer.onNewResult(mSourceCloseableImageRef, Consumer.IS_LAST);
    mSourceCloseableImageRef.close();
    if (run) {
      mTestExecutorService.runUntilIdle();
    }
  }

  private void performUpdate(RepeatedPostprocessorRunner repeatedPostprocessorRunner, boolean run) {
    setupNewDestinationImage();
    repeatedPostprocessorRunner.update();
    if (run) {
      mTestExecutorService.runUntilIdle();
    }
  }

  private void performUpdateDuringTheNextPostprocessing(
      final RepeatedPostprocessorRunner repeatedPostprocessorRunner) {
    doAnswer(
            new Answer<CloseableReference<Bitmap>>() {
              @Override
              public CloseableReference<Bitmap> answer(InvocationOnMock invocation)
                  throws Throwable {
                CloseableReference<Bitmap> destBitmapRef = mDestinationCloseableBitmapRef;
                performUpdate(repeatedPostprocessorRunner, false);
                // the following call should be ignored
                performUpdate(repeatedPostprocessorRunner, false);
                return destBitmapRef;
              }
            })
        .when(mPostprocessor)
        .process(mSourceBitmap, mPlatformBitmapFactory);
  }

  private void performFailure(RepeatedPostprocessorRunner repeatedPostprocessorRunner) {
    setupNewDestinationImage();
    doThrow(new RuntimeException())
        .when(mPostprocessor)
        .process(mSourceBitmap, mPlatformBitmapFactory);
    repeatedPostprocessorRunner.update();
    mTestExecutorService.runUntilIdle();
  }

  private void performCancelAndVerifyOnCancellation() {
    performCancel();
    mInOrder.verify(mConsumer).onCancellation();
  }

  private void performCancelAfterFinished() {
    performCancel();
    mInOrder.verify(mConsumer, never()).onCancellation();
  }

  private void performCancel() {
    mProducerContext.cancel();
    mTestExecutorService.runUntilIdle();
  }

  private void verifyNewResultProcessed(int index) {
    verifyNewResultProcessed(index, mDestinationBitmap);
  }

  private void verifyNewResultProcessed(int index, Bitmap destBitmap) {
    mInOrder
        .verify(mProducerListener)
        .onProducerStart(mProducerContext, PostprocessorProducer.NAME);
    mInOrder.verify(mPostprocessor).process(mSourceBitmap, mPlatformBitmapFactory);
    mInOrder
        .verify(mProducerListener)
        .requiresExtraMap(mProducerContext, PostprocessorProducer.NAME);
    mInOrder
        .verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PostprocessorProducer.NAME, mExtraMap);
=====================================================================
Found a 102 line (476 tokens) duplication in the following files: 
Starting at line 24 of C:\Users\anaca\Documents\Projetos\fresco\samples\comparison\src\main\java\com\facebook\samples\comparison\instrumentation\Instrumentation.java
Starting at line 24 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\main\java\com\facebook\samples\scrollperf\instrumentation\Instrumentation.java

public class Instrumentation {
  private static final String TAG = "Instrumentation";

  private static enum ImageRequestState {
    NOT_STARTED,
    STARTED,
    SUCCESS,
    FAILURE,
    CANCELLATION,
  }

  private final Paint mPaint;
  private final Rect mTextRect;
  private final View mView;

  private PerfListener mPerfListener;
  private long mStartTime;
  private String mTag;
  private long mFinishTime;
  private ImageRequestState mState;

  public Instrumentation(View view) {
    mPaint = new Paint();
    mTextRect = new Rect();
    mView = view;
    mState = ImageRequestState.NOT_STARTED;
  }

  public void init(final String tag, final PerfListener perfListener) {
    mTag = Preconditions.checkNotNull(tag);
    mPerfListener = Preconditions.checkNotNull(perfListener);
  }

  public void onStart() {
    Preconditions.checkNotNull(mTag);
    Preconditions.checkNotNull(mPerfListener);
    if (mState == ImageRequestState.STARTED) {
      onCancellation();
    }
    mStartTime = System.currentTimeMillis();
    mFinishTime = 0;
    mPerfListener.reportStart();
    mState = ImageRequestState.STARTED;
    FLog.i(TAG, "Image [%s]: loading started...", mTag);
  }

  public void onSuccess() {
    Preconditions.checkState(mState == ImageRequestState.STARTED);
    mState = ImageRequestState.SUCCESS;
    mFinishTime = System.currentTimeMillis();
    final long elapsedTime = mFinishTime - mStartTime;
    mPerfListener.reportSuccess(elapsedTime);
    FLog.i(TAG, "Image [%s]: loaded after %d ms", mTag, elapsedTime);
  }

  public void onFailure() {
    Preconditions.checkState(mState == ImageRequestState.STARTED);
    mState = ImageRequestState.FAILURE;
    mFinishTime = System.currentTimeMillis();
    final long elapsedTime = mFinishTime - mStartTime;
    mPerfListener.reportFailure(elapsedTime);
    FLog.i(TAG, "Image [%s]: failed after %d ms", mTag, elapsedTime);
  }

  public void onCancellation() {
    if (mState != ImageRequestState.STARTED) {
      return;
    }
    mState = ImageRequestState.CANCELLATION;
    mFinishTime = System.currentTimeMillis();
    final long elapsedTime = mFinishTime - mStartTime;
    mPerfListener.reportCancellation(elapsedTime);
    FLog.i(TAG, "Image [%s]: cancelled after %d ms", mTag, elapsedTime);
  }

  /** Draws overlay with request state for easier visual inspection. */
  public void onDraw(final Canvas canvas) {
    mPaint.setColor(0xC0000000);
    mTextRect.set(0, 0, mView.getWidth(), 35);
    canvas.drawRect(mTextRect, mPaint);

    mPaint.setColor(Color.WHITE);
    canvas.drawText("[" + mTag + "]", 10, 15, mPaint);

    String message = "Not started";
    switch (mState) {
      case STARTED:
        message = "Loading...";
        break;
      case SUCCESS:
        message = "Loaded after " + (mFinishTime - mStartTime) + "ms";
        break;
      case FAILURE:
        message = "Failed after " + (mFinishTime - mStartTime) + "ms";
        break;
      case CANCELLATION:
        message = "Cancelled after " + (mFinishTime - mStartTime) + "ms";
        break;
    }
    canvas.drawText(message, 10, 30, mPaint);
  }
}
=====================================================================
Found a 60 line (380 tokens) duplication in the following files: 
Starting at line 84 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferTest.java
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferTest.java

    testClose(mBufferPooledByteBuffer, mAshmemChunk, mAshmemPool);
  }

  @Test(expected = PooledByteBuffer.ClosedException.class)
  public void testGettingSizeAfterCloseUsingBufferPool() {
    mBufferPooledByteBuffer.close();
    mBufferPooledByteBuffer.size();
  }

  private static void testBasic(
      final MemoryPooledByteBuffer mPooledByteBuffer, final MemoryChunk mChunk) {
    assertFalse(mPooledByteBuffer.isClosed());
    assertSame(mChunk, mPooledByteBuffer.getCloseableReference().get());
    assertEquals(BUFFER_LENGTH, mPooledByteBuffer.size());
  }

  private static void testSimpleRead(final MemoryPooledByteBuffer mPooledByteBuffer) {
    for (int i = 0; i < 100; ++i) {
      final int offset = i % BUFFER_LENGTH;
      assertEquals(BYTES[offset], mPooledByteBuffer.read(offset));
    }
  }

  private static void testRangeRead(final MemoryPooledByteBuffer mPooledByteBuffer) {
    byte[] readBuf = new byte[BUFFER_LENGTH];
    mPooledByteBuffer.read(1, readBuf, 1, BUFFER_LENGTH - 2);
    assertEquals(0, readBuf[0]);
    assertEquals(0, readBuf[BUFFER_LENGTH - 1]);
    for (int i = 1; i < BUFFER_LENGTH - 1; ++i) {
      assertEquals(BYTES[i], readBuf[i]);
    }
  }

  private static void testRangeReadOutOfBounds(final MemoryPooledByteBuffer mPooledByteBuffer) {
    byte[] readBuf = new byte[BUFFER_LENGTH];
    mPooledByteBuffer.read(1, readBuf, 0, BUFFER_LENGTH);
  }

  private static void testReadFromStream(final MemoryPooledByteBuffer mPooledByteBuffer)
      throws Exception {
    InputStream is = new PooledByteBufferInputStream(mPooledByteBuffer);
    byte[] tmp = new byte[BUFFER_LENGTH + 1];
    int bytesRead = is.read(tmp, 0, tmp.length);
    assertEquals(BUFFER_LENGTH, bytesRead);
    for (int i = 0; i < BUFFER_LENGTH; i++) {
      assertEquals(BYTES[i], tmp[i]);
    }
    assertEquals(-1, is.read());
  }

  private static void testClose(
      final MemoryPooledByteBuffer mPooledByteBuffer,
      final MemoryChunk mChunk,
      final MemoryChunkPool mPool) {
    mPooledByteBuffer.close();
    assertTrue(mPooledByteBuffer.isClosed());
    assertNull(mPooledByteBuffer.getCloseableReference());
    verify(mPool).release(mChunk);
  }
}
=====================================================================
Found a 47 line (362 tokens) duplication in the following files: 
Starting at line 294 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 280 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java


drawee.src.test.java.com.facebook.drawee.drawable.FadeDrawableTest


      verify(mLayers[2]).draw(mCanvas);
      verify(mCallback).invalidateDrawable(mFadeDrawable);
      verifyNoMoreInteractions(mCallback, mLayers[0], mLayers[1], mLayers[2]);
    }

    // last frame
    resetInteractions();
    mFadeDrawable.incrementCurrentTimeMs(17);
    mFadeDrawable.draw(mCanvas);
    Assert.assertEquals(fadeUpToLayer ? 255 : 0, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(FadeDrawable.TRANSITION_NONE, mFadeDrawable.mTransitionState);
    if (fadeUpToLayer) {
      verify(mLayers[0]).mutate();
      verify(mLayers[0]).setAlpha(255);
      verify(mLayers[0]).draw(mCanvas);
    }
    verify(mLayers[1]).mutate();
    verify(mLayers[1]).setAlpha(255);
    verify(mLayers[1]).draw(mCanvas);
    verifyNoMoreInteractions(mCallback, mLayers[0], mLayers[1], mLayers[2]);
  }

  @Test
  public void testSetAlpha() {
    InOrder inOrder = inOrder(mLayers[0], mLayers[1], mLayers[2], mCallback);
    // reset drawable
    mFadeDrawable.reset();
    inOrder.verify(mCallback).invalidateDrawable(mFadeDrawable);
    // start animation
    mFadeDrawable.setTransitionDuration(85);
    mFadeDrawable.fadeUpToLayer(1);
    inOrder.verify(mCallback).invalidateDrawable(mFadeDrawable);
    // first frame
    mFadeDrawable.draw(mCanvas);
    inOrder.verify(mCallback, atLeastOnce()).invalidateDrawable(mFadeDrawable);
    // setAlpha
    mFadeDrawable.setAlpha(128);
    Assert.assertEquals(128, mFadeDrawable.getAlpha());
    inOrder.verify(mCallback).invalidateDrawable(mFadeDrawable);
    // next frame
    mFadeDrawable.incrementCurrentTimeMs(17);
    mFadeDrawable.draw(mCanvas);
    Assert.assertEquals(128, mFadeDrawable.getAlpha());
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
=====================================================================
Found a 54 line (355 tokens) duplication in the following files: 
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferTest.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferTest.java
Starting at line 89 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferTest.java

    mBufferPooledByteBuffer.size();
  }

  private static void testBasic(
      final MemoryPooledByteBuffer mPooledByteBuffer, final MemoryChunk mChunk) {
    assertFalse(mPooledByteBuffer.isClosed());
    assertSame(mChunk, mPooledByteBuffer.getCloseableReference().get());
    assertEquals(BUFFER_LENGTH, mPooledByteBuffer.size());
  }

  private static void testSimpleRead(final MemoryPooledByteBuffer mPooledByteBuffer) {
    for (int i = 0; i < 100; ++i) {
      final int offset = i % BUFFER_LENGTH;
      assertEquals(BYTES[offset], mPooledByteBuffer.read(offset));
    }
  }

  private static void testRangeRead(final MemoryPooledByteBuffer mPooledByteBuffer) {
    byte[] readBuf = new byte[BUFFER_LENGTH];
    mPooledByteBuffer.read(1, readBuf, 1, BUFFER_LENGTH - 2);
    assertEquals(0, readBuf[0]);
    assertEquals(0, readBuf[BUFFER_LENGTH - 1]);
    for (int i = 1; i < BUFFER_LENGTH - 1; ++i) {
      assertEquals(BYTES[i], readBuf[i]);
    }
  }

  private static void testRangeReadOutOfBounds(final MemoryPooledByteBuffer mPooledByteBuffer) {
    byte[] readBuf = new byte[BUFFER_LENGTH];
    mPooledByteBuffer.read(1, readBuf, 0, BUFFER_LENGTH);
  }

  private static void testReadFromStream(final MemoryPooledByteBuffer mPooledByteBuffer)
      throws Exception {
    InputStream is = new PooledByteBufferInputStream(mPooledByteBuffer);
    byte[] tmp = new byte[BUFFER_LENGTH + 1];
    int bytesRead = is.read(tmp, 0, tmp.length);
    assertEquals(BUFFER_LENGTH, bytesRead);
    for (int i = 0; i < BUFFER_LENGTH; i++) {
      assertEquals(BYTES[i], tmp[i]);
    }
    assertEquals(-1, is.read());
  }

  private static void testClose(
      final MemoryPooledByteBuffer mPooledByteBuffer,
      final MemoryChunk mChunk,
      final MemoryChunkPool mPool) {
    mPooledByteBuffer.close();
    assertTrue(mPooledByteBuffer.isClosed());
    assertNull(mPooledByteBuffer.getCloseableReference());
    verify(mPool).release(mChunk);
  }
}
=====================================================================
Found a 41 line (353 tokens) duplication in the following files: 
Starting at line 473 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 550 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set final image (non-immediate)
    dh.setImage(mActualImage2, 1f, false);
    assertEquals(mActualImage2, finalImageSettableDrawable.getCurrent());
    assertEquals(false, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_STARTING, fadeDrawable.getTransitionState());
    assertEquals(250, fadeDrawable.getTransitionDuration());

    // initial state -> temporary image (immediate) -> final image (non-immediate)
    // reset hierarchy to initial state, show progress bar
    dh.reset();
    assertEquals(false, fadeDrawable.isLayerOn(progressBarImageIndex));
    dh.setProgress(0f, true);
    assertEquals(ColorDrawable.class, finalImageSettableDrawable.getCurrent().getClass());
    assertEquals(true, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set temporary image (immediate)
    dh.setImage(mActualImage1, 0.5f, true);
    assertEquals(mActualImage1, finalImageSettableDrawable.getCurrent());
    assertEquals(false, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set final image (non-immediate)
    dh.setImage(mActualImage2, 1f, false);
=====================================================================
Found a 48 line (331 tokens) duplication in the following files: 
Starting at line 370 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 358 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[2]);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
  }

  @Test
  public void testBatchMode() {
    mFadeDrawable.beginBatchMode();
    mFadeDrawable.reset();
    mFadeDrawable.fadeInLayer(1);
    mFadeDrawable.fadeOutLayer(0);
    mFadeDrawable.fadeOutAllLayers();
    mFadeDrawable.fadeToLayer(2);
    mFadeDrawable.fadeUpToLayer(1);
    mFadeDrawable.finishTransitionImmediately();
    mFadeDrawable.endBatchMode();
    verify(mCallback, times(1)).invalidateDrawable(mFadeDrawable);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
  }

  @Test
  public void testNoBatchMode() {
    mFadeDrawable.reset();
    mFadeDrawable.fadeInLayer(1);
    mFadeDrawable.fadeOutLayer(0);
    mFadeDrawable.fadeOutAllLayers();
    mFadeDrawable.fadeToLayer(2);
    mFadeDrawable.fadeUpToLayer(1);
    mFadeDrawable.finishTransitionImmediately();
    verify(mCallback, times(7)).invalidateDrawable(mFadeDrawable);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
  }

  private static class FakeFadeDrawable extends FadeDrawable {

    private long mCurrentTimeMs;

    public FakeFadeDrawable(Drawable[] layers) {
      super(layers, true, 0);
=====================================================================
Found a 43 line (329 tokens) duplication in the following files: 
Starting at line 34 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 27 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

public class FadeDrawableAllOnTest {
  private Drawable[] mLayers =
      new Drawable[] {
        DrawableTestUtils.mockDrawable(),
        DrawableTestUtils.mockDrawable(),
        DrawableTestUtils.mockDrawable(),
      };

  private FakeFadeDrawable mFadeDrawable;
  private Canvas mCanvas = mock(Canvas.class);
  private Drawable.Callback mCallback = mock(Drawable.Callback.class);

  @Before
  public void setUp() {
    mFadeDrawable = new FakeFadeDrawable(mLayers);
    mFadeDrawable.setCallback(mCallback);
  }

  private void resetInteractions() {
    reset(mCallback, mLayers[0], mLayers[1], mLayers[2]);
    when(mLayers[0].mutate()).thenReturn(mLayers[0]);
    when(mLayers[1].mutate()).thenReturn(mLayers[1]);
    when(mLayers[2].mutate()).thenReturn(mLayers[2]);
  }

  @Test
  public void testIntrinsicDimensions() {
    when(mLayers[0].getIntrinsicWidth()).thenReturn(100);
    when(mLayers[1].getIntrinsicWidth()).thenReturn(200);
    when(mLayers[2].getIntrinsicWidth()).thenReturn(150);
    when(mLayers[0].getIntrinsicHeight()).thenReturn(400);
    when(mLayers[1].getIntrinsicHeight()).thenReturn(350);
    when(mLayers[2].getIntrinsicHeight()).thenReturn(300);
    Assert.assertEquals(200, mFadeDrawable.getIntrinsicWidth());
    Assert.assertEquals(400, mFadeDrawable.getIntrinsicHeight());
  }

  @Test
  public void testInitialState() {
    // initially only the fist layer is displayed and there is no transition
    Assert.assertEquals(FadeDrawable.TRANSITION_NONE, mFadeDrawable.mTransitionState);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
=====================================================================
Found a 36 line (322 tokens) duplication in the following files: 
Starting at line 467 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 505 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set final image (non-immediate)
    dh.setImage(mActualImage2, 1f, false);
    assertEquals(mActualImage2, finalImageSettableDrawable.getCurrent());
    assertEquals(false, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_STARTING, fadeDrawable.getTransitionState());
    assertEquals(250, fadeDrawable.getTransitionDuration());

    // initial state -> temporary image (immediate) -> final image (non-immediate)
    // reset hierarchy to initial state, show progress bar
    dh.reset();
    assertEquals(false, fadeDrawable.isLayerOn(progressBarImageIndex));
    dh.setProgress(0f, true);
    assertEquals(ColorDrawable.class, finalImageSettableDrawable.getCurrent().getClass());
    assertEquals(true, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set temporary image (immediate)
    dh.setImage(mActualImage1, 0.5f, true);
=====================================================================
Found a 56 line (321 tokens) duplication in the following files: 
Starting at line 848 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 922 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

  public void testMovingDelayedRequeue_requeueOnFail() {
    RecordingNetworkFetcher recordingNetworkFetcher = new RecordingNetworkFetcher();
    final int maxNumberOfRequeue = 3;
    final int immediateRequeueCount = 1;
    final int delayTimeInMillis = 300;
    FakeClock clock = new FakeClock();

    // Max hi-pri: 1, max low-pri: 0
    PriorityNetworkFetcher<FetchState> fetcher =
        new PriorityNetworkFetcher<>(
            recordingNetworkFetcher,
            false,
            1,
            0,
            true,
            maxNumberOfRequeue,
            false,
            immediateRequeueCount,
            delayTimeInMillis,
            false,
            false /* nonRecoverableExceptionPreventsRequeue */,
            1 /* maxConnectAttemptCount */,
            1 /* maxAttemptCount */,
            false /* retryLowPriAll */,
            false /* retryLowPriUnknownHostException */,
            false /* retryLowPriConnectionException */,
            clock);

    PriorityFetchState<FetchState> hipri1 = fetch(fetcher, "hipri1", callback, true);

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
    assertThat(fetcher.getHiPriQueue()).isEmpty();
    assertThat(fetcher.getLowPriQueue()).isEmpty();

    // Simulate 1st failure in hipri1, the request should be requeued immediately.
    getOnlyElement(recordingNetworkFetcher.callbacks.get(hipri1.delegatedState))
        .onFailure(new Exception());

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
    assertThat(fetcher.getHiPriQueue()).isEmpty();
    assertThat(fetcher.getLowPriQueue()).isEmpty();
    assertThat(fetcher.getDelayedQeueue()).isEmpty();
    assertThat(hipri1.requeueCount).isEqualTo(1);
    assertThat(fetcher.getExtraMap(hipri1, 123)).containsEntry("delay_count", "0");

    // Simulate 2nd failure in hipri1, the request should wait in the delayedQueue for
    // delayTimeInMillis.
    getOnlyElement(recordingNetworkFetcher.callbacks.get(hipri1.delegatedState))
        .onFailure(new Exception());
    assertThat(fetcher.getCurrentlyFetching()).isEmpty();
    assertThat(fetcher.getHiPriQueue()).isEmpty();
    assertThat(fetcher.getLowPriQueue()).isEmpty();
    assertThat(fetcher.getDelayedQeueue()).containsExactly(hipri1);
    assertThat(fetcher.getExtraMap(hipri1, 123)).containsEntry("delay_count", "1");

    clock.incrementBy(301);
=====================================================================
Found a 34 line (294 tokens) duplication in the following files: 
Starting at line 480 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 557 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 595 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_STARTING, fadeDrawable.getTransitionState());
    assertEquals(250, fadeDrawable.getTransitionDuration());

    // initial state -> temporary image (immediate) -> final image (non-immediate)
    // reset hierarchy to initial state, show progress bar
    dh.reset();
    assertEquals(false, fadeDrawable.isLayerOn(progressBarImageIndex));
    dh.setProgress(0f, true);
    assertEquals(ColorDrawable.class, finalImageSettableDrawable.getCurrent().getClass());
    assertEquals(true, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set temporary image (immediate)
    dh.setImage(mActualImage1, 0.5f, true);
    assertEquals(mActualImage1, finalImageSettableDrawable.getCurrent());
    assertEquals(false, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set final image (non-immediate)
    dh.setImage(mActualImage2, 1f, false);
=====================================================================
Found a 36 line (276 tokens) duplication in the following files: 
Starting at line 796 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 585 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

            initialLFUCacheFractionPromil);
    PowerMockito.when(SystemClock.uptimeMillis()).thenReturn(PARAMS_CHECK_INTERVAL_MS);
    InOrder inOrder = inOrder(mReleaser);

    // create original references
    CloseableReference<Integer>[] originalRefs = new CloseableReference[10];
    for (int i = 0; i < 10; i++) {
      originalRefs[i] = newReference(100 + i);
    }
    // cache items & close the original references
    CloseableReference<Integer>[] cachedRefs = new CloseableReference[10];
    for (int i = 0; i < 10; i++) {
      cachedRefs[i] = mCache.cache(KEYS[i], originalRefs[i]);
      originalRefs[i].close();
    }
    // cache should keep alive the items until evicted
    inOrder.verify(mReleaser, never()).release(anyInt());

    // trimming cannot evict shared entries
    when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);
    mCache.trim(memoryTrimType);
    assertSharedWithCount(KEYS[0], 100, 1);
    assertSharedWithCount(KEYS[1], 101, 1);
    assertSharedWithCount(KEYS[2], 102, 1);
    assertSharedWithCount(KEYS[3], 103, 1);
    assertSharedWithCount(KEYS[4], 104, 1);
    assertSharedWithCount(KEYS[5], 105, 1);
    assertSharedWithCount(KEYS[6], 106, 1);
    assertSharedWithCount(KEYS[7], 107, 1);
    assertSharedWithCount(KEYS[8], 108, 1);
    assertSharedWithCount(KEYS[9], 109, 1);
    assertTotalSize(10, 1045);
    assertExclusivelyOwnedSize(0, 0);

    // close 6 client references
    cachedRefs[4].close();
=====================================================================
Found a 47 line (271 tokens) duplication in the following files: 
Starting at line 341 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 238 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> cachedRef1 = mCache.cache(KEY, newReference(100));

    CloseableReference<Integer> cachedRef2a = mCache.get(KEY);
    CloseableReference<Integer> cachedRef2b = cachedRef2a.clone();
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(0, 0);
    assertSharedWithCount(KEY, 100, 2);

    CloseableReference<Integer> cachedRef3a = mCache.get(KEY);
    CloseableReference<Integer> cachedRef3b = cachedRef3a.clone();
    CloseableReference<Integer> cachedRef3c = cachedRef3b.clone();
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(0, 0);
    assertSharedWithCount(KEY, 100, 3);

    cachedRef1.close();
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(0, 0);
    assertSharedWithCount(KEY, 100, 2);

    // all copies of cachedRef2a need to be closed for usage count to drop
    cachedRef2a.close();
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(0, 0);
    assertSharedWithCount(KEY, 100, 2);
    cachedRef2b.close();
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(0, 0);
    assertSharedWithCount(KEY, 100, 1);

    // all copies of cachedRef3a need to be closed for usage count to drop
    cachedRef3c.close();
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(0, 0);
    assertSharedWithCount(KEY, 100, 1);
    cachedRef3b.close();
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(0, 0);
    assertSharedWithCount(KEY, 100, 1);
    cachedRef3a.close();
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(1, 100);
    assertExclusivelyOwned(KEY, 100);
  }

  @Test
  public void testCachingSameKeyTwice() {
=====================================================================
Found a 55 line (269 tokens) duplication in the following files: 
Starting at line 273 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 493 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x7a,
        (byte) 0x83,
        (byte) 0x84,
        (byte) 0x85,
        (byte) 0x86,
        (byte) 0x87,
        (byte) 0x88,
        (byte) 0x89,
        (byte) 0x8a,
        (byte) 0x92,
        (byte) 0x93,
        (byte) 0x94,
        (byte) 0x95,
        (byte) 0x96,
        (byte) 0x97,
        (byte) 0x98,
        (byte) 0x99,
        (byte) 0x9a,
        (byte) 0xa2,
        (byte) 0xa3,
        (byte) 0xa4,
        (byte) 0xa5,
        (byte) 0xa6,
        (byte) 0xa7,
        (byte) 0xa8,
        (byte) 0xa9,
        (byte) 0xaa,
        (byte) 0xb2,
        (byte) 0xb3,
        (byte) 0xb4,
        (byte) 0xb5,
        (byte) 0xb6,
        (byte) 0xb7,
        (byte) 0xb8,
        (byte) 0xb9,
        (byte) 0xba,
        (byte) 0xc2,
        (byte) 0xc3,
        (byte) 0xc4,
        (byte) 0xc5,
        (byte) 0xc6,
        (byte) 0xc7,
        (byte) 0xc8,
        (byte) 0xc9,
        (byte) 0xca,
        (byte) 0xd2,
        (byte) 0xd3,
        (byte) 0xd4,
        (byte) 0xd5,
        (byte) 0xd6,
        (byte) 0xd7,
        (byte) 0xd8,
        (byte) 0xd9,
        (byte) 0xda,
        (byte) 0xe1,
=====================================================================
Found a 30 line (253 tokens) duplication in the following files: 
Starting at line 511 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 550 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set final image (non-immediate)
    dh.setImage(mActualImage2, 1f, false);
    assertEquals(mActualImage2, finalImageSettableDrawable.getCurrent());
    assertEquals(false, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_STARTING, fadeDrawable.getTransitionState());
    assertEquals(250, fadeDrawable.getTransitionDuration());

    // initial state -> temporary image (non-immediate) -> final image (non-immediate)
    // reset hierarchy to initial state, show progress bar
    dh.reset();
    assertEquals(false, fadeDrawable.isLayerOn(progressBarImageIndex));
    dh.setProgress(0f, true);
    assertEquals(ColorDrawable.class, finalImageSettableDrawable.getCurrent().getClass());
    assertEquals(true, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set temporary image (non-immediate)
    dh.setImage(mActualImage1, 0.5f, false);
=====================================================================
Found a 49 line (241 tokens) duplication in the following files: 
Starting at line 46 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 46 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java

  private static final String POSTPROCESSOR_NAME = "postprocessor_name";
  private static final Map<String, String> mExtraMap =
      ImmutableMap.of(PostprocessorProducer.POSTPROCESSOR, POSTPROCESSOR_NAME);

  @Mock public PlatformBitmapFactory mPlatformBitmapFactory;
  @Mock public ProducerListener2 mProducerListener;
  @Mock public Producer<CloseableReference<CloseableImage>> mInputProducer;
  @Mock public Consumer<CloseableReference<CloseableImage>> mConsumer;
  @Mock public RepeatedPostprocessor mPostprocessor;
  @Mock public ResourceReleaser<Bitmap> mBitmapResourceReleaser;

  @Mock public ImageRequest mImageRequest;

  @Mock public ImagePipelineConfig mConfig;

  private SettableProducerContext mProducerContext;
  private String mRequestId = "mRequestId";
  private Bitmap mSourceBitmap;
  private CloseableStaticBitmap mSourceCloseableStaticBitmap;
  private CloseableReference<CloseableImage> mSourceCloseableImageRef;
  private Bitmap mDestinationBitmap;
  private CloseableReference<Bitmap> mDestinationCloseableBitmapRef;
  private TestExecutorService mTestExecutorService;
  private PostprocessorProducer mPostprocessorProducer;
  private List<CloseableReference<CloseableImage>> mResults;

  private InOrder mInOrder;

  @Before
  public void setUp() {
    MockitoAnnotations.initMocks(this);
    mTestExecutorService = new TestExecutorService(new FakeClock());
    mPostprocessorProducer =
        new PostprocessorProducer(mInputProducer, mPlatformBitmapFactory, mTestExecutorService);
    mProducerContext =
        new SettableProducerContext(
            mImageRequest,
            mRequestId,
            mProducerListener,
            mock(Object.class),
            ImageRequest.RequestLevel.FULL_FETCH,
            false /* isPrefetch */,
            false /* isIntermediateResultExpected */,
            Priority.MEDIUM,
            mConfig);
    when(mImageRequest.getPostprocessor()).thenReturn(mPostprocessor);
    mResults = new ArrayList<>();
    when(mPostprocessor.getName()).thenReturn(POSTPROCESSOR_NAME);
    when(mProducerListener.requiresExtraMap(mProducerContext, POSTPROCESSOR_NAME)).thenReturn(true);
=====================================================================
Found a 41 line (241 tokens) duplication in the following files: 
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedSingleUsePostprocessorProducerTest.java
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

  private static final String POSTPROCESSOR_NAME = "postprocessor_name";
  private static final Map<String, String> mExtraMap =
      ImmutableMap.of(PostprocessorProducer.POSTPROCESSOR, POSTPROCESSOR_NAME);

  @Mock public PlatformBitmapFactory mPlatformBitmapFactory;
  @Mock public ProducerContext mProducerContext;
  @Mock public ProducerListener2 mProducerListener;
  @Mock public Producer<CloseableReference<CloseableImage>> mInputProducer;
  @Mock public Consumer<CloseableReference<CloseableImage>> mConsumer;
  @Mock public Postprocessor mPostprocessor;
  @Mock public ResourceReleaser<Bitmap> mBitmapResourceReleaser;

  @Mock public ImageRequest mImageRequest;

  private String mRequestId = "mRequestId";
  private Bitmap mSourceBitmap;
  private CloseableStaticBitmap mSourceCloseableStaticBitmap;
  private CloseableReference<CloseableImage> mSourceCloseableImageRef;
  private Bitmap mDestinationBitmap;
  private CloseableReference<Bitmap> mDestinationCloseableBitmapRef;
  private TestExecutorService mTestExecutorService;
  private PostprocessorProducer mPostprocessorProducer;
  private List<CloseableReference<CloseableImage>> mResults;

  private InOrder mInOrder;

  @Before
  public void setUp() {
    MockitoAnnotations.initMocks(this);
    mTestExecutorService = new TestExecutorService(new FakeClock());
    mPostprocessorProducer =
        new PostprocessorProducer(mInputProducer, mPlatformBitmapFactory, mTestExecutorService);

    when(mImageRequest.getPostprocessor()).thenReturn(mPostprocessor);
    when(mProducerContext.getId()).thenReturn(mRequestId);
    when(mProducerContext.getProducerListener()).thenReturn(mProducerListener);
    when(mProducerContext.getImageRequest()).thenReturn(mImageRequest);

    mResults = new ArrayList<>();
    when(mPostprocessor.getName()).thenReturn(POSTPROCESSOR_NAME);
    when(mProducerListener.requiresExtraMap(eq(mProducerContext), eq(POSTPROCESSOR_NAME)))
=====================================================================
Found a 32 line (215 tokens) duplication in the following files: 
Starting at line 47 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\AshmemMemoryChunkPoolTest.java
Starting at line 46 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\BufferMemoryChunkPoolTest.java

    AshmemMemoryChunk b = mPool.alloc(1);
    Assert.assertFalse(b.isClosed());
    mPool.free(b);
    Assert.assertTrue(b.isClosed());
    mPool.free(b);
    Assert.assertTrue(b.isClosed());
  }

  @Test
  public void testGetBucketedSize() {
    Assert.assertEquals(32, mPool.getBucketedSize(1));
    Assert.assertEquals(32, mPool.getBucketedSize(32));
    Assert.assertEquals(64, mPool.getBucketedSize(33));
    Assert.assertEquals(64, mPool.getBucketedSize(63));
    Assert.assertEquals(64, mPool.getBucketedSize(64));
    Assert.assertEquals(128, mPool.getBucketedSize(69));

    Assert.assertEquals(164, mPool.getBucketedSize(164));
    int[] invalidSizes = new int[] {-1, -2, 0};
    for (int size : invalidSizes) {
      try {
        mPool.getBucketedSize(size);
        Assert.fail();
      } catch (BasePool.InvalidSizeException e) {
        // all good
      }
    }
  }

  @Test
  public void testGetBucketedSizeForValue() {
    Assert.assertEquals(32, mPool.getBucketedSizeForValue(new FakeAshmemMemoryChunk(32)));
=====================================================================
Found a 23 line (207 tokens) duplication in the following files: 
Starting at line 245 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 271 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

    when(mImageRequest.getSourceUri()).thenReturn(Uri.parse("file:///local/file"));
    DataSource<CloseableReference<PooledByteBuffer>> dataSource =
        mImagePipeline.fetchEncodedImage(mImageRequest, mCallerContext);
    assertFalse(dataSource.isFinished());
    ArgumentCaptor<ImageRequest> argumentCaptor = ArgumentCaptor.forClass(ImageRequest.class);
    verify(mRequestListener1)
        .onRequestStart(argumentCaptor.capture(), eq(mCallerContext), eq("0"), eq(false));
    ImageRequest capturedImageRequest = argumentCaptor.getValue();
    assertSame(mImageRequest.getSourceUri(), capturedImageRequest.getSourceUri());
    verify(mRequestListener2)
        .onRequestStart(argumentCaptor.capture(), eq(mCallerContext), eq("0"), eq(false));
    capturedImageRequest = argumentCaptor.getValue();
    assertSame(mImageRequest.getSourceUri(), capturedImageRequest.getSourceUri());
    ArgumentCaptor<ProducerContext> producerContextArgumentCaptor =
        ArgumentCaptor.forClass(ProducerContext.class);
    verify(encodedSequence)
        .produceResults(any(Consumer.class), producerContextArgumentCaptor.capture());
    assertTrue(producerContextArgumentCaptor.getValue().isIntermediateResultExpected());
    assertEquals(producerContextArgumentCaptor.getValue().getPriority(), Priority.HIGH);
  }

  @Test
  public void testFetchNetworkEncodedImage() {
=====================================================================
Found a 21 line (195 tokens) duplication in the following files: 
Starting at line 101 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 210 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 247 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

  public void testLifecycle_I1_F1_I2_F2_F3_C() {
    DataSource<Object> dataSource = getAndSubscribe();
    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribe(mDataSourceSupplier1, mSrc1);

    Object val1 = mock(Object.class);
    setState(mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
    verifySubscriber(dataSource, mSrc1, ON_NEW_RESULT);
    verifyState(dataSource, mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1, NOT_FAILED, null);

    setState(mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val1, FAILED, mock(Throwable.class));
    subscriber1.onFailure(mSrc1);
    DataSubscriber<Object> subscriber2 = verifyGetAndSubscribe(mDataSourceSupplier2, mSrc2);
    verifyState(dataSource, mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1, NOT_FAILED, null);

    // I2 gets ignored because we already have I1
    Object val2 = mock(Object.class);
    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
    verifySubscriber(dataSource, mSrc2, NO_INTERACTIONS);
    verifyState(dataSource, mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1, NOT_FAILED, null);
=====================================================================
Found a 23 line (194 tokens) duplication in the following files: 
Starting at line 518 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 595 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_STARTING, fadeDrawable.getTransitionState());
    assertEquals(250, fadeDrawable.getTransitionDuration());

    // initial state -> temporary image (non-immediate) -> final image (non-immediate)
    // reset hierarchy to initial state, show progress bar
    dh.reset();
    assertEquals(false, fadeDrawable.isLayerOn(progressBarImageIndex));
    dh.setProgress(0f, true);
    assertEquals(ColorDrawable.class, finalImageSettableDrawable.getCurrent().getClass());
    assertEquals(true, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set temporary image (non-immediate)
    dh.setImage(mActualImage1, 0.5f, false);
=====================================================================
Found a 40 line (194 tokens) duplication in the following files: 
Starting at line 235 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 454 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x34,
        (byte) 0x35,
        (byte) 0x36,
        (byte) 0x37,
        (byte) 0x38,
        (byte) 0x39,
        (byte) 0x3a,
        (byte) 0x43,
        (byte) 0x44,
        (byte) 0x45,
        (byte) 0x46,
        (byte) 0x47,
        (byte) 0x48,
        (byte) 0x49,
        (byte) 0x4a,
        (byte) 0x53,
        (byte) 0x54,
        (byte) 0x55,
        (byte) 0x56,
        (byte) 0x57,
        (byte) 0x58,
        (byte) 0x59,
        (byte) 0x5a,
        (byte) 0x63,
        (byte) 0x64,
        (byte) 0x65,
        (byte) 0x66,
        (byte) 0x67,
        (byte) 0x68,
        (byte) 0x69,
        (byte) 0x6a,
        (byte) 0x73,
        (byte) 0x74,
        (byte) 0x75,
        (byte) 0x76,
        (byte) 0x77,
        (byte) 0x78,
        (byte) 0x79,
        (byte) 0x7a,
        (byte) 0x83,
=====================================================================
Found a 30 line (183 tokens) duplication in the following files: 
Starting at line 1480 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1548 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

            100,
            1,
            2,
            initialLFUCacheFractionPromil);

    // insert item1 to LFU
    CloseableReference<Integer> originalRef1 = newReference(10);
    CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);
    originalRef1.close();
    valueRef1.close();
    assertLFUExclusivelyOwned(KEYS[1], 10);

    // insert item2 to LFU
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
    valueRef2.close();
    assertLFUExclusivelyOwned(KEYS[1], 10);
    assertLFUExclusivelyOwned(KEYS[2], 20);

    // insert item3 to LFU, item1 will be evicted from LFU and inserted to the LFU ghost list
    CloseableReference<Integer> originalRef3 = newReference(30);
    CloseableReference<Integer> valueRef3 = mCache.cache(KEYS[3], originalRef3);
    originalRef3.close();
    valueRef3.close();
    assertLFUExclusivelyOwned(KEYS[2], 20);
    assertLFUExclusivelyOwned(KEYS[3], 30);
    assertNotCached(KEYS[1], 10);
    assertKeyIsInLFUGhostList(KEYS[1], 1);
    assertEquals(mCache.mLFUFractionPromil, initialLFUCacheFractionPromil);
=====================================================================
Found a 36 line (180 tokens) duplication in the following files: 
Starting at line 435 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 275 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java

                consumer.onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
                return null;
              }
            })
        .when(mInputProducer)
        .produceResults(any(Consumer.class), eq(mProducerContext));
  }

  private void setupInputProducerFailure() {
    doAnswer(
            new Answer<Object>() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                Consumer consumer = (Consumer) invocation.getArguments()[0];
                consumer.onFailure(mException);
                return null;
              }
            })
        .when(mInputProducer)
        .produceResults(any(Consumer.class), eq(mProducerContext));
  }

  private void setupInputProducerNotFound() {
    doAnswer(
            new Answer<Object>() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                Consumer consumer = (Consumer) invocation.getArguments()[0];
                consumer.onNewResult(null, Consumer.IS_LAST);
                return null;
              }
            })
        .when(mInputProducer)
        .produceResults(any(Consumer.class), eq(mProducerContext));
  }
}
=====================================================================
Found a 22 line (175 tokens) duplication in the following files: 
Starting at line 236 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 261 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

        .thenReturn(ImmutableQualityInfo.of(INTERMEDIATE_SCAN_2, true, false));
    CloseableReference<CloseableImage> closeableImageRef = CloseableReference.of(closeableImage);
    setupBitmapMemoryCacheGetSuccessOnSecondRead(closeableImageRef);
    mBitmapMemoryCacheProducer.produceResults(mConsumer, mProducerContext);
    verify(mMemoryCache, never()).cache(mBitmapMemoryCacheKey, mIntermediateImageReference);
    verify(mMemoryCache).cache(mBitmapMemoryCacheKey, mFinalImageReference);
    verify(mConsumer).onNewResult(closeableImageRef, Consumer.NO_FLAGS);
    verify(mConsumer).onNewResult(mFinalImageReferenceClone, Consumer.IS_LAST);
    Assert.assertTrue(!mFinalImageReferenceClone.isValid());
    Assert.assertEquals(
        0, closeableImageRef.getUnderlyingReferenceTestOnly().getRefCountTestOnly());
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testDontCacheIntermediateImageAsAlreadyHaveFullQuality() {
=====================================================================
Found a 19 line (168 tokens) duplication in the following files: 
Starting at line 202 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\platform\ArtDecoderTest.java
Starting at line 223 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\platform\ArtDecoderTest.java

  public void testDecodeJpeg_regionDecodingEnabled() {
    Rect region = new Rect(0, 0, 200, 100);
    int size = MockBitmapFactory.bitmapSize(region.width(), region.height(), DEFAULT_BITMAP_CONFIG);

    Bitmap bitmap =
        MockBitmapFactory.create(region.width(), region.height(), DEFAULT_BITMAP_CONFIG);

    when(mBitmapRegionDecoder.decodeRegion(any(Rect.class), any(BitmapFactory.Options.class)))
        .thenReturn(bitmap);

    doReturn(bitmap).when(mBitmapPool).get(size);
    CloseableReference<Bitmap> decodedImage =
        mArtDecoder.decodeFromEncodedImage(mEncodedImage, DEFAULT_BITMAP_CONFIG, region);

    assertTrue(decodedImage.get().getWidth() == region.width());
    assertTrue(decodedImage.get().getHeight() == region.height());
    closeAndVerifyClosed(decodedImage, bitmap);
    verify(mBitmapRegionDecoder).recycle();
  }
=====================================================================
Found a 48 line (168 tokens) duplication in the following files: 
Starting at line 202 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 182 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\pjpeg\ImageFormatProgressiveJpegFragment.java

        ScalingUtils.ScaleType.CENTER);
  }

  private class SimpleUriListAdapter extends BaseAdapter {

    @Override
    public int getCount() {
      return mSpinnerEntries.length;
    }

    @Override
    public Entry getItem(int position) {
      return mSpinnerEntries[position];
    }

    @Override
    public long getItemId(int position) {
      return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
      final LayoutInflater layoutInflater = getLayoutInflater(null);

      final View view =
          convertView != null
              ? convertView
              : layoutInflater.inflate(
                  android.R.layout.simple_spinner_dropdown_item, parent, false);

      final TextView textView = (TextView) view.findViewById(android.R.id.text1);
      textView.setText(mSpinnerEntries[position].descriptionId);

      return view;
    }
  }

  private static class Entry {

    final int descriptionId;
    final Uri uri;

    private Entry(int descriptionId, Uri uri) {
      this.descriptionId = descriptionId;
      this.uri = uri;
    }
  }
}
=====================================================================
Found a 34 line (164 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 72 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 33 line (159 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 73 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 25 line (158 tokens) duplication in the following files: 
Starting at line 629 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 474 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

  }

  private void maybeNotifyExclusiveEntryRemoval(@Nullable ArrayList<Entry<K, V>> entries) {
    if (entries != null) {
      for (Entry<K, V> entry : entries) {
        maybeNotifyExclusiveEntryRemoval(entry);
      }
    }
  }

  private static <K, V> void maybeNotifyExclusiveEntryRemoval(@Nullable Entry<K, V> entry) {
    if (entry != null && entry.observer != null) {
      entry.observer.onExclusivityChanged(entry.key, false);
    }
  }

  private static <K, V> void maybeNotifyExclusiveEntryInsertion(@Nullable Entry<K, V> entry) {
    if (entry != null && entry.observer != null) {
      entry.observer.onExclusivityChanged(entry.key, true);
    }
  }

  /** Marks the given entries as orphans. */
  private synchronized void makeOrphans(
      @Nullable ArrayList<Entry<K, V>> oldEntries1, @Nullable ArrayList<Entry<K, V>> oldEntries2) {
=====================================================================
Found a 31 line (154 tokens) duplication in the following files: 
Starting at line 257 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 258 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

      GifImage mockGifImage, Bitmap mockBitmap1, Bitmap mockBitmap2, PooledByteBuffer byteBuffer)
      throws Exception {
    // For decoding preview frame, expect some calls.
    final AnimatedDrawableBackend mockAnimatedDrawableBackend =
        createAnimatedDrawableBackendMock(2);

    when(mMockAnimatedDrawableBackendProvider.get(
            any(AnimatedImageResult.class), isNull(Rect.class)))
        .thenReturn(mockAnimatedDrawableBackend);

    when(mMockBitmapFactory.createBitmapInternal(50, 50, DEFAULT_BITMAP_CONFIG))
        .thenReturn(CloseableReference.of(mockBitmap1, FAKE_BITMAP_RESOURCE_RELEASER))
        .thenReturn(CloseableReference.of(mockBitmap2, FAKE_BITMAP_RESOURCE_RELEASER));
    AnimatedImageCompositor mockCompositor = mock(AnimatedImageCompositor.class);
    PowerMockito.whenNew(AnimatedImageCompositor.class)
        .withAnyArguments()
        .thenReturn(mockCompositor);

    ImageDecodeOptions imageDecodeOptions =
        ImageDecodeOptions.newBuilder()
            .setDecodePreviewFrame(true)
            .setDecodeAllFrames(true)
            .build();

    EncodedImage encodedImage =
        new EncodedImage(CloseableReference.of(byteBuffer, FAKE_RESOURCE_RELEASER));
    encodedImage.setImageFormat(ImageFormat.UNKNOWN);

    CloseableAnimatedImage closeableImage =
        (CloseableAnimatedImage)
            mAnimatedImageFactory.decodeGif(
=====================================================================
Found a 32 line (154 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 74 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 23 line (153 tokens) duplication in the following files: 
Starting at line 309 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 215 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
    cachedRef.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(1, 100);
    cachedRef = mCache.reuse(KEY);
    assertNotNull(cachedRef);
    verify(mEntryStateObserver).onExclusivityChanged(KEY, false);
    assertTotalSize(0, 0);
    assertExclusivelyOwnedSize(0, 0);
    CloseableReference<Integer> newItem = mCache.cache(KEYS[2], cachedRef);
    cachedRef.close();
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(0, 0);
    newItem.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(1, 100);
  }

  @Test
  public void testInUseCount() {
=====================================================================
Found a 26 line (151 tokens) duplication in the following files: 
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedSingleUsePostprocessorProducerTest.java
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

    when(mProducerListener.requiresExtraMap(eq(mProducerContext), eq(POSTPROCESSOR_NAME)))
        .thenReturn(true);
    doAnswer(
            new Answer<Object>() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                mResults.add(
                    ((CloseableReference<CloseableImage>) invocation.getArguments()[0]).clone());
                return null;
              }
            })
        .when(mConsumer)
        .onNewResult(any(CloseableReference.class), anyInt());
    mInOrder = inOrder(mPostprocessor, mProducerListener, mConsumer);

    mSourceBitmap = mock(Bitmap.class);
    mSourceCloseableStaticBitmap = mock(CloseableStaticBitmap.class);
    when(mSourceCloseableStaticBitmap.getUnderlyingBitmap()).thenReturn(mSourceBitmap);
    mSourceCloseableImageRef = CloseableReference.<CloseableImage>of(mSourceCloseableStaticBitmap);
    mDestinationBitmap = mock(Bitmap.class);
    mDestinationCloseableBitmapRef =
        CloseableReference.of(mDestinationBitmap, mBitmapResourceReleaser);
  }

  @Test
  public void testNonStaticBitmapIsPassedOn() {
=====================================================================
Found a 65 line (151 tokens) duplication in the following files: 
Starting at line 11 of C:\Users\anaca\Documents\Projetos\fresco\samples\comparison\src\main\java\com\facebook\samples\comparison\instrumentation\PerfListener.java
Starting at line 14 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\main\java\com\facebook\samples\scrollperf\instrumentation\PerfListener.java

public class PerfListener {
  private long mSumOfWaitTime;
  private long mStartedRequests;
  private long mSuccessfulRequests;
  private long mCancelledRequests;
  private long mFailedRequests;

  public PerfListener() {
    mSumOfWaitTime = 0;
    mStartedRequests = 0;
    mSuccessfulRequests = 0;
    mCancelledRequests = 0;
    mFailedRequests = 0;
  }

  /** Called whenever image request finishes successfully, that is whenever final image is set. */
  public void reportSuccess(long waitTime) {
    mSumOfWaitTime += waitTime;
    mSuccessfulRequests++;
  }

  /** Called whenever image request fails, that is whenever failure drawable is set. */
  public void reportFailure(long waitTime) {
    mSumOfWaitTime += waitTime;
    mFailedRequests++;
  }

  /**
   * Called whenever image request is cancelled, that is whenever image view is reused without
   * setting final image first
   */
  public void reportCancellation(long waitTime) {
    mSumOfWaitTime += waitTime;
    mCancelledRequests++;
  }

  /** Called whenver new request is started. */
  public void reportStart() {
    mStartedRequests++;
  }

  /**
   * @return average wait time, that is sum of reported wait times divided by number of completed
   *     requests
   */
  public long getAverageWaitTime() {
    final long completedRequests = getCompletedRequests();
    return completedRequests > 0 ? mSumOfWaitTime / completedRequests : 0;
  }

  /** @return difference between number of started requests and number of completed requests */
  public long getOutstandingRequests() {
    return mStartedRequests - getCompletedRequests();
  }

  /** @return number of cancelled requests */
  public long getCancelledRequests() {
    return mCancelledRequests;
  }

  /** @return number of completed requests, either by seting final image, failure or cancellation */
  public long getCompletedRequests() {
    return mSuccessfulRequests + mCancelledRequests + mFailedRequests;
  }
}
=====================================================================
Found a 23 line (150 tokens) duplication in the following files: 
Starting at line 277 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 192 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
    cachedRef.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(1, 100);
    cachedRef = mCache.reuse(KEY);
    assertNotNull(cachedRef);
    verify(mEntryStateObserver).onExclusivityChanged(KEY, false);
    assertTotalSize(0, 0);
    assertExclusivelyOwnedSize(0, 0);
    CloseableReference<Integer> newItem = mCache.cache(KEY, cachedRef);
    cachedRef.close();
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(0, 0);
    newItem.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(1, 100);
  }

  @Test
  public void testReuseExclusive_CacheSameItemWithDifferentKey() {
=====================================================================
Found a 16 line (149 tokens) duplication in the following files: 
Starting at line 318 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 351 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

  public void testLifecycle_I2_C() {
    DataSource<Object> dataSource = getAndSubscribe();
    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribeM(mDataSourceSupplier1, mSrc1);
    DataSubscriber<Object> subscriber2 = verifyGetAndSubscribeM(mDataSourceSupplier2, mSrc2);
    DataSubscriber<Object> subscriber3 = verifyGetAndSubscribe(mDataSourceSupplier3, mSrc3);

    Object val2a = mock(Object.class);
    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2a, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
    mInOrder.verify(mSrc3).close();
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2a, NOT_FAILED, null);

    testClose(dataSource, mSrc1, mSrc2);
    verifySubscriber(dataSource, null, ON_CANCELLATION);
    verifyState(dataSource, null, CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
=====================================================================
Found a 31 line (149 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 37 line (146 tokens) duplication in the following files: 
Starting at line 205 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\CloseableProducerToDataSourceAdapterTest.java
Starting at line 173 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

    verifyFailed(resultRef, mException);
  }

  private void testClose(Throwable throwable) {
    mDataSource.close();
    verifyClosed(FINISHED, throwable);
  }

  private void testClose(boolean isFinished, int numSubscribers) {
    mDataSource.close();
    if (!isFinished) {
      verify(mRequestListener).onRequestCancellation(mSettableProducerContext);
      if (numSubscribers >= 1) {
        verify(mDataSubscriber1).onCancellation(mDataSource);
      }
      if (numSubscribers >= 2) {
        verify(mDataSubscriber2).onCancellation(mDataSource);
      }
    }
    verifyClosed(isFinished, null);
  }

  @Test
  public void testInitialState() {
    verifyInitial();
  }

  @Test
  public void test_C_a() {
    testClose(NOT_FINISHED, 1);
    testSubscribe(NO_INTERACTIONS);
  }

  @Test
  public void test_C_I_a() {
    testClose(NOT_FINISHED, 1);
    mInternalConsumer.onNewResult(mResultRef2, Consumer.NO_FLAGS);
=====================================================================
Found a 32 line (146 tokens) duplication in the following files: 
Starting at line 1074 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  public void testFrequentlyUsedEvictionWhithoutChangingLFU() {
    // Cache has 4 entries; 2 for LFU and 2 for MFU
    // key is considered as MFU, if its accessCount > 1
    mCache =
        createDummyAdaptiveCountingMemoryCache(
            mParamsSupplier,
            mCacheTrimStrategy,
            mValueDescriptor,
            100,
            1,
            2,
            initialLFUCacheFractionPromil);

    // insert item1 to MFU
    CloseableReference<Integer> originalRef1 = newReference(10);
    CloseableReference<Integer> valueRef1a = mCache.cache(KEYS[1], originalRef1);
    CloseableReference<Integer> valueRef1b = mCache.get(KEYS[1]);
    originalRef1.close();
    valueRef1a.close();
    valueRef1b.close();
    assertMFUExclusivelyOwned(KEYS[1], 10);

    // insert item2 to LFU
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
    valueRef2.close();
    assertMFUExclusivelyOwned(KEYS[1], 10);
    assertLFUExclusivelyOwned(KEYS[2], 20);

    // insert item3 to MFU
    CloseableReference<Integer> originalRef3 = newReference(30);
=====================================================================
Found a 13 line (144 tokens) duplication in the following files: 
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java
Starting at line 170 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java

    assertEquals(3, mMultiHolder.mHolders.size());
    assertEquals(mHolder1, mMultiHolder.mHolders.get(0));
    assertEquals(mHolder2, mMultiHolder.mHolders.get(1));
    assertEquals(mHolder3, mMultiHolder.mHolders.get(2));
    mMultiHolder.remove(1);
    assertEquals(2, mMultiHolder.mHolders.size());
    assertEquals(mHolder1, mMultiHolder.mHolders.get(0));
    assertEquals(mHolder3, mMultiHolder.mHolders.get(1));
    mMultiHolder.remove(1);
    assertEquals(1, mMultiHolder.mHolders.size());
    assertEquals(mHolder1, mMultiHolder.mHolders.get(0));
    mMultiHolder.remove(0);
    assertEquals(0, mMultiHolder.mHolders.size());
=====================================================================
Found a 30 line (144 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 29 line (139 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 16 line (138 tokens) duplication in the following files: 
Starting at line 159 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 177 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

    setupDiskCacheGetSuccess(mDefaultBufferedDiskCache);
    mDiskCacheReadProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    ArgumentCaptor<HashMap> captor = ArgumentCaptor.forClass(HashMap.class);
    verify(mProducerListener)
        .onProducerFinishWithSuccess(eq(mProducerContext), eq(PRODUCER_NAME), captor.capture());
    Map<String, String> resultMap = captor.getValue();
    assertEquals("true", resultMap.get(DiskCacheReadProducer.EXTRA_CACHED_VALUE_FOUND));
    assertEquals("0", resultMap.get(DiskCacheReadProducer.ENCODED_IMAGE_SIZE));
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, true);
    Assert.assertFalse(EncodedImage.isValid(mFinalEncodedImage));
  }

  @Test
  public void testSmallImageDiskCacheGetSuccessful() {
=====================================================================
Found a 22 line (137 tokens) duplication in the following files: 
Starting at line 217 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 217 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

      GifImage mockGifImage, Bitmap mockBitmap, PooledByteBuffer byteBuffer) throws Exception {
    // For decoding preview frame, expect some calls.
    final AnimatedDrawableBackend mockAnimatedDrawableBackend =
        createAnimatedDrawableBackendMock(1);
    when(mMockAnimatedDrawableBackendProvider.get(
            any(AnimatedImageResult.class), isNull(Rect.class)))
        .thenReturn(mockAnimatedDrawableBackend);
    when(mMockBitmapFactory.createBitmapInternal(50, 50, DEFAULT_BITMAP_CONFIG))
        .thenReturn(CloseableReference.of(mockBitmap, FAKE_BITMAP_RESOURCE_RELEASER));
    AnimatedImageCompositor mockCompositor = mock(AnimatedImageCompositor.class);
    PowerMockito.whenNew(AnimatedImageCompositor.class)
        .withAnyArguments()
        .thenReturn(mockCompositor);

    ImageDecodeOptions imageDecodeOptions =
        ImageDecodeOptions.newBuilder().setDecodePreviewFrame(true).build();
    EncodedImage encodedImage =
        new EncodedImage(CloseableReference.of(byteBuffer, FAKE_RESOURCE_RELEASER));
    encodedImage.setImageFormat(ImageFormat.UNKNOWN);
    CloseableAnimatedImage closeableImage =
        (CloseableAnimatedImage)
            mAnimatedImageFactory.decodeGif(
=====================================================================
Found a 16 line (137 tokens) duplication in the following files: 
Starting at line 164 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java

        .thenAnswer((Answer<Integer>) i -> orientation);
    when(BitmapUtil.decodeDimensionsAndColorSpace(any(InputStream.class)))
        .thenReturn(new ImageMetaData(width, height, null));
    mAddMetaDataConsumer.onNewResult(mFinalResult, Consumer.IS_LAST);
    ArgumentCaptor<EncodedImage> argumentCaptor = ArgumentCaptor.forClass(EncodedImage.class);
    verify(mConsumer).onNewResult(argumentCaptor.capture(), eq(Consumer.IS_LAST));
    EncodedImage encodedImage = argumentCaptor.getValue();
    assertTrue(EncodedImage.isValid(encodedImage));
    assertEquals(DefaultImageFormats.JPEG, encodedImage.getImageFormat());
    assertEquals(rotationAngle, encodedImage.getRotationAngle());
    assertEquals(width, encodedImage.getWidth());
    assertEquals(height, encodedImage.getHeight());
  }

  @Test
  public void testOnNewResultLastAndJpeg() {
=====================================================================
Found a 51 line (137 tokens) duplication in the following files: 
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\color\ColorImageExample.java
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\svg\SvgDecoderExample.java

    }

    @Override
    public int getSizeInBytes() {
      return 0;
    }

    @Override
    public void close() {
      mClosed = true;
    }

    @Override
    public boolean isClosed() {
      return mClosed;
    }

    @Override
    public void setImageExtras(@Nullable Map<String, Object> extras) {}

    @Override
    public void setImageExtra(String extra, Object value) {}

    @Override
    public boolean isStateful() {
      return false;
    }

    @Override
    public int getWidth() {
      return 0;
    }

    @Override
    public int getHeight() {
      return 0;
    }

    @Override
    public QualityInfo getQualityInfo() {
      return ImmutableQualityInfo.FULL_QUALITY;
    }

    @Override
    public Map<String, Object> getExtras() {
      return Collections.emptyMap();
    }
  }

  /** Decodes a color XML tag: <color>#rrggbb</color> */
  public static class ColorDecoder implements ImageDecoder {
=====================================================================
Found a 18 line (136 tokens) duplication in the following files: 
Starting at line 48 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java
Starting at line 95 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java

    MotionEvent event4 = obtainMotionEvent(1000, 1030, MotionEvent.ACTION_UP, 0, 200f, 400f);

    InOrder inOrder = inOrder(mListener);

    mGestureDetector.onTouchEvent(event1);
    mGestureDetector.onTouchEvent(event2);
    assertTrue(mGestureDetector.isGestureInProgress());
    assertEquals(1, mGestureDetector.getPointerCount());
    assertEquals(100f, mGestureDetector.getStartX()[0], 0);
    assertEquals(300f, mGestureDetector.getStartY()[0], 0);
    assertEquals(150f, mGestureDetector.getCurrentX()[0], 0);
    assertEquals(350f, mGestureDetector.getCurrentY()[0], 0);
    inOrder.verify(mListener).onGestureBegin(mGestureDetector);
    inOrder.verify(mListener).onGestureUpdate(mGestureDetector);

    mGestureDetector.onTouchEvent(event3);
    assertTrue(mGestureDetector.isGestureInProgress());
    assertEquals(1, mGestureDetector.getPointerCount());
=====================================================================
Found a 28 line (134 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 24 line (134 tokens) duplication in the following files: 
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\GenericByteArrayPoolTest.java
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\NativeMemoryChunkPoolTest.java

  public void testGetBucketedSize() throws Exception {
    Assert.assertEquals(32, mPool.getBucketedSize(1));
    Assert.assertEquals(32, mPool.getBucketedSize(32));
    Assert.assertEquals(64, mPool.getBucketedSize(33));
    Assert.assertEquals(64, mPool.getBucketedSize(64));
    Assert.assertEquals(128, mPool.getBucketedSize(69));

    // value larger than max bucket
    Assert.assertEquals(129, mPool.getBucketedSize(129));

    int[] invalidSizes = new int[] {-1, 0};
    for (int size : invalidSizes) {
      try {
        mPool.getBucketedSize(size);
        Assert.fail();
      } catch (BasePool.InvalidSizeException e) {
        // do nothing
      }
    }
  }

  // tests out the getBucketedSizeForValue method
  @Test
  public void testGetBucketedSizeForValue() throws Exception {
=====================================================================
Found a 25 line (134 tokens) duplication in the following files: 
Starting at line 42 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRecyclerViewFragment.java
Starting at line 42 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\VitoViewRecyclerFragment.java

  @Nullable
  @Override
  public View onCreateView(
      LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
    return inflater.inflate(R.layout.fragment_drawee_recycler, container, false);
  }

  @Override
  public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
    final RecyclerView recyclerView = view.findViewById(R.id.recycler_view);
    recyclerView.addOnLayoutChangeListener(
        new View.OnLayoutChangeListener() {
          @Override
          public void onLayoutChange(
              View view,
              int left,
              int top,
              int right,
              int bottom,
              int oldLeft,
              int oldTop,
              int oldRight,
              int oldBottom) {
            final int imageSize = (right - left) / SPAN_COUNT;
            mResizeOptions = new ResizeOptions(imageSize, imageSize);
=====================================================================
Found a 18 line (133 tokens) duplication in the following files: 
Starting at line 458 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 485 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 523 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 562 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 600 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());

    // initial state -> final image (non-immediate)
    // reset hierarchy to initial state, show progress bar
    dh.reset();
    assertEquals(false, fadeDrawable.isLayerOn(progressBarImageIndex));
    dh.setProgress(0f, true);
    assertEquals(ColorDrawable.class, finalImageSettableDrawable.getCurrent().getClass());
    assertEquals(true, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set final image (non-immediate)
    dh.setImage(mActualImage2, 1f, false);
=====================================================================
Found a 22 line (132 tokens) duplication in the following files: 
Starting at line 765 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 564 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    AbstractAdaptiveCountingMemoryCache.Entry<String, Integer> entry1 =
        mCache.mCachedEntries.get(KEYS[1]);
    CloseableReference<Integer> originalRef2 = newReference(120);
    CloseableReference<Integer> cachedRef2 = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
    cachedRef2.close();

    mCache.clear();
    assertTotalSize(0, 0);
    assertExclusivelyOwnedSize(0, 0);
    assertOrphanWithCount(entry1, 1);
    assertNotCached(KEYS[2], 120);
    verify(mReleaser).release(120);

    cachedRef1.close();
    verify(mReleaser).release(110);
  }

  @Test
  public void testTrimming() {
    MemoryTrimType memoryTrimType = MemoryTrimType.OnCloseToDalvikHeapLimit;
    mParams = new MemoryCacheParams(2200, 16, 2200, 16, 110, PARAMS_CHECK_INTERVAL_MS);
=====================================================================
Found a 17 line (130 tokens) duplication in the following files: 
Starting at line 433 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 462 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

        (ForwardingDrawable) fadeDrawable.getDrawable(actualImageIndex);

    // initial state -> final image (immediate)
    // initial state, show progress bar
    assertEquals(false, fadeDrawable.isLayerOn(progressBarImageIndex));
    dh.setProgress(0f, true);
    assertEquals(ColorDrawable.class, finalImageSettableDrawable.getCurrent().getClass());
    assertEquals(true, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set final image (immediate)
    dh.setImage(mActualImage2, 1f, true);
=====================================================================
Found a 27 line (129 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 79 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 18 line (128 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java

            mFile.getPath(), MediaStore.Images.Thumbnails.MINI_KIND))
        .thenReturn(mBitmap);
    doAnswer(
            new Answer() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                mCloseableReference = ((CloseableReference) invocation.getArguments()[0]).clone();
                return null;
              }
            })
        .when(mConsumer)
        .onNewResult(any(CloseableReference.class), eq(Consumer.IS_LAST));
    mLocalVideoThumbnailProducer.produceResults(mConsumer, mProducerContext);
    mExecutor.runUntilIdle();
    assertEquals(1, mCloseableReference.getUnderlyingReferenceTestOnly().getRefCountTestOnly());
    assertEquals(
        mBitmap, mCloseableReference.getUnderlyingReferenceTestOnly().get().getUnderlyingBitmap());
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
=====================================================================
Found a 29 line (127 tokens) duplication in the following files: 
Starting at line 144 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\DiskCacheReadProducer.java
Starting at line 205 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PartialDiskCacheProducer.java

  static @Nullable Map<String, String> getExtraMap(
      final ProducerListener2 listener,
      final ProducerContext producerContext,
      final boolean valueFound,
      final int sizeInBytes) {
    if (!listener.requiresExtraMap(producerContext, PRODUCER_NAME)) {
      return null;
    }
    if (valueFound) {
      return ImmutableMap.of(
          EXTRA_CACHED_VALUE_FOUND,
          String.valueOf(valueFound),
          ENCODED_IMAGE_SIZE,
          String.valueOf(sizeInBytes));
    } else {
      return ImmutableMap.of(EXTRA_CACHED_VALUE_FOUND, String.valueOf(valueFound));
    }
  }

  private void subscribeTaskForRequestCancellation(
      final AtomicBoolean isCancelled, ProducerContext producerContext) {
    producerContext.addCallbacks(
        new BaseProducerContextCallbacks() {
          @Override
          public void onCancellationRequested() {
            isCancelled.set(true);
          }
        });
  }
=====================================================================
Found a 33 line (127 tokens) duplication in the following files: 
Starting at line 685 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 516 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

    entry.accessCount++;
  }

  /** Decreases the entry's client count. */
  private synchronized void decreaseClientCount(Entry<K, V> entry) {
    Preconditions.checkNotNull(entry);
    Preconditions.checkState(entry.clientCount > 0);
    entry.clientCount--;
  }

  /** Returns the value reference of the entry if it should be closed, null otherwise. */
  @Nullable
  private synchronized CloseableReference<V> referenceToClose(Entry<K, V> entry) {
    Preconditions.checkNotNull(entry);
    return (entry.isOrphan && entry.clientCount == 0) ? entry.valueRef : null;
  }

  /** Gets the total number of all currently cached items. */
  @Override
  public synchronized int getCount() {
    return mCachedEntries.getCount();
  }

  /** Gets the total size in bytes of all currently cached items. */
  @Override
  public synchronized int getSizeInBytes() {
    return mCachedEntries.getSizeInBytes();
  }

  /** Gets the number of the cached items that are used by at least one client. */
  public synchronized int getInUseCount() {
    return mCachedEntries.getCount()
        - mLeastFrequentlyUsedExclusiveEntries.getCount()
=====================================================================
Found a 17 line (126 tokens) duplication in the following files: 
Starting at line 433 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 489 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 527 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 566 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 604 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

        (ForwardingDrawable) fadeDrawable.getDrawable(actualImageIndex);

    // initial state -> final image (immediate)
    // initial state, show progress bar
    assertEquals(false, fadeDrawable.isLayerOn(progressBarImageIndex));
    dh.setProgress(0f, true);
    assertEquals(ColorDrawable.class, finalImageSettableDrawable.getCurrent().getClass());
    assertEquals(true, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set final image (immediate)
    dh.setImage(mActualImage2, 1f, true);
=====================================================================
Found a 20 line (126 tokens) duplication in the following files: 
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\AshmemMemoryChunkPoolTest.java
Starting at line 84 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\BufferMemoryChunkPoolTest.java

    Assert.assertEquals(164, mPool.getBucketedSizeForValue(new FakeAshmemMemoryChunk(164)));
  }

  @Test
  public void testGetSizeInBytes() {
    Assert.assertEquals(1, mPool.getSizeInBytes(1));
    Assert.assertEquals(31, mPool.getSizeInBytes(31));
    Assert.assertEquals(32, mPool.getSizeInBytes(32));
    Assert.assertEquals(64, mPool.getSizeInBytes(64));
    Assert.assertEquals(120, mPool.getSizeInBytes(120));
  }

  @Test
  public void testisReusable() {
    MemoryChunk chunk = mPool.get(1);
    Assert.assertTrue(mPool.isReusable(chunk));
    chunk.close();
    Assert.assertFalse(mPool.isReusable(chunk));
  }
}
=====================================================================
Found a 31 line (126 tokens) duplication in the following files: 
Starting at line 368 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\main\java\com\facebook\samples\scrollperf\fragments\SettingsFragment.java
Starting at line 65 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\svg\ImageFormatSvgFragment.java

        R.string.unchecked_draw_border_summary);
  }

  private ShowRestartMessageDialog getShowRestartMessageDialog() {
    if (mShowRestartMessageDialog == null) {
      mShowRestartMessageDialog = new ShowRestartMessageDialog();
    }
    return mShowRestartMessageDialog;
  }

  public static class ShowRestartMessageDialog extends DialogFragment {

    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
      // Use the Builder class for convenient dialog construction
      AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
      builder
          .setMessage(R.string.message_application_needs_restart)
          .setPositiveButton(android.R.string.ok, null)
          .setNeutralButton(
              R.string.message_restart_now,
              new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                  System.exit(0);
                }
              });
      return builder.create();
    }
  }
}
=====================================================================
Found a 45 line (125 tokens) duplication in the following files: 
Starting at line 32 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\main\java\com\facebook\animated\gif\GifFrame.java
Starting at line 32 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\main\java\com\facebook\animated\webp\WebPFrame.java

  GifFrame(long nativeContext) {
    mNativeContext = nativeContext;
  }

  @Override
  protected void finalize() {
    nativeFinalize();
  }

  @Override
  public void dispose() {
    nativeDispose();
  }

  @Override
  public void renderFrame(int width, int height, Bitmap bitmap) {
    nativeRenderFrame(width, height, bitmap);
  }

  @Override
  public int getDurationMs() {
    return nativeGetDurationMs();
  }

  @Override
  public int getWidth() {
    return nativeGetWidth();
  }

  @Override
  public int getHeight() {
    return nativeGetHeight();
  }

  @Override
  public int getXOffset() {
    return nativeGetXOffset();
  }

  @Override
  public int getYOffset() {
    return nativeGetYOffset();
  }

  public boolean hasTransparency() {
=====================================================================
Found a 27 line (125 tokens) duplication in the following files: 
Starting at line 66 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRecyclerViewFragment.java
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\VitoViewRecyclerFragment.java

            mResizeOptions = new ResizeOptions(imageSize, imageSize);
          }
        });

    GridLayoutManager layoutManager = new GridLayoutManager(getContext(), SPAN_COUNT);
    recyclerView.setLayoutManager(layoutManager);
    recyclerView.setHasFixedSize(true);

    final SimpleAdapter adapter = new SimpleAdapter(new ArrayList<Uri>());
    recyclerView.setAdapter(adapter);

    final Spinner imageSource = view.findViewById(R.id.spinner_image_source);
    ImageSourceSpinner.INSTANCE.setup(
        imageSource,
        sampleUris(),
        new Function1<List<Uri>, Unit>() {
          @Override
          public Unit invoke(List<Uri> uris) {
            adapter.setData(uris);
            return null;
          }
        });
  }

  public class SimpleAdapter extends RecyclerView.Adapter<SimpleViewHolder> {

    private List<Uri> mUris;
=====================================================================
Found a 13 line (124 tokens) duplication in the following files: 
Starting at line 278 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 267 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

      Assert.assertEquals(255 - 51 * i, mFadeDrawable.mAlphas[2]);
      Assert.assertEquals(FadeDrawable.TRANSITION_RUNNING, mFadeDrawable.mTransitionState);
      if (fadeUpToLayer) {
        verify(mLayers[0]).mutate();
        verify(mLayers[0]).setAlpha(255);
        verify(mLayers[0]).draw(mCanvas);
      } else {
        verify(mLayers[0]).mutate();
        verify(mLayers[0]).setAlpha(255 - 51 * i);
        verify(mLayers[0]).draw(mCanvas);
      }
      verify(mLayers[1]).mutate();
      verify(mLayers[1]).setAlpha(255);
=====================================================================
Found a 26 line (124 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 80 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 16 line (120 tokens) duplication in the following files: 
Starting at line 337 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 358 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

    mImagePipeline.fetchImageFromBitmapCache(mImageRequest, mCallerContext);
    verify(mRequestListener1).onRequestStart(mImageRequest, mCallerContext, "0", false);
    verify(mRequestListener2).onRequestStart(mImageRequest, mCallerContext, "0", false);
    ArgumentCaptor<ProducerContext> producerContextArgumentCaptor =
        ArgumentCaptor.forClass(ProducerContext.class);
    verify(bitmapCacheSequence)
        .produceResults(any(Consumer.class), producerContextArgumentCaptor.capture());
    assertTrue(producerContextArgumentCaptor.getValue().isIntermediateResultExpected());
    assertEquals(producerContextArgumentCaptor.getValue().getPriority(), Priority.HIGH);
    assertEquals(
        producerContextArgumentCaptor.getValue().getLowestPermittedRequestLevel(),
        ImageRequest.RequestLevel.BITMAP_MEMORY_CACHE);
  }

  @Test
  public void testFetchFromBitmapCacheDueToImageRequest() {
=====================================================================
Found a 22 line (119 tokens) duplication in the following files: 
Starting at line 345 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 333 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    inOrder.verify(mLayers[0]).draw(mCanvas);
    inOrder.verify(mLayers[1]).draw(mCanvas);
    inOrder.verify(mCallback, atLeastOnce()).invalidateDrawable(mFadeDrawable);
    inOrder.verifyNoMoreInteractions();

    // make sure the fade has finished, and verify that after that we don't invalidate
    mFadeDrawable.incrementCurrentTimeMs(1000);
    mFadeDrawable.draw(mCanvas);
    inOrder.verify(mCallback, never()).invalidateDrawable(mFadeDrawable);
  }

  @Test
  public void testReset() {
    // go to some non-initial state
    mFadeDrawable.fadeToLayer(2);
    mFadeDrawable.finishTransitionImmediately();
    resetInteractions();

    mFadeDrawable.reset();
    Assert.assertEquals(FadeDrawable.TRANSITION_NONE, mFadeDrawable.mTransitionState);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
=====================================================================
Found a 25 line (119 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 16 line (119 tokens) duplication in the following files: 
Starting at line 91 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

    when(mImageRequest.getPostprocessor()).thenReturn(mPostprocessor);
    mResults = new ArrayList<>();
    when(mPostprocessor.getName()).thenReturn(POSTPROCESSOR_NAME);
    when(mProducerListener.requiresExtraMap(mProducerContext, PRODUCER_NAME)).thenReturn(true);
    doAnswer(
            new Answer<Object>() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                mResults.add(
                    ((CloseableReference<CloseableImage>) invocation.getArguments()[0]).clone());
                return null;
              }
            })
        .when(mConsumer)
        .onNewResult(any(CloseableReference.class), anyInt());
    mInOrder = inOrder(mPostprocessor, mProducerListener, mConsumer);
=====================================================================
Found a 22 line (119 tokens) duplication in the following files: 
Starting at line 406 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 293 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    AbstractAdaptiveCountingMemoryCache.Entry<String, Integer> entry2 =
        mCache.mCachedEntries.get(KEY);
    assertNotSame(entry1, entry2);
    assertOrphanWithCount(entry1, 3);
    assertSharedWithCount(KEY, 120, 1);

    // release the orphaned reference only when all clients are gone
    originalRef1.close();
    cachedRef2b.close();
    assertOrphanWithCount(entry1, 3);
    cachedRef2a.close();
    assertOrphanWithCount(entry1, 2);
    cachedRef1.close();
    assertOrphanWithCount(entry1, 1);
    verify(mReleaser, never()).release(anyInt());
    cachedRef3.close();
    assertOrphanWithCount(entry1, 0);
    verify(mReleaser).release(110);
  }

  @Test
  public void testDoesNotCacheBigValues() {
=====================================================================
Found a 13 line (117 tokens) duplication in the following files: 
Starting at line 79 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityStarvingThrottlingProducerTest.java
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityStarvingThrottlingProducerTest.java
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ThrottlingProducerTest.java
Starting at line 139 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ThrottlingProducerTest.java

  public void testThrottling() {
    // First two requests are passed on immediately
    mThrottlingProducer.produceResults(mConsumers[0], mProducerContexts[0]);
    assertNotNull(mThrottlerConsumers[0]);
    verify(mProducerListeners[0]).onProducerStart(mProducerContexts[0], PRODUCER_NAME);
    verify(mProducerListeners[0])
        .onProducerFinishWithSuccess(mProducerContexts[0], PRODUCER_NAME, null);

    mThrottlingProducer.produceResults(mConsumers[1], mProducerContexts[1]);
    assertNotNull(mThrottlerConsumers[1]);
    verify(mProducerListeners[1]).onProducerStart(mProducerContexts[1], PRODUCER_NAME);
    verify(mProducerListeners[1])
        .onProducerFinishWithSuccess(mProducerContexts[1], PRODUCER_NAME, null);
=====================================================================
Found a 17 line (116 tokens) duplication in the following files: 
Starting at line 80 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 73 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[2]);
  }

  @Test
  public void testFadeToLayer() {
    // start fade
    mFadeDrawable.setTransitionDuration(100);
    mFadeDrawable.fadeToLayer(1);
    Assert.assertEquals(100, mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING, mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
=====================================================================
Found a 17 line (116 tokens) duplication in the following files: 
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(255, mFadeDrawable.mAlphas[2]);
  }

  @Test
  public void testFadeUpToLayer() {
    // start fade
    mFadeDrawable.setTransitionDuration(100);
    mFadeDrawable.fadeUpToLayer(1);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100, mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING, mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
=====================================================================
Found a 19 line (116 tokens) duplication in the following files: 
Starting at line 374 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 410 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

        newFetcher(delegate, false, 2, 1, false, 0, false, false);

    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, false);
    PriorityFetchState<FetchState> two = fetch(fetcher, "2", callback, false);

    // 'one' was requested from the delegate, 'two' is waiting for a free slot.
    assertThat(fetcher.getCurrentlyFetching()).containsExactly(one);
    assertThat(fetcher.getLowPriQueue()).contains(two);

    // Cancel 'one' - nothing happens, because it's already in-flight.
    cancel(one);
    assertThat(fetcher.getLowPriQueue()).contains(two);
    assertThat(fetcher.getCurrentlyFetching()).containsExactly(one);

    verify(callback, never()).onCancellation();

    // Cancel 'two'.
    cancel(two);
    assertThat(fetcher.getLowPriQueue()).isEmpty();
=====================================================================
Found a 15 line (115 tokens) duplication in the following files: 
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    mFadeDrawable.fadeOutLayer(0);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100, mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING, mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
  }

  @Test
  public void testFadeOutAllLayers() {
=====================================================================
Found a 13 line (115 tokens) duplication in the following files: 
Starting at line 64 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 322 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

    subscriber1.onFailure(mSrc1);
    mInOrder.verify(mSrc1).close();
    DataSubscriber<Object> subscriber2 = verifyGetAndSubscribe(mDataSourceSupplier2, mSrc2);
    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);

    Object val2a = mock(Object.class);
    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2a, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2a, NOT_FAILED, null);

    Object val2b = mock(Object.class);
    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);
=====================================================================
Found a 12 line (115 tokens) duplication in the following files: 
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 318 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 351 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

  public void testLifecycle_I2_I2_I1_F2_I1_S1_C() {
    DataSource<Object> dataSource = getAndSubscribe();
    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribeM(mDataSourceSupplier1, mSrc1);
    DataSubscriber<Object> subscriber2 = verifyGetAndSubscribeM(mDataSourceSupplier2, mSrc2);
    DataSubscriber<Object> subscriber3 = verifyGetAndSubscribe(mDataSourceSupplier3, mSrc3);

    Object val2a = mock(Object.class);
    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2a, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
    mInOrder.verify(mSrc3).close();
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2a, NOT_FAILED, null);
=====================================================================
Found a 30 line (115 tokens) duplication in the following files: 
Starting at line 111 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PriorityStarvingThrottlingProducer.java
Starting at line 72 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\ThrottlingProducer.java

  }

  private class ThrottlerConsumer extends DelegatingConsumer<T, T> {

    private ThrottlerConsumer(Consumer<T> consumer) {
      super(consumer);
    }

    @Override
    protected void onNewResultImpl(@Nullable T newResult, @Status int status) {
      getConsumer().onNewResult(newResult, status);
      if (isLast(status)) {
        onRequestFinished();
      }
    }

    @Override
    protected void onFailureImpl(Throwable t) {
      getConsumer().onFailure(t);
      onRequestFinished();
    }

    @Override
    protected void onCancellationImpl() {
      getConsumer().onCancellation();
      onRequestFinished();
    }

    private void onRequestFinished() {
      final Item<T> nextRequest;
=====================================================================
Found a 14 line (115 tokens) duplication in the following files: 
Starting at line 294 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 336 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    ArgumentCaptor<HashMap> captor = ArgumentCaptor.forClass(HashMap.class);
    verify(mProducerListener)
        .onProducerFinishWithSuccess(eq(mProducerContext), eq(PRODUCER_NAME), captor.capture());
    Map<String, String> resultMap = captor.getValue();
    assertEquals("false", resultMap.get(DiskCacheReadProducer.EXTRA_CACHED_VALUE_FOUND));
    assertNull(resultMap.get(DiskCacheReadProducer.ENCODED_IMAGE_SIZE));
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testDiskCacheGetNotFoundInputProducerSuccessNoExtraMap() {
=====================================================================
Found a 24 line (114 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 82 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 25 line (114 tokens) duplication in the following files: 
Starting at line 1134 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1279 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  public void testEvictLFUandNotMFUKeys() {
    // Cache has 4 entries; 2 for LFU and 2 for MFU
    // key is considered as MFU, if its accessCount > 1
    mCache =
        createDummyAdaptiveCountingMemoryCache(
            mParamsSupplier,
            mCacheTrimStrategy,
            mValueDescriptor,
            100,
            1,
            2,
            initialLFUCacheFractionPromil);

    // insert item1 to MFU
    CloseableReference<Integer> originalRef1 = newReference(10);
    CloseableReference<Integer> valueRef1a = mCache.cache(KEYS[1], originalRef1);
    CloseableReference<Integer> valueRef1b = mCache.get(KEYS[1]);
    originalRef1.close();
    valueRef1a.close();
    valueRef1b.close(); // item1 is in the MFU cache
    assertMFUExclusivelyOwned(KEYS[1], 10);

    // insert item2 to LFU
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2a = mCache.cache(KEYS[2], originalRef2);
=====================================================================
Found a 25 line (113 tokens) duplication in the following files: 
Starting at line 385 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\CloseableProducerToDataSourceAdapterTest.java
Starting at line 353 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

    testNewResult(mResultRef1, LAST, 1);
    testSubscribe(ON_NEW_RESULT);
    testClose(FINISHED, 2);
  }

  @Test
  public void test_NI_a_NL_C() {
    mInternalConsumer.onNewResult(null, Consumer.NO_FLAGS);
    verify(mDataSubscriber1).onNewResult(mDataSource);
    verifyWithResult(null, INTERMEDIATE);

    testSubscribe(NO_INTERACTIONS);

    mInternalConsumer.onNewResult(null, Consumer.IS_LAST);
    verify(mRequestListener).onRequestSuccess(mSettableProducerContext);
    verify(mDataSubscriber1).onNewResult(mDataSource);
    verify(mDataSubscriber2).onNewResult(mDataSource);
    verifyWithResult(null, LAST);

    testClose(FINISHED, 2);
  }

  @Test
  public void test_I_NL_a_C() {
    testNewResult(mResultRef1, INTERMEDIATE, 1);
=====================================================================
Found a 22 line (113 tokens) duplication in the following files: 
Starting at line 267 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 299 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  public void testReuseExclusive_CacheSameItem() {
    mCache =
        createDummyAdaptiveCountingMemoryCache(
            mParamsSupplier,
            mCacheTrimStrategy,
            mValueDescriptor,
            100,
            1,
            2,
            initialLFUCacheFractionPromil);
    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
    cachedRef.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(1, 100);
    cachedRef = mCache.reuse(KEY);
    assertNotNull(cachedRef);
    verify(mEntryStateObserver).onExclusivityChanged(KEY, false);
    assertTotalSize(0, 0);
    assertExclusivelyOwnedSize(0, 0);
    CloseableReference<Integer> newItem = mCache.cache(KEY, cachedRef);
=====================================================================
Found a 18 line (112 tokens) duplication in the following files: 
Starting at line 965 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 684 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    assertFalse(mCache.contains(KEY));

    CloseableReference<Integer> newRef = mCache.cache(KEY, newReference(100));

    assertTrue(mCache.contains(KEY));
    assertFalse(mCache.contains(KEYS[0]));

    newRef.close();

    assertTrue(mCache.contains(KEY));
    assertFalse(mCache.contains(KEYS[0]));

    CloseableReference<Integer> reuse = mCache.reuse(KEY);
    reuse.close();

    assertFalse(mCache.contains(KEY));
    assertFalse(mCache.contains(KEYS[0]));
  }
=====================================================================
Found a 13 line (111 tokens) duplication in the following files: 
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 142 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java

        .thenReturn(new ImageMetaData(-1, -1, null));
    mAddMetaDataConsumer.onNewResult(mIntermediateResult, Consumer.NO_FLAGS);
    ArgumentCaptor<EncodedImage> argumentCaptor = ArgumentCaptor.forClass(EncodedImage.class);
    verify(mConsumer).onNewResult(argumentCaptor.capture(), eq(Consumer.NO_FLAGS));
    EncodedImage encodedImage = argumentCaptor.getValue();
    assertTrue(EncodedImage.isValid(encodedImage));
    assertEquals(-1, encodedImage.getRotationAngle());
    assertEquals(-1, encodedImage.getWidth());
    assertEquals(-1, encodedImage.getHeight());
  }

  @Test
  public void testOnNewResultNotLast_RotationNotFound() {
=====================================================================
Found a 15 line (110 tokens) duplication in the following files: 
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListenerTest.java
Starting at line 153 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListenerTest.java

    when(mImagePerfState.getImageLoadStatus()).thenReturn(ImageLoadStatus.REQUESTED);

    when(mMonotonicClock.now()).thenReturn(imageLoadTime);
    mListener.onFinalImageSet(CONTROLLER_ID, null, null);
    expectedNumOfTimestamps++;
    when(mImagePerfState.getImageLoadStatus()).thenReturn(ImageLoadStatus.SUCCESS);

    when(mMonotonicClock.now()).thenReturn(imageReleaseTime);
    mListener.onRelease(CONTROLLER_ID);
    expectedNumOfTimestamps++;

    verify(mMonotonicClock, times(expectedNumOfTimestamps)).now();
    verify(mImagePerfMonitor)
        .notifyStatusUpdated(eq(mImagePerfState), eq(ImageLoadStatus.REQUESTED));
    verify(mImagePerfMonitor).notifyStatusUpdated(eq(mImagePerfState), eq(ImageLoadStatus.SUCCESS));
=====================================================================
Found a 14 line (110 tokens) duplication in the following files: 
Starting at line 192 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 228 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

        mImagePipeline.prefetchToEncodedCache(mImageRequest, mCallerContext);
    assertFalse(dataSource.isFinished());
    verify(mRequestListener1).onRequestStart(mImageRequest, mCallerContext, "0", true);
    verify(mRequestListener2).onRequestStart(mImageRequest, mCallerContext, "0", true);
    ArgumentCaptor<ProducerContext> producerContextArgumentCaptor =
        ArgumentCaptor.forClass(ProducerContext.class);
    verify(prefetchProducerSequence)
        .produceResults(any(Consumer.class), producerContextArgumentCaptor.capture());
    assertFalse(producerContextArgumentCaptor.getValue().isIntermediateResultExpected());
    assertEquals(producerContextArgumentCaptor.getValue().getPriority(), Priority.MEDIUM);
  }

  @Test
  public void testPrefetchToEncodedCacheCustomPriority() {
=====================================================================
Found a 14 line (109 tokens) duplication in the following files: 
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 139 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java

    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100, mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING, mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[2]);
  }

  @Test
  public void testFadeOutLayer() {
=====================================================================
Found a 23 line (109 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 24 line (109 tokens) duplication in the following files: 
Starting at line 145 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 362 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00,
        (byte) 0x00,
        (byte) 0x00,
        (byte) 0x00,
        (byte) 0x00,
        (byte) 0x00,
        // Huffman code values
        (byte) 0x00,
        (byte) 0x01,
        (byte) 0x02,
        (byte) 0x03,
        (byte) 0x04,
        (byte) 0x05,
        (byte) 0x06,
        (byte) 0x07,
        (byte) 0x08,
        (byte) 0x09,
        (byte) 0x0a,
        (byte) 0x0b,
        (byte) 0xff,
        (byte) 0xc4,
        (byte) 0x00,
        (byte) 0xb5,
        (byte) 0x10,
=====================================================================
Found a 12 line (109 tokens) duplication in the following files: 
Starting at line 441 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 517 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

  public void testEviction_ByEvictionQueueCount() {
    CloseableReference<Integer> originalRef1 = newReference(110);
    CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);
    originalRef1.close();
    valueRef1.close();
    CloseableReference<Integer> originalRef2 = newReference(120);
    CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
    valueRef2.close();
    CloseableReference<Integer> originalRef3 = newReference(130);
    CloseableReference<Integer> valueRef3 = mCache.cache(KEYS[3], originalRef3);
    originalRef3.close();
=====================================================================
Found a 27 line (108 tokens) duplication in the following files: 
Starting at line 95 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java

    mIsCancelled = ArgumentCaptor.forClass(AtomicBoolean.class);

    mProducerContext =
        new SettableProducerContext(
            mImageRequest,
            mRequestId,
            mProducerListener,
            mCallerContext,
            ImageRequest.RequestLevel.FULL_FETCH,
            false,
            true,
            Priority.MEDIUM,
            mConfig);
    mLowestLevelProducerContext =
        new SettableProducerContext(
            mImageRequest,
            mRequestId,
            mProducerListener,
            mCallerContext,
            ImageRequest.RequestLevel.DISK_CACHE,
            false,
            true,
            Priority.MEDIUM,
            mConfig);
    when(mProducerListener.requiresExtraMap(mProducerContext, PRODUCER_NAME)).thenReturn(true);
    when(mCacheKeyFactory.getEncodedCacheKey(mImageRequest, mCallerContext)).thenReturn(mCacheKey);
    when(mImageRequest.getCacheChoice()).thenReturn(ImageRequest.CacheChoice.DEFAULT);
=====================================================================
Found a 25 line (107 tokens) duplication in the following files: 
Starting at line 760 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanTest.java

    mDrawableHeight = drawableHeight;
    mFontAscent = fontAscent;
    mFontDescent = fontDescent;
    mExpectedAscent = expectedAscent;
    mExpectedDescent = expectedDescent;
    mFontTop = fontTop;
    mFontBottom = fontBottom;
    mExpectedTop = expectedTop;
    mExpectedBottom = expectedBottom;
  }

  @Before
  public void setup() {
    mDrawable = mock(Drawable.class);
    mBounds.set(0, 0, mDrawableWidth, mDrawableHeight);
    mFontMetrics.ascent = mFontAscent;
    mFontMetrics.descent = mFontDescent;
    mFontMetrics.top = mFontTop;
    mFontMetrics.bottom = mFontBottom;
    when(mDrawable.getBounds()).thenReturn(mBounds);
  }

  @Test
  public void testHeight() {
    BetterImageSpan span = new BetterImageSpan(mDrawable, mAlignment, mMargin);
=====================================================================
Found a 17 line (107 tokens) duplication in the following files: 
Starting at line 251 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 175 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
    cachedRef.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(1, 100);
    cachedRef = mCache.reuse(KEY);
    assertNotNull(cachedRef);
    verify(mEntryStateObserver).onExclusivityChanged(KEY, false);
    assertTotalSize(0, 0);
    assertExclusivelyOwnedSize(0, 0);
    cachedRef.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
  }

  @Test
  public void testReuseExclusive_CacheSameItem() {
=====================================================================
Found a 14 line (106 tokens) duplication in the following files: 
Starting at line 192 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 210 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 228 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

        mImagePipeline.prefetchToEncodedCache(mImageRequest, mCallerContext);
    assertFalse(dataSource.isFinished());
    verify(mRequestListener1).onRequestStart(mImageRequest, mCallerContext, "0", true);
    verify(mRequestListener2).onRequestStart(mImageRequest, mCallerContext, "0", true);
    ArgumentCaptor<ProducerContext> producerContextArgumentCaptor =
        ArgumentCaptor.forClass(ProducerContext.class);
    verify(prefetchProducerSequence)
        .produceResults(any(Consumer.class), producerContextArgumentCaptor.capture());
    assertFalse(producerContextArgumentCaptor.getValue().isIntermediateResultExpected());
    assertEquals(producerContextArgumentCaptor.getValue().getPriority(), Priority.MEDIUM);
  }

  @Test
  public void testPrefetchToEncodedCacheCustomPriority() {
=====================================================================
Found a 14 line (106 tokens) duplication in the following files: 
Starting at line 298 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 399 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

        mImagePipeline.fetchDecodedImage(mImageRequest, mCallerContext);
    assertFalse(dataSource.isFinished());
    verify(mRequestListener1).onRequestStart(mImageRequest, mCallerContext, "0", false);
    verify(mRequestListener2).onRequestStart(mImageRequest, mCallerContext, "0", false);
    ArgumentCaptor<ProducerContext> producerContextArgumentCaptor =
        ArgumentCaptor.forClass(ProducerContext.class);
    verify(decodedSequence)
        .produceResults(any(Consumer.class), producerContextArgumentCaptor.capture());
    assertTrue(producerContextArgumentCaptor.getValue().isIntermediateResultExpected());
    assertEquals(producerContextArgumentCaptor.getValue().getPriority(), Priority.HIGH);
  }

  @Test
  public void testFetchDecodedImageWithRequestLevel() {
=====================================================================
Found a 18 line (105 tokens) duplication in the following files: 
Starting at line 784 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 171 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanTest.java

    BetterImageSpan span = new BetterImageSpan(mDrawable, mAlignment, mMargin);
    span.getSize(null, null, 0, 0, mFontMetrics);
    assertThat(mFontMetrics.descent)
        .describedAs("Descent for " + mDescription)
        .isEqualTo(mExpectedDescent);
    assertThat(mFontMetrics.ascent)
        .describedAs("Ascent for " + mDescription)
        .isEqualTo(mExpectedAscent);
    assertThat(mFontMetrics.top).describedAs("Top for " + mDescription).isEqualTo(mExpectedTop);
    assertThat(mFontMetrics.bottom)
        .describedAs("Bottom for " + mDescription)
        .isEqualTo(mExpectedBottom);
  }

  @Test
  public void testWidth() {
    // The width consists of the drawable width and horizontal margin.
    BetterImageSpan span = new BetterImageSpan(mDrawable, mAlignment, mMargin);
=====================================================================
Found a 15 line (105 tokens) duplication in the following files: 
Starting at line 656 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 480 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> originalRef = newReference(400);
    CloseableReference<Integer> cachedRef = mCache.cache(KEYS[2], originalRef);
    originalRef.close();
    cachedRef.close();

    mCache.get(KEY);
    inOrder.verify(mParamsSupplier).get();

    PowerMockito.when(SystemClock.uptimeMillis()).thenReturn(PARAMS_CHECK_INTERVAL_MS - 1);
    mCache.get(KEY);
    inOrder.verify(mParamsSupplier, never()).get();
    mCache.get(KEY);
    inOrder.verify(mParamsSupplier, never()).get();

    assertTotalSize(1, 400);
=====================================================================
Found a 24 line (105 tokens) duplication in the following files: 
Starting at line 693 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1023 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  public void testRemoveAllMatchingPredicate() {
    // Cache has 4 entries; 2 for LFU and 2 for MFU
    // key is considered as MFU, if its accessCount > 1
    mCache =
        createDummyAdaptiveCountingMemoryCache(
            mParamsSupplier,
            mCacheTrimStrategy,
            mValueDescriptor,
            100,
            1,
            2,
            initialLFUCacheFractionPromil);

    // insert item1 to MFU
    CloseableReference<Integer> originalRef1 = newReference(10);
    CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);
    CloseableReference<Integer> valueRef1a = mCache.get(KEYS[1]);
    originalRef1.close();
    valueRef1.close();
    valueRef1a.close();

    // insert item2 to LFU
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);
=====================================================================
Found a 22 line (105 tokens) duplication in the following files: 
Starting at line 55 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineRegionDecodingFragment.java
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\FrescoVitoLithoRegionDecodeFragment.java

          mSelectedRegion.setUpdateMaximumDimensionOnNextSizeChange(true);
          if (imageInfo != null) {
            mFullDraweeView.setAspectRatio(imageInfo.getWidth() / (float) imageInfo.getHeight());
            mFullDraweeView.requestLayout();
            updateRegion();
          }
        }
      };

  private final ResizableFrameLayout.SizeChangedListener mSizeChangedListener =
      new ResizableFrameLayout.SizeChangedListener() {
        @Override
        public void onSizeChanged(int widthPx, int heightPx) {
          updateRegion();
        }
      };

  @Nullable
  @Override
  public View onCreateView(
      LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
    return inflater.inflate(R.layout.fragment_imagepipeline_region_decoding, container, false);
=====================================================================
Found a 21 line (104 tokens) duplication in the following files: 
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\preparation\DefaultBitmapFramePreparerTest.java
Starting at line 159 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\preparation\DefaultBitmapFramePreparerTest.java

            1, BACKEND_INTRINSIC_WIDTH, BACKEND_INTRINSIC_HEIGHT))
        .thenReturn(mBitmapReference);
    when(mBitmapFrameRenderer.renderFrame(1, mBitmap)).thenReturn(true);

    mDefaultBitmapFramePreparer.prepareFrame(mBitmapFrameCache, mAnimationBackend, 1);

    mExecutorService.getScheduledQueue().runNextPendingCommand();

    verify(mBitmapFrameCache, times(2)).contains(1);
    verify(mBitmapFrameCache)
        .getBitmapToReuseForFrame(1, BACKEND_INTRINSIC_WIDTH, BACKEND_INTRINSIC_HEIGHT);
    verify(mBitmapFrameRenderer).renderFrame(1, mBitmap);

    verify(mBitmapFrameCache)
        .onFramePrepared(1, mBitmapReference, BitmapAnimationBackend.FRAME_TYPE_REUSED);

    verifyZeroInteractions(mPlatformBitmapFactory);
  }

  @Test
  public void testPrepareFrame_whenPlatformBitmapAvailable_thenCacheCreatedBitmap() {
=====================================================================
Found a 16 line (104 tokens) duplication in the following files: 
Starting at line 292 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 292 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

    assertSame(mockGifImage, imageResult.getImage());
    assertNotNull(imageResult.getDecodedFrame(0));
    assertNotNull(imageResult.getDecodedFrame(1));
    assertNotNull(imageResult.getPreviewBitmap());

    // Should not have interacted with these.
    verify(mMockAnimatedDrawableBackendProvider)
        .get(any(AnimatedImageResult.class), isNull(Rect.class));
    verifyNoMoreInteractions(mMockAnimatedDrawableBackendProvider);
    verify(mMockBitmapFactory, times(2)).createBitmapInternal(50, 50, DEFAULT_BITMAP_CONFIG);
    verifyNoMoreInteractions(mMockBitmapFactory);
    verify(mockCompositor).renderFrame(0, mockBitmap1);
    verify(mockCompositor).renderFrame(1, mockBitmap2);
  }

  private TrivialPooledByteBuffer createByteBuffer() {
=====================================================================
Found a 22 line (104 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 84 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 13 line (104 tokens) duplication in the following files: 
Starting at line 635 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 707 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

  public void testInfiniteRequeues_requeueOnFail() {
    RecordingNetworkFetcher recordingNetworkFetcher = new RecordingNetworkFetcher();

    // Max hi-pri: 1, max low-pri: 0
    PriorityNetworkFetcher<FetchState> fetcher =
        newFetcher(recordingNetworkFetcher, false, 1, 0, true, INFINITE_REQUEUE, false, false);

    PriorityFetchState<FetchState> hipri1 = fetch(fetcher, "hipri1", callback, true);
    PriorityFetchState<FetchState> hipri2 = fetch(fetcher, "hipri2", callback, true);

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
    assertThat(fetcher.getHiPriQueue()).containsExactly(hipri2);
    assertThat(fetcher.getLowPriQueue()).isEmpty();
=====================================================================
Found a 10 line (104 tokens) duplication in the following files: 
Starting at line 466 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 325 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> originalRef1 = newReference(400);
    CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);
    originalRef1.close();
    CloseableReference<Integer> originalRef2 = newReference(500);
    CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
    CloseableReference<Integer> originalRef3 = newReference(100);
    CloseableReference<Integer> valueRef3 = mCache.cache(KEYS[3], originalRef3);
    originalRef3.close();
    CloseableReference<Integer> originalRef4 = newReference(1000);
=====================================================================
Found a 13 line (103 tokens) duplication in the following files: 
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 155 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

        newFetcher(delegate, true, 2, 1, true, 0, false, false);

    // Fill the currently-fetching set, so additional requests are not sent to network.
    PriorityFetchState<FetchState> dontcare1 = fetch(fetcher, "dontcare1", callback, true);
    fetch(fetcher, "dontcare2", callback, true);

    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, true);
    PriorityFetchState<FetchState> two = fetch(fetcher, "2", callback, true);
    PriorityFetchState<FetchState> three = fetch(fetcher, "3", callback, true);

    // Assert that the insertion order is LIFO for hi-pri, FIFO for low-pri.
    assertThat(toTestEntry(fetcher.getHiPriQueue()))
        .containsExactlyElementsIn(toTestEntry(one, two, three))
=====================================================================
Found a 21 line (103 tokens) duplication in the following files: 
Starting at line 241 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 267 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 299 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  public void testCanReuseExclusive() {
    mCache =
        createDummyAdaptiveCountingMemoryCache(
            mParamsSupplier,
            mCacheTrimStrategy,
            mValueDescriptor,
            100,
            1,
            2,
            initialLFUCacheFractionPromil);
    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
    cachedRef.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(1, 100);
    cachedRef = mCache.reuse(KEY);
    assertNotNull(cachedRef);
    verify(mEntryStateObserver).onExclusivityChanged(KEY, false);
    assertTotalSize(0, 0);
    assertExclusivelyOwnedSize(0, 0);
=====================================================================
Found a 13 line (103 tokens) duplication in the following files: 
Starting at line 872 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 661 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    cachedRefs[5].close();
    // Full trim. All exclusively owned items should be evicted.
    when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);
    mCache.trim(memoryTrimType);
    assertSharedWithCount(KEYS[0], 100, 1);
    assertSharedWithCount(KEYS[1], 101, 1);
    assertSharedWithCount(KEYS[9], 109, 1);
    assertNotCached(KEYS[8], 108);
    assertNotCached(KEYS[2], 102);
    assertNotCached(KEYS[7], 107);
    assertNotCached(KEYS[3], 103);
    assertNotCached(KEYS[6], 106);
    assertNotCached(KEYS[4], 104);
=====================================================================
Found a 28 line (103 tokens) duplication in the following files: 
Starting at line 87 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRotationFragment.java
Starting at line 183 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineBitmapFactoryFragment.java

        };

    @Override
    public int getCount() {
      return SPINNER_ENTRIES.length;
    }

    @Override
    public Object getItem(int position) {
      return SPINNER_ENTRIES[position];
    }

    @Override
    public long getItemId(int position) {
      return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
      final LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());

      final View view =
          convertView != null
              ? convertView
              : layoutInflater.inflate(
                  android.R.layout.simple_spinner_dropdown_item, parent, false);

      final TextView textView = (TextView) view.findViewById(android.R.id.text1);
=====================================================================
Found a 22 line (102 tokens) duplication in the following files: 
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java

  private static final String PRODUCER_NAME = DiskCacheReadProducer.PRODUCER_NAME;

  @Mock public CacheKeyFactory mCacheKeyFactory;
  @Mock public Producer mInputProducer;
  @Mock public Consumer mConsumer;
  @Mock public ImageRequest mImageRequest;
  @Mock public Object mCallerContext;
  @Mock public ProducerListener2 mProducerListener;
  @Mock public Exception mException;
  @Mock public ImagePipelineConfig mConfig;
  private final BufferedDiskCache mDefaultBufferedDiskCache = mock(BufferedDiskCache.class);
  private final BufferedDiskCache mSmallImageBufferedDiskCache = mock(BufferedDiskCache.class);
  private SettableProducerContext mProducerContext;
  private SettableProducerContext mLowestLevelProducerContext;
  private final String mRequestId = "mRequestId";
  private MultiCacheKey mCacheKey;
  private PooledByteBuffer mIntermediatePooledByteBuffer;
  private PooledByteBuffer mFinalPooledByteBuffer;
  private CloseableReference<PooledByteBuffer> mIntermediateImageReference;
  private CloseableReference<PooledByteBuffer> mFinalImageReference;
  private EncodedImage mIntermediateEncodedImage;
  private EncodedImage mFinalEncodedImage;
=====================================================================
Found a 10 line (101 tokens) duplication in the following files: 
Starting at line 298 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 317 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 399 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

        mImagePipeline.fetchDecodedImage(mImageRequest, mCallerContext);
    assertFalse(dataSource.isFinished());
    verify(mRequestListener1).onRequestStart(mImageRequest, mCallerContext, "0", false);
    verify(mRequestListener2).onRequestStart(mImageRequest, mCallerContext, "0", false);
    ArgumentCaptor<ProducerContext> producerContextArgumentCaptor =
        ArgumentCaptor.forClass(ProducerContext.class);
    verify(decodedSequence)
        .produceResults(any(Consumer.class), producerContextArgumentCaptor.capture());
    assertTrue(producerContextArgumentCaptor.getValue().isIntermediateResultExpected());
    assertEquals(producerContextArgumentCaptor.getValue().getPriority(), Priority.HIGH);
=====================================================================
Found a 18 line (101 tokens) duplication in the following files: 
Starting at line 111 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java

    mLocalAssetFetchProducer.produceResults(mConsumer, mProducerContext);
    mExecutor.runUntilIdle();

    assertEquals(
        2,
        mCapturedEncodedImage
            .getByteBufferRef()
            .getUnderlyingReferenceTestOnly()
            .getRefCountTestOnly());
    assertSame(pooledByteBuffer, mCapturedEncodedImage.getByteBufferRef().get());
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener).onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, true);
  }

  @Test(expected = RuntimeException.class)
  public void testFetchLocalResourceFailsByThrowing() throws Exception {
    when(mAssetManager.open(eq(TEST_FILENAME), eq(AssetManager.ACCESS_STREAMING)))
=====================================================================
Found a 25 line (101 tokens) duplication in the following files: 
Starting at line 1074 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1134 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1279 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  public void testFrequentlyUsedEvictionWhithoutChangingLFU() {
    // Cache has 4 entries; 2 for LFU and 2 for MFU
    // key is considered as MFU, if its accessCount > 1
    mCache =
        createDummyAdaptiveCountingMemoryCache(
            mParamsSupplier,
            mCacheTrimStrategy,
            mValueDescriptor,
            100,
            1,
            2,
            initialLFUCacheFractionPromil);

    // insert item1 to MFU
    CloseableReference<Integer> originalRef1 = newReference(10);
    CloseableReference<Integer> valueRef1a = mCache.cache(KEYS[1], originalRef1);
    CloseableReference<Integer> valueRef1b = mCache.get(KEYS[1]);
    originalRef1.close();
    valueRef1a.close();
    valueRef1b.close();
    assertMFUExclusivelyOwned(KEYS[1], 10);

    // insert item2 to LFU
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);
=====================================================================
Found a 13 line (100 tokens) duplication in the following files: 
Starting at line 111 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BranchOnSeparateImagesProducerTest.java
Starting at line 183 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BranchOnSeparateImagesProducerTest.java

    verify(mConsumer).onNewResult(intermediateEncodedImage, Consumer.NO_FLAGS);
    EncodedImage finalEncodedImage = new EncodedImage(mFirstProducerFinalResult.getByteBufferRef());
    finalEncodedImage.setImageFormat(DefaultImageFormats.JPEG);
    finalEncodedImage.setRotationAngle(-1);
    finalEncodedImage.setWidth(WIDTH);
    finalEncodedImage.setHeight(HEIGHT);
    mFirstProducerConsumer.onNewResult(finalEncodedImage, Consumer.IS_LAST);
    verify(mConsumer).onNewResult(finalEncodedImage, Consumer.IS_LAST);
    verify(mInputProducer2, never()).produceResults(any(Consumer.class), eq(mProducerContext));
  }

  @Test
  public void testFirstProducerResultNotGoodEnough() {
=====================================================================
Found a 21 line (99 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 15 line (99 tokens) duplication in the following files: 
Starting at line 218 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 243 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 268 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    Assert.assertTrue(!mIntermediateImageReferenceClone.isValid());
    Assert.assertTrue(!mFinalImageReferenceClone.isValid());
    Assert.assertEquals(
        0, closeableImageRef.getUnderlyingReferenceTestOnly().getRefCountTestOnly());
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testDontCacheIntermediateImageAsAlreadyHaveSameQuality() {
=====================================================================
Found a 21 line (99 tokens) duplication in the following files: 
Starting at line 354 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 245 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

  }

  /** Called when the client closes its reference. */
  private void releaseClientReference(final Entry<K, V> entry) {
    Preconditions.checkNotNull(entry);
    boolean isExclusiveAdded;
    CloseableReference<V> oldRefToClose;
    synchronized (this) {
      decreaseClientCount(entry);
      isExclusiveAdded = maybeAddToExclusives(entry);
      oldRefToClose = referenceToClose(entry);
    }
    CloseableReference.closeSafely(oldRefToClose);
    maybeNotifyExclusiveEntryInsertion(isExclusiveAdded ? entry : null);
    maybeUpdateCacheParams();
    maybeEvictEntries();
  }

  /** Adds the entry to the exclusively owned queue if it is viable for eviction. */
  private synchronized boolean maybeAddToExclusives(Entry<K, V> entry) {
    if (!entry.isOrphan && entry.clientCount == 0) {
=====================================================================
Found a 14 line (99 tokens) duplication in the following files: 
Starting at line 1745 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 736 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

        mCache.mMostFrequentlyUsedExclusiveEntries.get(entry.key));
    assertTrue("entry is not an orphan", entry.isOrphan);
    assertEquals("client count mismatch", count, entry.clientCount);
  }

  private void assertTotalSize(int count, int bytes) {
    assertEquals("total cache count mismatch", count, mCache.getCount());
    assertEquals("total cache size mismatch", bytes, mCache.getSizeInBytes());
  }

  private void assertExclusivelyOwnedSize(int count, int bytes) {
    assertEquals("total exclusives count mismatch", count, mCache.getEvictionQueueCount());
    assertEquals("total exclusives size mismatch", bytes, mCache.getEvictionQueueSizeInBytes());
  }
=====================================================================
Found a 14 line (98 tokens) duplication in the following files: 
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 124 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 124 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 124 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java

    MemoryPooledByteBuffer sb4 = mFactory.newByteBuffer(new ByteArrayInputStream(mData), 32);
    Assert.assertEquals(32, sb4.getCloseableReference().get().getSize());
    assertArrayEquals(mData, getBytes(sb4), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(1, 0),
            16, new IntPair(0, 0),
            8, new IntPair(0, 0),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
  }

  private static void testNewByteBuf_5(
=====================================================================
Found a 12 line (97 tokens) duplication in the following files: 
Starting at line 238 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 343 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java

        .onProducerFinishWithSuccess(mProducerContext, PostprocessorProducer.NAME, mExtraMap);
    mInOrder.verify(mConsumer).onNewResult(any(CloseableReference.class), eq(Consumer.NO_FLAGS));
    mInOrder.verifyNoMoreInteractions();

    assertEquals(index + 1, mResults.size());
    CloseableReference<CloseableImage> res0 = mResults.get(index);
    assertTrue(CloseableReference.isValid(res0));
    assertSame(destBitmap, ((CloseableStaticBitmap) res0.get()).getUnderlyingBitmap());
    res0.close();
    verify(mBitmapResourceReleaser).release(destBitmap);
  }
}
=====================================================================
Found a 13 line (97 tokens) duplication in the following files: 
Starting at line 86 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\test\java\com\facebook\imagepipeline\platform\GingerbreadPurgeableDecoderTest.java
Starting at line 96 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\test\java\com\facebook\imagepipeline\platform\KitKatPurgeableDecoderTest.java

    mBitmap = MockBitmapFactory.create();
    mBitmapCounter = new BitmapCounter(MAX_BITMAP_COUNT, MAX_BITMAP_SIZE);

    mockStatic(DalvikPurgeableDecoder.class);
    when(DalvikPurgeableDecoder.getBitmapFactoryOptions(anyInt(), any(Bitmap.Config.class)))
        .thenCallRealMethod();
    when(DalvikPurgeableDecoder.endsWithEOI(any(CloseableReference.class), anyInt()))
        .thenCallRealMethod();
    mockStatic(BitmapCounterProvider.class);
    when(BitmapCounterProvider.get()).thenReturn(mBitmapCounter);

    mockStatic(BitmapFactory.class);
    when(BitmapFactory.decodeFileDescriptor(
=====================================================================
Found a 14 line (97 tokens) duplication in the following files: 
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java

    MemoryPooledByteBuffer sb1 = mFactory.newByteBuffer(new ByteArrayInputStream(mData));
    Assert.assertEquals(16, sb1.getCloseableReference().get().getSize());
    assertArrayEquals(mData, getBytes(sb1), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(1, 0),
            8, new IntPair(0, 1),
            4, new IntPair(0, 1)),
        mStats.getBucketStats());
  }

  private void testNewByteBuf_2(
=====================================================================
Found a 14 line (97 tokens) duplication in the following files: 
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 92 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 92 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 92 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java

    MemoryPooledByteBuffer sb2 = mFactory.newByteBuffer(new ByteArrayInputStream(mData), 8);
    Assert.assertEquals(16, sb2.getCloseableReference().get().getSize());
    assertArrayEquals(mData, getBytes(sb2), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(1, 0),
            8, new IntPair(0, 1),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
  }

  private void testNewByteBuf_3(
=====================================================================
Found a 14 line (97 tokens) duplication in the following files: 
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java

    MemoryPooledByteBuffer sb3 = mFactory.newByteBuffer(new ByteArrayInputStream(mData), 16);
    Assert.assertEquals(16, sb3.getCloseableReference().get().getSize());
    assertArrayEquals(mData, getBytes(sb3), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(1, 0),
            8, new IntPair(0, 0),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
  }

  private void testNewByteBuf_4(
=====================================================================
Found a 31 line (97 tokens) duplication in the following files: 
Starting at line 54 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferTest.java
Starting at line 53 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferTest.java

    testBasic(mBufferPooledByteBuffer, mAshmemChunk);
  }

  @Test
  public void testSimpleRead() {
    testSimpleRead(mBufferPooledByteBuffer);
  }

  @Test(expected = IllegalArgumentException.class)
  public void testSimpleReadOutOfBoundsUsingBufferPool() {
    mBufferPooledByteBuffer.read(BUFFER_LENGTH);
  }

  @Test
  public void testRangeRead() {
    testRangeRead(mBufferPooledByteBuffer);
  }

  @Test(expected = IllegalArgumentException.class)
  public void testRangeReadOutOfBoundsUsingBufferPool() {
    testRangeReadOutOfBounds(mBufferPooledByteBuffer);
  }

  @Test
  public void testReadFromStream() throws Exception {
    testReadFromStream(mBufferPooledByteBuffer);
  }

  @Test
  public void testClose() {
    testClose(mBufferPooledByteBuffer, mAshmemChunk, mAshmemPool);
=====================================================================
Found a 13 line (96 tokens) duplication in the following files: 
Starting at line 106 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 157 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java

    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100, mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING, mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[2]);
  }

  @Test
  public void testFadeInLayer() {
=====================================================================
Found a 13 line (96 tokens) duplication in the following files: 
Starting at line 99 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 133 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100, mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING, mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
  }

  @Test
  public void testFadeInLayer() {
=====================================================================
Found a 12 line (96 tokens) duplication in the following files: 
Starting at line 640 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 811 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

        newFetcher(recordingNetworkFetcher, false, 1, 0, true, INFINITE_REQUEUE, false, false);

    PriorityFetchState<FetchState> hipri1 = fetch(fetcher, "hipri1", callback, true);
    PriorityFetchState<FetchState> hipri2 = fetch(fetcher, "hipri2", callback, true);

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
    assertThat(fetcher.getHiPriQueue()).containsExactly(hipri2);
    assertThat(fetcher.getLowPriQueue()).isEmpty();

    // Simulate a failure in hipri1.
    getOnlyElement(recordingNetworkFetcher.callbacks.get(hipri1.delegatedState))
        .onFailure(new Exception());
=====================================================================
Found a 14 line (96 tokens) duplication in the following files: 
Starting at line 1718 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 721 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    AbstractAdaptiveCountingMemoryCache.Entry<String, Integer> entry =
        mCache.mCachedEntries.get(key);
    assertNotNull("entry not found in the cache", entry);
    assertEquals("key mismatch", key, entry.key);
    assertEquals("value mismatch", value, entry.valueRef.get());
    assertEquals("client count greater than zero", 0, entry.clientCount);
    assertFalse("entry is an orphan", entry.isOrphan);
  }

  private void assertNotCached(String key, Integer value) {
    assertFalse("key found in the cache", mCache.mCachedEntries.contains(key));
    assertFalse(
        "key found in the exclusives",
        mCache.mLeastFrequentlyUsedExclusiveEntries.contains(key)
=====================================================================
Found a 17 line (95 tokens) duplication in the following files: 
Starting at line 439 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 22 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float scale, dx, dy;
      scale = scaleX;
      dx = parentRect.left;
      dy = parentRect.top + (parentRect.height() - childHeight * scale) * 0.5f;
      outTransform.setScale(scale, scale);
      outTransform.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
    }
=====================================================================
Found a 17 line (95 tokens) duplication in the following files: 
Starting at line 467 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float scale, dx, dy;
      scale = scaleY;
      dx = parentRect.left + (parentRect.width() - childWidth * scale) * 0.5f;
      dy = parentRect.top;
      outTransform.setScale(scale, scale);
      outTransform.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
    }
=====================================================================
Found a 9 line (95 tokens) duplication in the following files: 
Starting at line 240 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\HttpUrlConnectionNetworkFetcher.java
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-backends\imagepipeline-volley\src\main\java\com\facebook\imagepipeline\backends\volley\VolleyNetworkFetcher.java

      HttpUrlConnectionNetworkFetchState fetchState, int byteSize) {
    Map<String, String> extraMap = new HashMap<>(4);
    extraMap.put(QUEUE_TIME, Long.toString(fetchState.responseTime - fetchState.submitTime));
    extraMap.put(FETCH_TIME, Long.toString(fetchState.fetchCompleteTime - fetchState.responseTime));
    extraMap.put(TOTAL_TIME, Long.toString(fetchState.fetchCompleteTime - fetchState.submitTime));
    extraMap.put(IMAGE_SIZE, Integer.toString(byteSize));
    return extraMap;
  }
}
=====================================================================
Found a 22 line (95 tokens) duplication in the following files: 
Starting at line 364 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\CloseableProducerToDataSourceAdapterTest.java
Starting at line 332 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

    mInternalConsumer.onNewResult(mResultRef1, Consumer.IS_LAST);
    verifyFailed(null, mException);
    testSubscribe(ON_FAILURE);
    testClose(mException);
  }

  @Test
  public void test_F_F_a_C() {
    testFailure(null, 1);
    mInternalConsumer.onFailure(mock(Throwable.class));
    verifyFailed(null, mException);
    testSubscribe(ON_FAILURE);
    testClose(mException);
  }

  @Test
  public void test_NI_S_a_C() {
    mInternalConsumer.onNewResult(null, Consumer.NO_FLAGS);
    verify(mDataSubscriber1).onNewResult(mDataSource);
    verifyWithResult(null, INTERMEDIATE);

    testNewResult(mResultRef1, LAST, 1);
=====================================================================
Found a 13 line (95 tokens) duplication in the following files: 
Starting at line 191 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 214 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

  public void testReuseExclusive_CacheSameItem() {
    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
    cachedRef.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(1, 100);
    cachedRef = mCache.reuse(KEY);
    assertNotNull(cachedRef);
    verify(mEntryStateObserver).onExclusivityChanged(KEY, false);
    assertTotalSize(0, 0);
    assertExclusivelyOwnedSize(0, 0);
    CloseableReference<Integer> newItem = mCache.cache(KEY, cachedRef);
=====================================================================
Found a 29 line (95 tokens) duplication in the following files: 
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\main\java\com\facebook\imagepipeline\memory\AshmemMemoryChunk.java
Starting at line 146 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\main\java\com\facebook\imagepipeline\memory\NativeMemoryChunk.java

              + " which are the same ");
      Preconditions.checkArgument(false);
    }

    // Case 2: Other memory chunk id < this memory chunk id
    if (other.getUniqueId() < getUniqueId()) {
      synchronized (other) {
        synchronized (this) {
          doCopy(offset, other, otherOffset, count);
        }
      }
      return;
    }

    // Case 3: Other memory chunk id > this memory chunk id
    synchronized (this) {
      synchronized (other) {
        doCopy(offset, other, otherOffset, count);
      }
    }
  }

  /**
   * This does actual copy. It should be called only when we hold locks on both this and other
   * objects
   */
  private void doCopy(
      final int offset, final MemoryChunk other, final int otherOffset, final int count) {
    if (!(other instanceof AshmemMemoryChunk)) {
=====================================================================
Found a 20 line (94 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 86 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 10 line (94 tokens) duplication in the following files: 
Starting at line 428 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 474 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

    CacheKey dummyCacheKey = mock(CacheKey.class);

    ArgumentCaptor<Predicate> bitmapCachePredicateCaptor = ArgumentCaptor.forClass(Predicate.class);
    verify(mBitmapMemoryCache).removeAll(bitmapCachePredicateCaptor.capture());
    Predicate<CacheKey> bitmapMemoryCacheKeyPredicate = bitmapCachePredicateCaptor.getValue();
    BitmapMemoryCacheKey bitmapMemoryCacheKey1 = mock(BitmapMemoryCacheKey.class);
    BitmapMemoryCacheKey bitmapMemoryCacheKey2 = mock(BitmapMemoryCacheKey.class);
    when(bitmapMemoryCacheKey1.containsUri(uri)).thenReturn(true);
    when(bitmapMemoryCacheKey2.containsUri(uri)).thenReturn(false);
    assertTrue(bitmapMemoryCacheKeyPredicate.apply(bitmapMemoryCacheKey1));
=====================================================================
Found a 19 line (94 tokens) duplication in the following files: 
Starting at line 29 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\CloseableProducerToDataSourceAdapterTest.java
Starting at line 27 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

public class CloseableProducerToDataSourceAdapterTest {

  @Mock public RequestListener2 mRequestListener;

  private static final boolean FINISHED = true;
  private static final boolean NOT_FINISHED = false;
  private static final boolean WITH_RESULT = true;
  private static final boolean WITHOUT_RESULT = false;
  private static final boolean FAILED = true;
  private static final boolean NOT_FAILED = false;
  private static final boolean LAST = true;
  private static final boolean INTERMEDIATE = false;
  private static final int NO_INTERACTIONS = 0;
  private static final int ON_NEW_RESULT = 1;
  private static final int ON_FAILURE = 2;

  private static final Exception NPE = new NullPointerException();

  private ResourceReleaser mResourceReleaser;
=====================================================================
Found a 8 line (94 tokens) duplication in the following files: 
Starting at line 274 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 293 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

    verify(mInputProducer).produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    ArgumentCaptor<HashMap> captor = ArgumentCaptor.forClass(HashMap.class);
    verify(mProducerListener)
        .onProducerFinishWithSuccess(eq(mProducerContext), eq(PRODUCER_NAME), captor.capture());
    Map<String, String> resultMap = captor.getValue();
    assertEquals("false", resultMap.get(DiskCacheReadProducer.EXTRA_CACHED_VALUE_FOUND));
=====================================================================
Found a 35 line (94 tokens) duplication in the following files: 
Starting at line 114 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\color\ColorImageExample.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\svg\SvgDecoderExample.java
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\ninepatch\NinePatchExample.java

      mClosed = true;
    }

    @Override
    public boolean isClosed() {
      return mClosed;
    }

    @Override
    public void setImageExtras(@Nullable Map<String, Object> extras) {}

    @Override
    public void setImageExtra(String extra, Object value) {}

    @Override
    public boolean isStateful() {
      return false;
    }

    @Override
    public int getWidth() {
      return 0;
    }

    @Override
    public int getHeight() {
      return 0;
    }

    @Override
    public QualityInfo getQualityInfo() {
      return ImmutableQualityInfo.FULL_QUALITY;
    }

    @Override
=====================================================================
Found a 17 line (93 tokens) duplication in the following files: 
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java

    when(mProducerListener.requiresExtraMap(mProducerContext, POSTPROCESSOR_NAME)).thenReturn(true);
    doAnswer(
            new Answer<Object>() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                mResults.add(
                    ((CloseableReference<CloseableImage>) invocation.getArguments()[0]).clone());
                return null;
              }
            })
        .when(mConsumer)
        .onNewResult(any(CloseableReference.class), anyInt());
    mInOrder = inOrder(mPostprocessor, mProducerListener, mConsumer);
  }

  @Test
  public void testNonStaticBitmapIsPassedOn() {
=====================================================================
Found a 9 line (93 tokens) duplication in the following files: 
Starting at line 337 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 358 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 380 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

    mImagePipeline.fetchImageFromBitmapCache(mImageRequest, mCallerContext);
    verify(mRequestListener1).onRequestStart(mImageRequest, mCallerContext, "0", false);
    verify(mRequestListener2).onRequestStart(mImageRequest, mCallerContext, "0", false);
    ArgumentCaptor<ProducerContext> producerContextArgumentCaptor =
        ArgumentCaptor.forClass(ProducerContext.class);
    verify(bitmapCacheSequence)
        .produceResults(any(Consumer.class), producerContextArgumentCaptor.capture());
    assertTrue(producerContextArgumentCaptor.getValue().isIntermediateResultExpected());
    assertEquals(producerContextArgumentCaptor.getValue().getPriority(), Priority.HIGH);
=====================================================================
Found a 17 line (93 tokens) duplication in the following files: 
Starting at line 111 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java

    mLocalAssetFetchProducer.produceResults(mConsumer, mProducerContext);
    mExecutor.runUntilIdle();

    assertEquals(
        2,
        mCapturedEncodedImage
            .getByteBufferRef()
            .getUnderlyingReferenceTestOnly()
            .getRefCountTestOnly());
    assertSame(pooledByteBuffer, mCapturedEncodedImage.getByteBufferRef().get());
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener).onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, true);
  }

  @Test(expected = RuntimeException.class)
  public void testFetchLocalResourceFailsByThrowing() throws Exception {
=====================================================================
Found a 18 line (93 tokens) duplication in the following files: 
Starting at line 69 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\SimpleScaleTypeAdapter.java
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRotationFragment.java

  }

  @Override
  public long getItemId(int position) {
    return position;
  }

  @Override
  public View getView(int position, View convertView, ViewGroup parent) {
    final LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());

    final View view =
        convertView != null
            ? convertView
            : layoutInflater.inflate(android.R.layout.simple_spinner_dropdown_item, parent, false);

    final TextView textView = (TextView) view.findViewById(android.R.id.text1);
    textView.setText(mEntries.get(position).description);
=====================================================================
Found a 10 line (92 tokens) duplication in the following files: 
Starting at line 155 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    mFadeDrawable.fadeOutAllLayers();
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100, mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING, mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
=====================================================================
Found a 11 line (92 tokens) duplication in the following files: 
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 142 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

  public void testLifecycle_F1_I2_I2_F2_F3_C() {
    DataSource<Object> dataSource = getAndSubscribe();
    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribe(mDataSourceSupplier1, mSrc1);

    setState(mSrc1, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, mock(Throwable.class));
    subscriber1.onFailure(mSrc1);
    mInOrder.verify(mSrc1).close();
    DataSubscriber<Object> subscriber2 = verifyGetAndSubscribe(mDataSourceSupplier2, mSrc2);
    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);

    Object val2a = mock(Object.class);
=====================================================================
Found a 12 line (92 tokens) duplication in the following files: 
Starting at line 277 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 215 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
    cachedRef.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(1, 100);
    cachedRef = mCache.reuse(KEY);
    assertNotNull(cachedRef);
    verify(mEntryStateObserver).onExclusivityChanged(KEY, false);
    assertTotalSize(0, 0);
    assertExclusivelyOwnedSize(0, 0);
    CloseableReference<Integer> newItem = mCache.cache(KEY, cachedRef);
=====================================================================
Found a 12 line (92 tokens) duplication in the following files: 
Starting at line 309 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 192 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
    cachedRef.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(1, 100);
    cachedRef = mCache.reuse(KEY);
    assertNotNull(cachedRef);
    verify(mEntryStateObserver).onExclusivityChanged(KEY, false);
    assertTotalSize(0, 0);
    assertExclusivelyOwnedSize(0, 0);
    CloseableReference<Integer> newItem = mCache.cache(KEYS[2], cachedRef);
=====================================================================
Found a 24 line (92 tokens) duplication in the following files: 
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\samples\comparison\src\main\java\com\facebook\samples\comparison\instrumentation\InstrumentedDraweeView.java
Starting at line 40 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\main\java\com\facebook\samples\scrollperf\instrumentation\InstrumentedDraweeView.java

    mListener =
        new BaseControllerListener<Object>() {
          @Override
          public void onSubmit(String id, Object callerContext) {
            mInstrumentation.onStart();
          }

          @Override
          public void onFinalImageSet(
              String id, @Nullable Object imageInfo, @Nullable Animatable animatable) {
            mInstrumentation.onSuccess();
          }

          @Override
          public void onFailure(String id, Throwable throwable) {
            mInstrumentation.onFailure();
          }

          @Override
          public void onRelease(String id) {
            mInstrumentation.onCancellation();
          }
        };
  }
=====================================================================
Found a 9 line (91 tokens) duplication in the following files: 
Starting at line 30 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 142 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

  public void testLifecycle_F1_F2_F3_C() {
    DataSource<Object> dataSource = getAndSubscribe();
    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribe(mDataSourceSupplier1, mSrc1);

    setState(mSrc1, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, mock(Throwable.class));
    subscriber1.onFailure(mSrc1);
    mInOrder.verify(mSrc1).close();
    DataSubscriber<Object> subscriber2 = verifyGetAndSubscribe(mDataSourceSupplier2, mSrc2);
    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
=====================================================================
Found a 13 line (91 tokens) duplication in the following files: 
Starting at line 86 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 123 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(mFinalImageReference, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "true");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, true);
    Assert.assertTrue(!mFinalImageReference.isValid());
  }

  @Test
  public void testBitmapMemoryCacheGetNotFoundInputProducerSuccess() {
=====================================================================
Found a 13 line (91 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 285 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testBitmapMemoryCacheGetNotFoundInputProducerFailure() {
=====================================================================
Found a 21 line (91 tokens) duplication in the following files: 
Starting at line 74 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

  @Before
  public void setUp() {
    MockitoAnnotations.initMocks(this);
    PowerMockito.mockStatic(SystemClock.class);
    PowerMockito.when(SystemClock.uptimeMillis()).thenReturn(0L);
    mValueDescriptor =
        new ValueDescriptor<Integer>() {
          @Override
          public int getSizeInBytes(Integer value) {
            return value;
          }
        };
    mParams =
        new MemoryCacheParams(
            CACHE_MAX_SIZE,
            CACHE_MAX_COUNT,
            CACHE_EVICTION_QUEUE_MAX_SIZE,
            CACHE_EVICTION_QUEUE_MAX_COUNT,
            CACHE_ENTRY_MAX_SIZE,
            PARAMS_CHECK_INTERVAL_MS);
    when(mParamsSupplier.get()).thenReturn(mParams);
=====================================================================
Found a 25 line (90 tokens) duplication in the following files: 
Starting at line 60 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 60 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

public class AnimatedImageFactoryGifImplTest {

  private static final Bitmap.Config DEFAULT_BITMAP_CONFIG = Bitmap.Config.ARGB_8888;

  @Rule public PowerMockRule rule = new PowerMockRule();

  private static ResourceReleaser<PooledByteBuffer> FAKE_RESOURCE_RELEASER =
      new ResourceReleaser<PooledByteBuffer>() {

        @Override
        public void release(PooledByteBuffer value) {}
      };

  private static ResourceReleaser<Bitmap> FAKE_BITMAP_RESOURCE_RELEASER =
      new ResourceReleaser<Bitmap>() {

        @Override
        public void release(Bitmap value) {}
      };

  private AnimatedDrawableBackendProvider mMockAnimatedDrawableBackendProvider;
  private PlatformBitmapFactory mMockBitmapFactory;
  private AnimatedImageFactory mAnimatedImageFactory;

  private GifImage mGifImageMock;
=====================================================================
Found a 7 line (90 tokens) duplication in the following files: 
Starting at line 74 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 364 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java

    Assert.assertEquals(FadeDrawable.TRANSITION_NONE, mFadeDrawable.mTransitionState);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[2]);
=====================================================================
Found a 7 line (90 tokens) duplication in the following files: 
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 352 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(FadeDrawable.TRANSITION_NONE, mFadeDrawable.mTransitionState);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
=====================================================================
Found a 10 line (89 tokens) duplication in the following files: 
Starting at line 449 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 475 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 513 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 552 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    dh.setImage(mActualImage2, 1f, true);
    assertEquals(mActualImage2, finalImageSettableDrawable.getCurrent());
    assertEquals(false, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
=====================================================================
Found a 10 line (89 tokens) duplication in the following files: 
Starting at line 502 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 540 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 579 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 617 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    dh.setImage(mActualImage1, 0.5f, true);
    assertEquals(mActualImage1, finalImageSettableDrawable.getCurrent());
    assertEquals(false, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
=====================================================================
Found a 10 line (89 tokens) duplication in the following files: 
Starting at line 111 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java

    assertEquals(2, mMultiHolder.mHolders.size());
    assertEquals(mHolder1, mMultiHolder.mHolders.get(0));
    assertEquals(mHolder3, mMultiHolder.mHolders.get(1));
    mMultiHolder.add(1, mHolder2);
    assertEquals(3, mMultiHolder.mHolders.size());
    assertEquals(mHolder1, mMultiHolder.mHolders.get(0));
    assertEquals(mHolder2, mMultiHolder.mHolders.get(1));
    assertEquals(mHolder3, mMultiHolder.mHolders.get(2));

    verify(mHolder1, never()).onAttach();
=====================================================================
Found a 17 line (89 tokens) duplication in the following files: 
Starting at line 69 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java

    when(mDataSource.getResult()).thenReturn(mFinalResult);

    doAnswer(
            new Answer<Void>() {
              @Override
              public Void answer(InvocationOnMock invocation) throws Throwable {
                final Object[] args = invocation.getArguments();
                DataSubscriber dataSubscriber = (DataSubscriber) args[0];
                dataSubscriber.onNewResult(mDataSource);
                return null;
              }
            })
        .when(mDataSource)
        .subscribe(any(DataSubscriber.class), any(Executor.class));

    final Object actual = DataSources.waitForFinalResult(mDataSource);
    assertEquals(mFinalResult, actual);
=====================================================================
Found a 19 line (89 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 87 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 20 line (89 tokens) duplication in the following files: 
Starting at line 193 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java

      return SPINNER_ENTRIES_SIZE[position];
    }

    @Override
    public long getItemId(int position) {
      return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
      final LayoutInflater layoutInflater = getLayoutInflater();

      final View view =
          convertView != null
              ? convertView
              : layoutInflater.inflate(
                  android.R.layout.simple_spinner_dropdown_item, parent, false);

      final TextView textView = (TextView) view.findViewById(android.R.id.text1);
      textView.setText(SPINNER_ENTRIES_SIZE[position].toString());
=====================================================================
Found a 13 line (88 tokens) duplication in the following files: 
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedSingleUsePostprocessorProducerTest.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

    when(mProducerListener.requiresExtraMap(mProducerContext, POSTPROCESSOR_NAME)).thenReturn(true);
    doAnswer(
            new Answer<Object>() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                mResults.add(
                    ((CloseableReference<CloseableImage>) invocation.getArguments()[0]).clone());
                return null;
              }
            })
        .when(mConsumer)
        .onNewResult(any(CloseableReference.class), anyInt());
    mInOrder = inOrder(mPostprocessor, mProducerListener, mConsumer);
=====================================================================
Found a 10 line (88 tokens) duplication in the following files: 
Starting at line 155 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    mFadeDrawable.fadeOutAllLayers();
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100, mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING, mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
=====================================================================
Found a 11 line (88 tokens) duplication in the following files: 
Starting at line 267 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 256 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    verify(mLayers[2]).draw(mCanvas);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    verifyNoMoreInteractions(mCallback, mLayers[0], mLayers[1], mLayers[2]);

    // intermediate frames
    for (int i = 1; i < 5; i++) {
      resetInteractions();
      mFadeDrawable.incrementCurrentTimeMs(17);
      mFadeDrawable.draw(mCanvas);
      Assert.assertEquals(fadeUpToLayer ? 255 : 255 - 51 * i, mFadeDrawable.mAlphas[0]);
      Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
=====================================================================
Found a 19 line (88 tokens) duplication in the following files: 
Starting at line 215 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 195 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\pjpeg\ImageFormatProgressiveJpegFragment.java
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java

    }

    @Override
    public long getItemId(int position) {
      return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
      final LayoutInflater layoutInflater = getLayoutInflater(null);

      final View view =
          convertView != null
              ? convertView
              : layoutInflater.inflate(
                  android.R.layout.simple_spinner_dropdown_item, parent, false);

      final TextView textView = (TextView) view.findViewById(android.R.id.text1);
      textView.setText(mSpinnerEntries[position].descriptionId);
=====================================================================
Found a 13 line (87 tokens) duplication in the following files: 
Starting at line 351 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 380 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(true, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(FadeDrawable.TRANSITION_STARTING, fadeDrawable.getTransitionState());
    assertEquals(250, fadeDrawable.getTransitionDuration());

    // initial state -> final image (immediate)
    // reset hierarchy to initial state
    dh.reset();
    assertEquals(ColorDrawable.class, actualImageSettableDrawable.getCurrent().getClass());
    assertEquals(true, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set final image (immediate)
    dh.setImage(mActualImage2, 1f, true);
=====================================================================
Found a 15 line (87 tokens) duplication in the following files: 
Starting at line 166 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribe(mDataSourceSupplier1, mSrc1);

    Object val = mock(Object.class);
    setState(mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
    verifySubscriber(dataSource, mSrc1, ON_NEW_RESULT);
    verifyState(dataSource, mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);

    testClose(dataSource, mSrc1);
    verifyState(dataSource, null, CLOSED, FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
  }

  /** First data source succeeded, with multiple intermediate results. */
  @Test
  public void testLifecycle_I1_I1_S1_C() {
=====================================================================
Found a 24 line (87 tokens) duplication in the following files: 
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapProbeProducer.java
Starting at line 61 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedProbeProducer.java

              mEncodedMemoryCache,
              mDefaultBufferedDiskCache,
              mSmallImageBufferedDiskCache,
              mCacheKeyFactory,
              mEncodedMemoryCacheHistory,
              mDiskCacheHistory);

      listener.onProducerFinishWithSuccess(producerContext, PRODUCER_NAME, null);
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.beginSection("mInputProducer.produceResult");
      }
      mInputProducer.produceResults(consumerOfInputProducer, producerContext);
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.endSection();
      }
    } finally {
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.endSection();
      }
    }
  }

  private static class ProbeConsumer
      extends DelegatingConsumer<
=====================================================================
Found a 11 line (87 tokens) duplication in the following files: 
Starting at line 91 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\DiskCacheReadProducer.java
Starting at line 123 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PartialDiskCacheProducer.java

      final Consumer<EncodedImage> consumer, final ProducerContext producerContext) {
    final ProducerListener2 listener = producerContext.getProducerListener();
    return new Continuation<EncodedImage, Void>() {
      @Override
      public Void then(Task<EncodedImage> task) throws Exception {
        if (isTaskCancelled(task)) {
          listener.onProducerFinishWithCancellation(producerContext, PRODUCER_NAME, null);
          consumer.onCancellation();
        } else if (task.isFaulted()) {
          listener.onProducerFinishWithFailure(
              producerContext, PRODUCER_NAME, task.getError(), null);
=====================================================================
Found a 24 line (87 tokens) duplication in the following files: 
Starting at line 19 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\common\BaseCacheEventListener.java
Starting at line 27 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\common\NoOpCacheEventListener.java

  @Override
  public void onHit(CacheEvent cacheEvent) {}

  @Override
  public void onMiss(CacheEvent cacheEvent) {}

  @Override
  public void onWriteAttempt(CacheEvent cacheEvent) {}

  @Override
  public void onWriteSuccess(CacheEvent cacheEvent) {}

  @Override
  public void onReadException(CacheEvent cacheEvent) {}

  @Override
  public void onWriteException(CacheEvent cacheEvent) {}

  @Override
  public void onEviction(CacheEvent cacheEvent) {}

  @Override
  public void onCleared() {}
}
=====================================================================
Found a 8 line (86 tokens) duplication in the following files: 
Starting at line 385 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 403 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 373 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 391 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    verify(mCallback, times(1)).invalidateDrawable(mFadeDrawable);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
  }
=====================================================================
Found a 9 line (86 tokens) duplication in the following files: 
Starting at line 175 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 193 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 211 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 229 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

    assertFalse(dataSource.isFinished());
    verify(mRequestListener1).onRequestStart(mImageRequest, mCallerContext, "0", true);
    verify(mRequestListener2).onRequestStart(mImageRequest, mCallerContext, "0", true);
    ArgumentCaptor<ProducerContext> producerContextArgumentCaptor =
        ArgumentCaptor.forClass(ProducerContext.class);
    verify(prefetchProducerSequence)
        .produceResults(any(Consumer.class), producerContextArgumentCaptor.capture());
    assertFalse(producerContextArgumentCaptor.getValue().isIntermediateResultExpected());
    assertEquals(priority, producerContextArgumentCaptor.getValue().getPriority());
=====================================================================
Found a 12 line (86 tokens) duplication in the following files: 
Starting at line 206 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java

    mJobScheduler.updateJob(encodedImage, Consumer.NO_FLAGS);

    assertTrue(mJobScheduler.scheduleJob());
    assertEquals(0, mTestScheduledExecutorService.getPendingCount());
    assertEquals(1, mTestExecutorService.getPendingCount());
    assertEquals(0, mTestJobRunnable.jobs.size());

    mFakeClockForTime.incrementBy(1234);
    mFakeClockForWorker.incrementBy(1234);
    mFakeClockForScheduled.incrementBy(1234);
    assertEquals(1, mTestJobRunnable.jobs.size());
    assertJobsEqual(mTestJobRunnable.jobs.get(0), encodedImage, Consumer.NO_FLAGS);
=====================================================================
Found a 11 line (86 tokens) duplication in the following files: 
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 273 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java

    assertEquals(JobScheduler.JobState.IDLE, mJobScheduler.mJobState);
    assertTrue(mJobScheduler.scheduleJob());
    assertEquals(0, mTestScheduledExecutorService.getPendingCount());
    assertEquals(1, mTestExecutorService.getPendingCount());
    assertEquals(0, mTestJobRunnable.jobs.size());

    mFakeClockForTime.incrementBy(1234);
    mFakeClockForWorker.incrementBy(1234);
    mFakeClockForScheduled.incrementBy(1234);
    assertEquals(1, mTestJobRunnable.jobs.size());
    assertJobsEqual(mTestJobRunnable.jobs.get(0), encodedImage, Consumer.IS_LAST);
=====================================================================
Found a 17 line (86 tokens) duplication in the following files: 
Starting at line 176 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java
Starting at line 158 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

    performFailure(repeatedPostprocessorRunner);

    mInOrder
        .verify(mProducerListener)
        .onProducerStart(mProducerContext, PostprocessorProducer.NAME);
    mInOrder.verify(mPostprocessor).process(mSourceBitmap, mPlatformBitmapFactory);
    mInOrder
        .verify(mProducerListener)
        .requiresExtraMap(mProducerContext, PostprocessorProducer.NAME);
    mInOrder
        .verify(mProducerListener)
        .onProducerFinishWithFailure(
            eq(mProducerContext),
            eq(PostprocessorProducer.NAME),
            any(RuntimeException.class),
            eq(mExtraMap));
    mInOrder.verify(mConsumer).onFailure(any(RuntimeException.class));
=====================================================================
Found a 10 line (86 tokens) duplication in the following files: 
Starting at line 37 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\AshmemMemoryChunkPoolTest.java
Starting at line 36 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\BufferMemoryChunkPoolTest.java

    AshmemMemoryChunk b = mPool.alloc(1);
    Assert.assertNotNull(b);
    Assert.assertEquals(1, b.getSize());
    Assert.assertEquals(1, mPool.alloc(1).getSize());
    Assert.assertEquals(33, mPool.alloc(33).getSize());
    Assert.assertEquals(32, mPool.alloc(32).getSize());
  }

  @Test
  public void testFree() {
=====================================================================
Found a 33 line (85 tokens) duplication in the following files: 
Starting at line 62 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\platform\DefaultDecoder.java
Starting at line 54 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\main\java\com\facebook\imagepipeline\nativecode\DalvikPurgeableDecoder.java

  }

  @Override
  public CloseableReference<Bitmap> decodeFromEncodedImage(
      EncodedImage encodedImage, Bitmap.Config bitmapConfig, @Nullable Rect regionToDecode) {
    return decodeFromEncodedImageWithColorSpace(encodedImage, bitmapConfig, regionToDecode, null);
  }

  @Override
  public CloseableReference<Bitmap> decodeJPEGFromEncodedImage(
      EncodedImage encodedImage,
      Bitmap.Config bitmapConfig,
      @Nullable Rect regionToDecode,
      int length) {
    return decodeJPEGFromEncodedImageWithColorSpace(
        encodedImage, bitmapConfig, regionToDecode, length, null);
  }

  /**
   * Creates a bitmap from encoded bytes.
   *
   * @param encodedImage the encoded image with a reference to the encoded bytes
   * @param bitmapConfig the {@link android.graphics.Bitmap.Config} used to create the decoded
   *     Bitmap
   * @param regionToDecode optional image region to decode or null to decode the whole image
   * @param colorSpace the target color space of the decoded bitmap, must be one of the named color
   *     space in {@link android.graphics.ColorSpace.Named}. If null, then SRGB color space is
   *     assumed if the SDK version >= 26.
   * @return the bitmap
   * @exception java.lang.OutOfMemoryError if the Bitmap cannot be allocated
   */
  @Override
  public CloseableReference<Bitmap> decodeFromEncodedImageWithColorSpace(
=====================================================================
Found a 9 line (85 tokens) duplication in the following files: 
Starting at line 159 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 177 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 292 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

    setupDiskCacheGetSuccess(mDefaultBufferedDiskCache);
    mDiskCacheReadProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    ArgumentCaptor<HashMap> captor = ArgumentCaptor.forClass(HashMap.class);
    verify(mProducerListener)
        .onProducerFinishWithSuccess(eq(mProducerContext), eq(PRODUCER_NAME), captor.capture());
    Map<String, String> resultMap = captor.getValue();
    assertEquals("true", resultMap.get(DiskCacheReadProducer.EXTRA_CACHED_VALUE_FOUND));
=====================================================================
Found a 19 line (85 tokens) duplication in the following files: 
Starting at line 656 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 494 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

  }

  private synchronized void makeOrphans(@Nullable ArrayList<Entry<K, V>> oldEntries) {
    if (oldEntries != null) {
      for (Entry<K, V> oldEntry : oldEntries) {
        makeOrphan(oldEntry);
      }
    }
  }

  /** Marks the entry as orphan. */
  private synchronized void makeOrphan(Entry<K, V> entry) {
    Preconditions.checkNotNull(entry);
    Preconditions.checkState(!entry.isOrphan);
    entry.isOrphan = true;
  }

  /** Increases the entry's client count and access count. */
  private synchronized void increaseCounters(Entry<K, V> entry) {
=====================================================================
Found a 12 line (85 tokens) duplication in the following files: 
Starting at line 174 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 191 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 214 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

  public void testCanReuseExclusive() {
    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
    cachedRef.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(1, 100);
    cachedRef = mCache.reuse(KEY);
    assertNotNull(cachedRef);
    verify(mEntryStateObserver).onExclusivityChanged(KEY, false);
    assertTotalSize(0, 0);
    assertExclusivelyOwnedSize(0, 0);
=====================================================================
Found a 9 line (84 tokens) duplication in the following files: 
Starting at line 307 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 1007 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertNotNull(fadeDrawable);
    assertScaleTypeAndDrawable(mWrappedImage, ScaleType.CENTER, fadeDrawable.getDrawable(1));
    Rounded roundedPlaceholder = (Rounded) mWrappedImage.getCurrent().getCurrent();
    assertRoundingParams(roundingParams, roundedPlaceholder);
    Rounded roundedFailureImage = (Rounded) fadeDrawable.getDrawable(5).getCurrent();
    assertRoundingParams(roundingParams, roundedFailureImage);
    Rounded roundedRetryImage = (Rounded) fadeDrawable.getDrawable(4);
    assertRoundingParams(roundingParams, roundedRetryImage);
    verifyCallback(rootDrawable, mWrappedImage.getCurrent().getCurrent());
=====================================================================
Found a 9 line (84 tokens) duplication in the following files: 
Starting at line 71 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    subscriber2.onNewResult(mSrc2);
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2a, NOT_FAILED, null);

    Object val2b = mock(Object.class);
    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);
=====================================================================
Found a 10 line (84 tokens) duplication in the following files: 
Starting at line 158 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 222 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    subscriber2.onNewResult(mSrc2);
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);

    // gets ignored because DS2 was first to produce result
    Object val1a = mock(Object.class);
    setState(mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1a, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
    verifySubscriber(dataSource, mSrc1, NO_INTERACTIONS);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);
=====================================================================
Found a 18 line (84 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 88 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 6 line (84 tokens) duplication in the following files: 
Starting at line 149 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\main\java\com\facebook\samples\gestures\TransformGestureDetector.java
Starting at line 164 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\main\java\com\facebook\samples\gestures\TransformGestureDetector.java

    } else {
      float startDeltaX = mDetector.getStartX()[1] - mDetector.getStartX()[0];
      float startDeltaY = mDetector.getStartY()[1] - mDetector.getStartY()[0];
      float currentDeltaX = mDetector.getCurrentX()[1] - mDetector.getCurrentX()[0];
      float currentDeltaY = mDetector.getCurrentY()[1] - mDetector.getCurrentY()[0];
      float startDist = (float) Math.hypot(startDeltaX, startDeltaY);
=====================================================================
Found a 12 line (83 tokens) duplication in the following files: 
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 124 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 141 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 158 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java

    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100, mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING, mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[2]);
  }

  @Test
  public void testFadeInLayer() {
=====================================================================
Found a 12 line (83 tokens) duplication in the following files: 
Starting at line 100 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 117 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 153 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100, mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING, mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
  }

  @Test
  public void testFadeInLayer() {
=====================================================================
Found a 10 line (83 tokens) duplication in the following files: 
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 334 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }
=====================================================================
Found a 8 line (83 tokens) duplication in the following files: 
Starting at line 160 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 178 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 274 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

    mDiskCacheReadProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    ArgumentCaptor<HashMap> captor = ArgumentCaptor.forClass(HashMap.class);
    verify(mProducerListener)
        .onProducerFinishWithSuccess(eq(mProducerContext), eq(PRODUCER_NAME), captor.capture());
    Map<String, String> resultMap = captor.getValue();
    assertEquals("true", resultMap.get(DiskCacheReadProducer.EXTRA_CACHED_VALUE_FOUND));
=====================================================================
Found a 10 line (83 tokens) duplication in the following files: 
Starting at line 165 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 193 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    Assert.assertTrue(EncodedImage.isValid(mFinalEncodedImageClone));
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(EncodedMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }
=====================================================================
Found a 13 line (83 tokens) duplication in the following files: 
Starting at line 165 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 211 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    Assert.assertTrue(EncodedImage.isValid(mFinalEncodedImageClone));
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(EncodedMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testEncodedMemoryCacheGetNotFoundInputProducerSuccessButResultNotCacheable() {
=====================================================================
Found a 13 line (82 tokens) duplication in the following files: 
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\preparation\DefaultBitmapFramePreparerTest.java
Starting at line 158 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\preparation\DefaultBitmapFramePreparerTest.java

    when(mPlatformBitmapFactory.createBitmap(
            BACKEND_INTRINSIC_WIDTH, BACKEND_INTRINSIC_HEIGHT, BITMAP_CONFIG))
        .thenReturn(mBitmapReference);
    when(mBitmapFrameRenderer.renderFrame(1, mBitmap)).thenReturn(true);

    mDefaultBitmapFramePreparer.prepareFrame(mBitmapFrameCache, mAnimationBackend, 1);

    mExecutorService.getScheduledQueue().runNextPendingCommand();

    verify(mBitmapFrameCache, times(2)).contains(1);
    verify(mBitmapFrameCache)
        .getBitmapToReuseForFrame(1, BACKEND_INTRINSIC_WIDTH, BACKEND_INTRINSIC_HEIGHT);
    verify(mPlatformBitmapFactory)
=====================================================================
Found a 14 line (82 tokens) duplication in the following files: 
Starting at line 243 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 244 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

    assertSame(mockGifImage, imageResult.getImage());
    assertNotNull(imageResult.getPreviewBitmap());
    assertFalse(imageResult.hasDecodedFrame(0));

    // Should not have interacted with these.
    verify(mMockAnimatedDrawableBackendProvider)
        .get(any(AnimatedImageResult.class), isNull(Rect.class));
    verifyNoMoreInteractions(mMockAnimatedDrawableBackendProvider);
    verify(mMockBitmapFactory).createBitmapInternal(50, 50, DEFAULT_BITMAP_CONFIG);
    verifyNoMoreInteractions(mMockBitmapFactory);
    verify(mockCompositor).renderFrame(0, mockBitmap);
  }

  private void testCreateWithDecodeAlFrames(
=====================================================================
Found a 21 line (82 tokens) duplication in the following files: 
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\MatrixDrawable.java
Starting at line 136 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScaleTypeDrawable.java

    configureBounds();
    invalidateSelf();
  }

  @Override
  public void draw(Canvas canvas) {
    configureBoundsIfUnderlyingChanged();
    if (mDrawMatrix != null) {
      int saveCount = canvas.save();
      canvas.clipRect(getBounds());
      canvas.concat(mDrawMatrix);
      super.draw(canvas);
      canvas.restoreToCount(saveCount);
    } else {
      // mDrawMatrix == null means our bounds match and we can take fast path
      super.draw(canvas);
    }
  }

  @Override
  protected void onBoundsChange(Rect bounds) {
=====================================================================
Found a 6 line (82 tokens) duplication in the following files: 
Starting at line 186 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 256 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertNull(fadeDrawable.getDrawable(0));
    assertScaleTypeAndDrawable(mPlaceholderImage, ScaleType.CENTER, fadeDrawable.getDrawable(1));
    assertActualImageScaleType(ScaleType.CENTER_CROP, null, fadeDrawable.getDrawable(2));
    assertScaleTypeAndDrawable(mProgressBarImage, ScaleType.CENTER, fadeDrawable.getDrawable(3));
    assertScaleTypeAndDrawable(mRetryImage, ScaleType.FIT_CENTER, fadeDrawable.getDrawable(4));
    assertScaleTypeAndDrawable(mFailureImage, ScaleType.FIT_CENTER, fadeDrawable.getDrawable(5));
=====================================================================
Found a 6 line (82 tokens) duplication in the following files: 
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 184 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java

    when(ImageFormatChecker.getImageFormat_WrapIOException(any(InputStream.class)))
        .thenAnswer((Answer<ImageFormat>) i -> DefaultImageFormats.JPEG);
    when(JfifUtil.getAutoRotateAngleFromOrientation(orientation)).thenReturn(rotationAngle);
    when(JfifUtil.getOrientation(any(InputStream.class))).thenReturn(orientation);
    when(BitmapUtil.decodeDimensionsAndColorSpace(any(InputStream.class)))
        .thenReturn(new ImageMetaData(-1, -1, null));
=====================================================================
Found a 12 line (82 tokens) duplication in the following files: 
Starting at line 206 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 231 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 273 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java

    mJobScheduler.updateJob(encodedImage, Consumer.NO_FLAGS);

    assertTrue(mJobScheduler.scheduleJob());
    assertEquals(0, mTestScheduledExecutorService.getPendingCount());
    assertEquals(1, mTestExecutorService.getPendingCount());
    assertEquals(0, mTestJobRunnable.jobs.size());

    mFakeClockForTime.incrementBy(1234);
    mFakeClockForWorker.incrementBy(1234);
    mFakeClockForScheduled.incrementBy(1234);
    assertEquals(1, mTestJobRunnable.jobs.size());
    assertJobsEqual(mTestJobRunnable.jobs.get(0), encodedImage, Consumer.NO_FLAGS);
=====================================================================
Found a 11 line (82 tokens) duplication in the following files: 
Starting at line 251 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 192 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 215 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
    cachedRef.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(1, 100);
    cachedRef = mCache.reuse(KEY);
    assertNotNull(cachedRef);
    verify(mEntryStateObserver).onExclusivityChanged(KEY, false);
    assertTotalSize(0, 0);
    assertExclusivelyOwnedSize(0, 0);
=====================================================================
Found a 11 line (82 tokens) duplication in the following files: 
Starting at line 277 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 309 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 175 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
    cachedRef.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(1, 100);
    cachedRef = mCache.reuse(KEY);
    assertNotNull(cachedRef);
    verify(mEntryStateObserver).onExclusivityChanged(KEY, false);
    assertTotalSize(0, 0);
    assertExclusivelyOwnedSize(0, 0);
=====================================================================
Found a 9 line (82 tokens) duplication in the following files: 
Starting at line 571 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 412 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> originalRef1 = newReference(200);
    CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);
    originalRef1.close();
    valueRef1.close();
    CloseableReference<Integer> originalRef2 = newReference(300);
    CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
    valueRef2.close();
    CloseableReference<Integer> originalRef3 = newReference(400);
=====================================================================
Found a 8 line (82 tokens) duplication in the following files: 
Starting at line 42 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\androidTest\java\com\facebook\samples\scrollperf\data\impl\InfiniteSimpleAdapterTest.java
Starting at line 56 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\androidTest\java\com\facebook\samples\scrollperf\data\impl\InfiniteSimpleAdapterTest.java

    when(mSimpleAdapter.getSize()).thenReturn(10);
    when(mSimpleAdapter.isLazy()).thenReturn(true);
    when(mSimpleAdapter.get(0)).thenReturn(mUri);
    final SimpleAdapter infinite = SimpleAdapter.Util.makeItInfinite(mSimpleAdapter);
    assertEquals(Integer.MAX_VALUE, infinite.getSize());
    assertTrue(infinite.isLazy());
    assertSame(mUri, infinite.get(0));
    assertSame(mUri, infinite.get(10));
=====================================================================
Found a 10 line (81 tokens) duplication in the following files: 
Starting at line 273 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 352 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java

      float scale = Math.min(scaleX, scaleY);
      float dx = parentRect.left + (parentRect.width() - childWidth * scale) * 0.5f;
      float dy = parentRect.top + (parentRect.height() - childHeight * scale) * 0.5f;
      outTransform.setScale(scale, scale);
      outTransform.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
    }

    @Override
    public String toString() {
      return "fit_center";
=====================================================================
Found a 9 line (81 tokens) duplication in the following files: 
Starting at line 101 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 180 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 210 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 247 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 287 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

  public void testLifecycle_I1_F1_I2_F2_F3_C() {
    DataSource<Object> dataSource = getAndSubscribe();
    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribe(mDataSourceSupplier1, mSrc1);

    Object val1 = mock(Object.class);
    setState(mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
    verifySubscriber(dataSource, mSrc1, ON_NEW_RESULT);
    verifyState(dataSource, mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1, NOT_FAILED, null);
=====================================================================
Found a 22 line (81 tokens) duplication in the following files: 
Starting at line 146 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\main\java\com\facebook\imagepipeline\memory\AshmemMemoryChunk.java
Starting at line 114 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\main\java\com\facebook\imagepipeline\memory\BufferMemoryChunk.java

              + Long.toHexString(other.getUniqueId())
              + " which are the same ");
      Preconditions.checkArgument(false);
    }

    // Case 2: Other memory chunk id < this memory chunk id
    if (other.getUniqueId() < getUniqueId()) {
      synchronized (other) {
        synchronized (this) {
          doCopy(offset, other, otherOffset, count);
        }
      }
      return;
    }

    // Case 3: Other memory chunk id > this memory chunk id
    synchronized (this) {
      synchronized (other) {
        doCopy(offset, other, otherOffset, count);
      }
    }
  }
=====================================================================
Found a 15 line (81 tokens) duplication in the following files: 
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineRegionDecodingFragment.java
Starting at line 72 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\FrescoVitoLithoRegionDecodeFragment.java

    return inflater.inflate(R.layout.fragment_imagepipeline_region_decoding, container, false);
  }

  @Override
  public void onViewCreated(final View view, @Nullable Bundle savedInstanceState) {
    mUri =
        sampleUris()
            .createSampleUri(ImageUriProvider.ImageSize.L, ImageUriProvider.Orientation.LANDSCAPE);

    mFullDraweeView = (SimpleDraweeView) view.findViewById(R.id.drawee_view_full);
    mFullDraweeView.setController(
        Fresco.newDraweeControllerBuilder()
            .setUri(mUri)
            .setControllerListener(mControllerListener)
            .build());
=====================================================================
Found a 11 line (80 tokens) duplication in the following files: 
Starting at line 229 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

    mInOrder
        .verify(mProducerListener)
        .onProducerStart(mProducerContext, PostprocessorProducer.NAME);
    mInOrder.verify(mPostprocessor).process(mSourceBitmap, mPlatformBitmapFactory);
    mInOrder
        .verify(mProducerListener)
        .requiresExtraMap(mProducerContext, PostprocessorProducer.NAME);
    mInOrder
        .verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PostprocessorProducer.NAME, mExtraMap);
    mInOrder.verify(mConsumer).onNewResult(any(CloseableReference.class), eq(Consumer.NO_FLAGS));
=====================================================================
Found a 9 line (80 tokens) duplication in the following files: 
Starting at line 130 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 164 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java

    Bitmap mockBitmap = MockBitmapFactory.create(50, 50, DEFAULT_BITMAP_CONFIG);

    // Expect a call to GifImage.createFromByteBuffer
    TrivialPooledByteBuffer byteBuffer = createByteBuffer();
    when(mGifImageMock.decodeFromNativeMemory(
            eq(byteBuffer.getNativePtr()), eq(byteBuffer.size()), any(ImageDecodeOptions.class)))
        .thenReturn(mockGifImage);
    when(mockGifImage.getWidth()).thenReturn(50);
    when(mockGifImage.getHeight()).thenReturn(50);
=====================================================================
Found a 9 line (80 tokens) duplication in the following files: 
Starting at line 130 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 164 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

    Bitmap mockBitmap = MockBitmapFactory.create(50, 50, DEFAULT_BITMAP_CONFIG);

    // Expect a call to WebPImage.createFromByteBuffer
    TrivialPooledByteBuffer byteBuffer = createByteBuffer();
    when(mWebPImageMock.decodeFromNativeMemory(
            eq(byteBuffer.getNativePtr()), eq(byteBuffer.size()), any(ImageDecodeOptions.class)))
        .thenReturn(mockWebPImage);
    when(mockWebPImage.getWidth()).thenReturn(50);
    when(mockWebPImage.getHeight()).thenReturn(50);
=====================================================================
Found a 9 line (80 tokens) duplication in the following files: 
Starting at line 441 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 505 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set final image (immediate)
    dh.setImage(mActualImage2, 1f, true);
=====================================================================
Found a 9 line (80 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 172 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 285 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
=====================================================================
Found a 10 line (80 tokens) duplication in the following files: 
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 301 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, false);
    verifyNoMoreInteractions(mInputProducer);
  }
=====================================================================
Found a 10 line (80 tokens) duplication in the following files: 
Starting at line 170 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 316 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    setupInputProducerNotFound();
    mBitmapMemoryCacheProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(mIntermediateImageReference, Consumer.NO_FLAGS);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
=====================================================================
Found a 24 line (80 tokens) duplication in the following files: 
Starting at line 401 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 286 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

      if (oldExclusive != null) {
        Entry<K, V> entry = mCachedEntries.remove(key);
        Preconditions.checkNotNull(entry);
        Preconditions.checkState(entry.clientCount == 0);
        // optimization: instead of cloning and then closing the original reference,
        // we just do a move
        clientRef = entry.valueRef;
        removed = true;
      }
    }
    if (removed) {
      maybeNotifyExclusiveEntryRemoval(oldExclusive);
    }
    return clientRef;
  }

  /**
   * Removes all the items from the cache whose key matches the specified predicate.
   *
   * @param predicate returns true if an item with the given key should be removed
   * @return number of the items removed from the cache
   */
  public int removeAll(Predicate<K> predicate) {
    ArrayList<Entry<K, V>> oldLFUExclusives;
=====================================================================
Found a 18 line (79 tokens) duplication in the following files: 
Starting at line 62 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 55 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedSingleUsePostprocessorProducerTest.java
Starting at line 62 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java
Starting at line 55 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

  private String mRequestId = "mRequestId";
  private Bitmap mSourceBitmap;
  private CloseableStaticBitmap mSourceCloseableStaticBitmap;
  private CloseableReference<CloseableImage> mSourceCloseableImageRef;
  private Bitmap mDestinationBitmap;
  private CloseableReference<Bitmap> mDestinationCloseableBitmapRef;
  private TestExecutorService mTestExecutorService;
  private PostprocessorProducer mPostprocessorProducer;
  private List<CloseableReference<CloseableImage>> mResults;

  private InOrder mInOrder;

  @Before
  public void setUp() {
    MockitoAnnotations.initMocks(this);
    mTestExecutorService = new TestExecutorService(new FakeClock());
    mPostprocessorProducer =
        new PostprocessorProducer(mInputProducer, mPlatformBitmapFactory, mTestExecutorService);
=====================================================================
Found a 13 line (79 tokens) duplication in the following files: 
Starting at line 61 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java
Starting at line 87 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java

    SystemClock.setCurrentTimeMillis((long) (DURATION * 0.1));

    mFadeDrawable.fadeInLayer(ACTUAL_LAYER_INDEX);
    mFadeDrawable.draw(mCanvas);
    verify(mOnFadeListener, times(1)).onFadeStarted();

    SystemClock.setCurrentTimeMillis((long) (DURATION * 0.5));
    mFadeDrawable.draw(mCanvas);
    mFadeDrawable.draw(mCanvas);
    mFadeDrawable.draw(mCanvas);
    verify(mOnFadeListener, never()).onFadeFinished();

    SystemClock.setCurrentTimeMillis((long) (DURATION * 1.5));
=====================================================================
Found a 17 line (79 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 89 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 8 line (79 tokens) duplication in the following files: 
Starting at line 188 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 212 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    when(mMemoryCache.get(mBitmapMemoryCacheKey)).thenReturn(null);
    mBitmapMemoryCacheProducer.produceResults(mConsumer, mProducerContext);
    verify(mMemoryCache).cache(mBitmapMemoryCacheKey, mIntermediateImageReference);
    verify(mMemoryCache).cache(mBitmapMemoryCacheKey, mFinalImageReference);
    verify(mConsumer).onNewResult(mIntermediateImageReferenceClone, Consumer.NO_FLAGS);
    verify(mConsumer).onNewResult(mFinalImageReferenceClone, Consumer.IS_LAST);
    Assert.assertTrue(!mIntermediateImageReferenceClone.isValid());
    Assert.assertTrue(!mFinalImageReferenceClone.isValid());
=====================================================================
Found a 10 line (79 tokens) duplication in the following files: 
Starting at line 193 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 211 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    verify(mConsumer).onNewResult(mFinalEncodedImageFormatUnknown, Consumer.IS_LAST);
    Assert.assertTrue(EncodedImage.isValid(mFinalEncodedImageClone));
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(EncodedMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }
=====================================================================
Found a 11 line (79 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\test\java\com\facebook\imagepipeline\platform\GingerbreadPurgeableDecoderTest.java
Starting at line 179 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\test\java\com\facebook\imagepipeline\platform\KitKatPurgeableDecoderTest.java

    GingerbreadPurgeableDecoder decoder = spy(mGingerbreadPurgeableDecoder);
    doThrow(new ConcurrentModificationException()).when(decoder).pinBitmap((Bitmap) anyObject());
    decoder.pinBitmap(any(Bitmap.class));
    try {
      decoder.decodeFromEncodedImage(mEncodedImage, DEFAULT_BITMAP_CONFIG, null);
    } finally {
      verify(mBitmap).recycle();
      assertEquals(0, mBitmapCounter.getCount());
      assertEquals(0, mBitmapCounter.getSize());
    }
  }
=====================================================================
Found a 10 line (79 tokens) duplication in the following files: 
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\main\java\com\facebook\imagepipeline\memory\BufferMemoryChunk.java
Starting at line 73 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\main\java\com\facebook\imagepipeline\memory\BufferMemoryChunk.java

  public synchronized int write(
      final int memoryOffset, final byte[] byteArray, final int byteArrayOffset, final int count) {
    Preconditions.checkNotNull(byteArray);
    Preconditions.checkState(!isClosed());
    Preconditions.checkNotNull(mBuffer);
    final int actualCount = MemoryChunkUtil.adjustByteCount(memoryOffset, count, mSize);
    MemoryChunkUtil.checkBounds(
        memoryOffset, byteArray.length, byteArrayOffset, actualCount, mSize);
    mBuffer.position(memoryOffset);
    mBuffer.put(byteArray, byteArrayOffset, actualCount);
=====================================================================
Found a 10 line (79 tokens) duplication in the following files: 
Starting at line 135 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\HierarcherImplTest.java
Starting at line 154 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\HierarcherImplTest.java

    when(options.getRoundingOptions()).thenReturn(RoundingOptions.forCornerRadiusPx(123));
    when(options.getPlaceholderDrawable()).thenReturn(drawable);
    when(options.getPlaceholderApplyRoundingOptions()).thenReturn(true);

    Drawable result = mHierarcher.buildPlaceholderDrawable(mResources, options);

    assertThat(result).isNotNull();
    assertThat(result).isInstanceOf(RoundedBitmapDrawable.class);
    assertThat(((RoundedBitmapDrawable) result).getRadii())
        .isEqualTo(new float[] {123, 123, 123, 123, 123, 123, 123, 123});
=====================================================================
Found a 25 line (78 tokens) duplication in the following files: 
Starting at line 119 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedColorDrawable.java
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedCornersDrawable.java

  }

  /**
   * Sets the rounding radii.
   *
   * @param radii Each corner receive two radius values [X, Y]. The corners are ordered top-left,
   *     top-right, bottom-right, bottom-left
   */
  @Override
  public void setRadii(float[] radii) {
    if (radii == null) {
      Arrays.fill(mRadii, 0);
    } else {
      Preconditions.checkArgument(radii.length == 8, "radii should have exactly 8 values");
      System.arraycopy(radii, 0, mRadii, 0, 8);
    }
    updatePath();
    invalidateSelf();
  }

  /** Gets the radii. */
  @Override
  public float[] getRadii() {
    return mRadii;
  }
=====================================================================
Found a 13 line (78 tokens) duplication in the following files: 
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 87 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java

        new DiskCacheReadProducer(
            mDefaultBufferedDiskCache,
            mSmallImageBufferedDiskCache,
            mCacheKeyFactory,
            mInputProducer);
    List<CacheKey> keys = new ArrayList<>(1);
    keys.add(new SimpleCacheKey("http://dummy.uri"));
    mCacheKey = new MultiCacheKey(keys);
    mIntermediatePooledByteBuffer = mock(PooledByteBuffer.class);
    mFinalPooledByteBuffer = mock(PooledByteBuffer.class);
    mIntermediateImageReference = CloseableReference.of(mIntermediatePooledByteBuffer);
    mFinalImageReference = CloseableReference.of(mFinalPooledByteBuffer);
    mIntermediateEncodedImage = new EncodedImage(mIntermediateImageReference);
=====================================================================
Found a 11 line (78 tokens) duplication in the following files: 
Starting at line 1648 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1662 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

            || mCache.mMostFrequentlyUsedExclusiveEntries.contains(key));
    AbstractAdaptiveCountingMemoryCache.Entry<String, Integer> entry =
        mCache.mCachedEntries.get(key);
    assertNotNull("entry not found in the cache", entry);
    assertEquals("key mismatch", key, entry.key);
    assertEquals("value mismatch", value, entry.valueRef.get());
    assertEquals("client count greater than zero", 0, entry.clientCount);
    assertFalse("entry is an orphan", entry.isOrphan);
  }

  private void assertMFUExclusivelyOwned(String key, Integer value) {
=====================================================================
Found a 30 line (77 tokens) duplication in the following files: 
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\main\java\com\facebook\animated\gif\GifImage.java
Starting at line 123 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\main\java\com\facebook\animated\webp\WebPImage.java

    nativeDispose();
  }

  @Override
  public int getWidth() {
    return nativeGetWidth();
  }

  @Override
  public int getHeight() {
    return nativeGetHeight();
  }

  @Override
  public int getFrameCount() {
    return nativeGetFrameCount();
  }

  @Override
  public int getDuration() {
    return nativeGetDuration();
  }

  @Override
  public int[] getFrameDurations() {
    return nativeGetFrameDurations();
  }

  @Override
  public int getLoopCount() {
=====================================================================
Found a 9 line (76 tokens) duplication in the following files: 
Starting at line 238 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\main\java\com\facebook\imagepipeline\animated\impl\AnimatedDrawableBackendImpl.java
Starting at line 65 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\main\java\com\facebook\animated\webpdrawable\WebpAnimationBackend.java

    double yScale = (double) mRenderedBounds.height() / (double) mAnimatedImage.getHeight();

    int frameWidth = (int) Math.round(frame.getWidth() * xScale);
    int frameHeight = (int) Math.round(frame.getHeight() * yScale);
    int xOffset = (int) (frame.getXOffset() * xScale);
    int yOffset = (int) (frame.getYOffset() * yScale);

    synchronized (this) {
      int renderedWidth = mRenderedBounds.width();
=====================================================================
Found a 9 line (76 tokens) duplication in the following files: 
Starting at line 494 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 505 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 532 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 571 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 609 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set temporary image (immediate)
    dh.setImage(mActualImage1, 0.5f, true);
=====================================================================
Found a 12 line (76 tokens) duplication in the following files: 
Starting at line 102 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 117 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 286 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    verify(mConsumer).onNewResult(mFinalImageReference, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testBitmapMemoryCacheGetNotFoundInputProducerNotFound() {
=====================================================================
Found a 12 line (76 tokens) duplication in the following files: 
Starting at line 102 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 271 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    verify(mConsumer).onNewResult(mFinalImageReference, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testBitmapMemoryCacheGetNotFoundInputProducerNotFound() {
=====================================================================
Found a 12 line (76 tokens) duplication in the following files: 
Starting at line 132 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 286 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testBitmapMemoryCacheGetNotFoundLowestLevelReached() {
=====================================================================
Found a 9 line (75 tokens) duplication in the following files: 
Starting at line 211 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 301 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 206 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 287 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    verify(mCallback).invalidateDrawable(mFadeDrawable);

    mFadeDrawable.draw(mCanvas);
    Assert.assertEquals(fadeUpToLayer ? 255 : 0, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(FadeDrawable.TRANSITION_NONE, mFadeDrawable.mTransitionState);
    if (fadeUpToLayer) {
      verify(mLayers[0]).draw(mCanvas);
=====================================================================
Found a 9 line (75 tokens) duplication in the following files: 
Starting at line 255 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ScaleTypeDrawableTest.java
Starting at line 267 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ScaleTypeDrawableTest.java

  public void testConfigureBounds_FOCUS_CROP_VB() {
    Rect bounds = new Rect(10, 10, 410, 310);
    int width = 200;
    int height = 300;
    PointF focusPoint = new PointF(0.5f, 0.9f);
    Matrix expectedMatrix = new Matrix();
    expectedMatrix.setScale(2.0f, 2.0f);
    expectedMatrix.postTranslate(10, -289);
    testConfigureBounds(bounds, width, height, ScaleType.FOCUS_CROP, focusPoint, expectedMatrix);
=====================================================================
Found a 13 line (75 tokens) duplication in the following files: 
Starting at line 50 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListenerTest.java
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListenerTest.java

  public void testSuccess() {
    final long startTime = 10L;
    final long imageLoadTime = 200L;
    final long imageReleaseTime = 345L;
    int expectedNumOfTimestamps = 0;

    when(mMonotonicClock.now()).thenReturn(startTime);
    mListener.onSubmit(CONTROLLER_ID, CALLER_CONTEXT);
    expectedNumOfTimestamps++;
    when(mImagePerfState.getImageLoadStatus()).thenReturn(ImageLoadStatus.REQUESTED);

    when(mMonotonicClock.now()).thenReturn(imageLoadTime);
    mListener.onFinalImageSet(CONTROLLER_ID, null, null);
=====================================================================
Found a 26 line (75 tokens) duplication in the following files: 
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\executors\ConstrainedExecutorService.java
Starting at line 28 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\executors\HandlerExecutorServiceImpl.java

  }

  @Override
  public void shutdown() {
    throw new UnsupportedOperationException();
  }

  @Override
  public List<Runnable> shutdownNow() {
    throw new UnsupportedOperationException();
  }

  @Override
  public boolean isShutdown() {
    return false;
  }

  @Override
  public boolean isTerminated() {
    return false;
  }

  @Override
  public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException {
    throw new UnsupportedOperationException();
  }
=====================================================================
Found a 9 line (75 tokens) duplication in the following files: 
Starting at line 329 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 430 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    subscriber2.onNewResult(mSrc2);
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2a, NOT_FAILED, null);

    Object val2b = mock(Object.class);
    setState(mSrc2, NOT_CLOSED, FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);
=====================================================================
Found a 7 line (75 tokens) duplication in the following files: 
Starting at line 275 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 336 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    ArgumentCaptor<HashMap> captor = ArgumentCaptor.forClass(HashMap.class);
    verify(mProducerListener)
        .onProducerFinishWithSuccess(eq(mProducerContext), eq(PRODUCER_NAME), captor.capture());
    Map<String, String> resultMap = captor.getValue();
    assertEquals("false", resultMap.get(DiskCacheReadProducer.EXTRA_CACHED_VALUE_FOUND));
=====================================================================
Found a 8 line (75 tokens) duplication in the following files: 
Starting at line 712 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 811 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

        newFetcher(recordingNetworkFetcher, false, 1, 0, true, INFINITE_REQUEUE, false, false);

    PriorityFetchState<FetchState> hipri1 = fetch(fetcher, "hipri1", callback, true);
    PriorityFetchState<FetchState> hipri2 = fetch(fetcher, "hipri2", callback, true);

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
    assertThat(fetcher.getHiPriQueue()).containsExactly(hipri2);
    assertThat(fetcher.getLowPriQueue()).isEmpty();
=====================================================================
Found a 9 line (75 tokens) duplication in the following files: 
Starting at line 475 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 334 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> originalRef4 = newReference(1000);
    CloseableReference<Integer> valueRef4 = mCache.cache(KEYS[4], originalRef4);
    originalRef4.close();
    assertTotalSize(3, 1000);
    assertExclusivelyOwnedSize(0, 0);
    assertSharedWithCount(KEYS[1], 400, 1);
    assertSharedWithCount(KEYS[2], 500, 1);
    assertSharedWithCount(KEYS[3], 100, 1);
    assertNotCached(KEYS[4], 1000);
=====================================================================
Found a 13 line (75 tokens) duplication in the following files: 
Starting at line 1154 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1246 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    assertMFUExclusivelyOwned(KEYS[1], 10);

    // insert item2 to LFU
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2a = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
    valueRef2a.close();

    // insert item3 to LFU
    CloseableReference<Integer> originalRef3 = newReference(30);
    CloseableReference<Integer> valueRef3a = mCache.cache(KEYS[3], originalRef3);
    originalRef3.close();
    valueRef3a.close();
=====================================================================
Found a 11 line (75 tokens) duplication in the following files: 
Starting at line 1648 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1662 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1717 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

            || mCache.mMostFrequentlyUsedExclusiveEntries.contains(key));
    AbstractAdaptiveCountingMemoryCache.Entry<String, Integer> entry =
        mCache.mCachedEntries.get(key);
    assertNotNull("entry not found in the cache", entry);
    assertEquals("key mismatch", key, entry.key);
    assertEquals("value mismatch", value, entry.valueRef.get());
    assertEquals("client count greater than zero", 0, entry.clientCount);
    assertFalse("entry is an orphan", entry.isOrphan);
  }

  private void assertMFUExclusivelyOwned(String key, Integer value) {
=====================================================================
Found a 9 line (75 tokens) duplication in the following files: 
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRoundedCornersFragment.java
Starting at line 54 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeSpanSimpleTextFragment.java

    final Spinner scaleType = view.findViewById(R.id.scaleType);
    final SimpleScaleTypeAdapter scaleTypeAdapter = SimpleScaleTypeAdapter.createForAllScaleTypes();
    scaleType.setAdapter(scaleTypeAdapter);
    scaleType.setOnItemSelectedListener(
        new AdapterView.OnItemSelectedListener() {
          @Override
          public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
            final SimpleScaleTypeAdapter.Entry spinnerEntry =
                (SimpleScaleTypeAdapter.Entry) scaleTypeAdapter.getItem(position);
=====================================================================
Found a 9 line (74 tokens) duplication in the following files: 
Starting at line 441 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 467 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 494 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 532 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 571 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 582 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 609 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 620 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set final image (immediate)
    dh.setImage(mActualImage2, 1f, true);
=====================================================================
Found a 16 line (74 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 12 line (74 tokens) duplication in the following files: 
Starting at line 180 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java
Starting at line 291 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java

    Assert.assertTrue(mPool.mInUseValues.contains(b2));
    mStats.refresh();
    Assert.assertEquals(ImmutableMap.of(2, new IntPair(1, 0)), mStats.mBucketStats);
    Assert.assertEquals(0, mStats.mFreeBytes);
    Assert.assertEquals(2, mStats.mUsedBytes);
    Assert.assertEquals(0, mStats.mFreeCount);
    Assert.assertEquals(1, mStats.mUsedCount);
  }

  // Get via alloc - exception on max size hard cap
  @Test
  public void testGet_AllocFailure() throws Exception {
=====================================================================
Found a 12 line (74 tokens) duplication in the following files: 
Starting at line 195 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 221 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 246 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 271 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    Assert.assertTrue(!mFinalImageReferenceClone.isValid());
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testCacheIntermediateImageAsBetterScan() {
=====================================================================
Found a 11 line (74 tokens) duplication in the following files: 
Starting at line 130 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BranchOnSeparateImagesProducerTest.java
Starting at line 203 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BranchOnSeparateImagesProducerTest.java

    verify(mConsumer).onNewResult(firstProducerEncodedImage, Consumer.NO_FLAGS);

    EncodedImage intermediateEncodedImage =
        new EncodedImage(mIntermediateResult.getByteBufferRef());
    intermediateEncodedImage.setRotationAngle(-1);
    intermediateEncodedImage.setWidth(WIDTH / 2);
    intermediateEncodedImage.setHeight(HEIGHT / 2);
    mSecondProducerConsumer.onNewResult(intermediateEncodedImage, Consumer.NO_FLAGS);
    verify(mConsumer).onNewResult(intermediateEncodedImage, Consumer.NO_FLAGS);
    EncodedImage secondProducerEncodedImage =
        new EncodedImage(mSecondProducerFinalResult.getByteBufferRef());
=====================================================================
Found a 15 line (74 tokens) duplication in the following files: 
Starting at line 675 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 499 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

            300 /* cache max size */,
            CACHE_MAX_COUNT,
            CACHE_EVICTION_QUEUE_MAX_SIZE,
            CACHE_EVICTION_QUEUE_MAX_COUNT,
            CACHE_ENTRY_MAX_SIZE,
            PARAMS_CHECK_INTERVAL_MS);
    when(mParamsSupplier.get()).thenReturn(mParams);

    PowerMockito.when(SystemClock.uptimeMillis()).thenReturn(PARAMS_CHECK_INTERVAL_MS);
    mCache.get(KEY);
    inOrder.verify(mParamsSupplier).get();

    assertTotalSize(0, 0);
    assertExclusivelyOwnedSize(0, 0);
    verify(mReleaser).release(400);
=====================================================================
Found a 9 line (74 tokens) duplication in the following files: 
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\main\java\com\facebook\imagepipeline\memory\AshmemMemoryChunk.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\main\java\com\facebook\imagepipeline\memory\AshmemMemoryChunk.java

  public synchronized int write(
      final int memoryOffset, final byte[] byteArray, final int byteArrayOffset, final int count) {
    Preconditions.checkNotNull(byteArray);
    Preconditions.checkNotNull(mByteBuffer);
    final int actualCount = MemoryChunkUtil.adjustByteCount(memoryOffset, count, getSize());
    MemoryChunkUtil.checkBounds(
        memoryOffset, byteArray.length, byteArrayOffset, actualCount, getSize());
    mByteBuffer.position(memoryOffset);
    mByteBuffer.put(byteArray, byteArrayOffset, actualCount);
=====================================================================
Found a 10 line (74 tokens) duplication in the following files: 
Starting at line 26 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 26 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java

@RunWith(RobolectricTestRunner.class)
@Config(manifest = Config.NONE)
public class MemoryPooledByteBufferFactoryTest {
  private MemoryPooledByteBufferFactory mBufferFactory;
  private PoolStats mBufferStats;
  private byte[] mData;

  @Before
  public void setup() {
    mData = new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
=====================================================================
Found a 17 line (74 tokens) duplication in the following files: 
Starting at line 69 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\SimpleScaleTypeAdapter.java
Starting at line 193 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineBitmapFactoryFragment.java

  }

  @Override
  public long getItemId(int position) {
    return position;
  }

  @Override
  public View getView(int position, View convertView, ViewGroup parent) {
    final LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());

    final View view =
        convertView != null
            ? convertView
            : layoutInflater.inflate(android.R.layout.simple_spinner_dropdown_item, parent, false);

    final TextView textView = (TextView) view.findViewById(android.R.id.text1);
=====================================================================
Found a 11 line (73 tokens) duplication in the following files: 
Starting at line 479 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 517 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 544 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 556 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(false, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_STARTING, fadeDrawable.getTransitionState());
    assertEquals(250, fadeDrawable.getTransitionDuration());

    // initial state -> temporary image (immediate) -> final image (non-immediate)
    // reset hierarchy to initial state, show progress bar
    dh.reset();
=====================================================================
Found a 13 line (73 tokens) duplication in the following files: 
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\CloseableProducerToDataSourceAdapterTest.java
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

        CloseableProducerToDataSourceAdapter.create(
            mProducer, mSettableProducerContext, mRequestListener);
    ArgumentCaptor<Consumer> captor = ArgumentCaptor.forClass(Consumer.class);
    verify(mRequestListener).onRequestStart(mSettableProducerContext);
    verify(mProducer).produceResults(captor.capture(), any(SettableProducerContext.class));
    mInternalConsumer = captor.getValue();

    mDataSource.subscribe(mDataSubscriber1, CallerThreadExecutor.getInstance());
  }

  /* reference assertions */

  private static <T> void assertReferenceCount(int expectedCount, CloseableReference<T> ref) {
=====================================================================
Found a 14 line (73 tokens) duplication in the following files: 
Starting at line 121 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java
Starting at line 189 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java

    when(mPooledByteBufferFactory.newByteBuffer(any(InputStream.class), eq(INPUT_STREAM_LENGTH)))
        .thenThrow(mException);
    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, false);
  }

  @After
  public void tearDown() throws Exception {
    mFile.delete();
  }
}
=====================================================================
Found a 8 line (73 tokens) duplication in the following files: 
Starting at line 612 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 712 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    valueRef1.close();
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
    valueRef2.close();
    CloseableReference<Integer> originalRef3 = newReference(30);
    CloseableReference<Integer> valueRef3 = mCache.cache(KEYS[3], originalRef3);
    originalRef3.close();
=====================================================================
Found a 10 line (73 tokens) duplication in the following files: 
Starting at line 99 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\test\java\com\facebook\imagepipeline\platform\GingerbreadPurgeableDecoderTest.java
Starting at line 109 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\test\java\com\facebook\imagepipeline\platform\KitKatPurgeableDecoderTest.java

            any(FileDescriptor.class), any(Rect.class), any(BitmapFactory.Options.class)))
        .thenReturn(mBitmap);

    mInputBuf = new byte[LENGTH];
    PooledByteBuffer input = new TrivialPooledByteBuffer(mInputBuf, POINTER);
    mByteBufferRef = CloseableReference.of(input);
    mEncodedImage = new EncodedImage(mByteBufferRef);

    mDecodeBuf = new byte[LENGTH + 2];
    mDecodeBufRef = CloseableReference.of(mDecodeBuf, mock(ResourceReleaser.class));
=====================================================================
Found a 12 line (73 tokens) duplication in the following files: 
Starting at line 20 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\AnimationApplication.java
Starting at line 20 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomableapp\src\main\java\com\facebook\samples\zoomableapp\ZoomableApplication.java

public class AnimationApplication extends Application {
  @Override
  public void onCreate() {
    super.onCreate();
    FLog.setMinimumLoggingLevel(FLog.VERBOSE);
    Set<RequestListener> listeners = new HashSet<>();
    listeners.add(new RequestLoggingListener());
    ImagePipelineConfig config =
        ImagePipelineConfig.newBuilder(this).setRequestListeners(listeners).build();
    Fresco.initialize(this, config);
  }
}
=====================================================================
Found a 12 line (72 tokens) duplication in the following files: 
Starting at line 175 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 202 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 170 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 197 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    resetInteractions();
    if (fadeUpToLayer) {
      mFadeDrawable.fadeUpToLayer(1);
    } else {
      mFadeDrawable.fadeToLayer(1);
    }
    Assert.assertEquals(fadeUpToLayer, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    verify(mCallback).invalidateDrawable(mFadeDrawable);

    mFadeDrawable.finishTransitionImmediately();
=====================================================================
Found a 20 line (72 tokens) duplication in the following files: 
Starting at line 38 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\references\DefaultCloseableReference.java
Starting at line 36 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\references\FinalizerCloseableReference.java

  }

  @Override
  protected void finalize() throws Throwable {
    try {
      // We put synchronized here so that lint doesn't warn about accessing mIsClosed, which is
      // guarded by this. Lint isn't aware of finalize semantics.
      synchronized (this) {
        if (mIsClosed) {
          return;
        }
      }

      T ref = mSharedReference.get();
      FLog.w(
          TAG,
          "Finalized without closing: %x %x (type = %s)",
          System.identityHashCode(this),
          System.identityHashCode(mSharedReference),
          ref == null ? null : ref.getClass().getName());
=====================================================================
Found a 12 line (72 tokens) duplication in the following files: 
Starting at line 102 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 117 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 132 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 195 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 221 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 246 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 271 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 286 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    verify(mConsumer).onNewResult(mFinalImageReference, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testBitmapMemoryCacheGetNotFoundInputProducerNotFound() {
=====================================================================
Found a 12 line (72 tokens) duplication in the following files: 
Starting at line 166 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 212 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 227 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 242 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    Assert.assertTrue(EncodedImage.isValid(mFinalEncodedImageClone));
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(EncodedMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testEncodedMemoryCacheGetNotFoundInputProducerSuccessButResultNotCacheable() {
=====================================================================
Found a 13 line (72 tokens) duplication in the following files: 
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\NetworkFetchProducerTest.java
Starting at line 159 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\NetworkFetchProducerTest.java

    when(mNetworkFetcher.shouldPropagate(any(FetchState.class))).thenReturn(false);
    final BlockingInputStream inputStream = new BlockingInputStream();
    final Future requestHandlerFuture = performResponse(inputStream, -1, callback);

    // Consumer should not be notified before any data is read
    inputStream.waitUntilReadingThreadBlocked();
    verify(mPooledByteBufferFactory).newOutputStream();
    verify(mConsumer, never()).onNewResult(any(CloseableReference.class), anyInt());
    verifyPooledByteBufferUsed(0);

    // Allow NetworkFetchProducer to read 1024 bytes and check that consumer is not notified
    inputStream.increaseBytesToRead(1024);
    inputStream.waitUntilReadingThreadBlocked();
=====================================================================
Found a 12 line (71 tokens) duplication in the following files: 
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\preparation\DefaultBitmapFramePreparerTest.java
Starting at line 132 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\preparation\DefaultBitmapFramePreparerTest.java

            1, BACKEND_INTRINSIC_WIDTH, BACKEND_INTRINSIC_HEIGHT))
        .thenReturn(mBitmapReference);
    when(mBitmapFrameRenderer.renderFrame(1, mBitmap)).thenReturn(true);

    mDefaultBitmapFramePreparer.prepareFrame(mBitmapFrameCache, mAnimationBackend, 1);

    mExecutorService.getScheduledQueue().runNextPendingCommand();

    verify(mBitmapFrameCache, times(2)).contains(1);
    verify(mBitmapFrameCache)
        .getBitmapToReuseForFrame(1, BACKEND_INTRINSIC_WIDTH, BACKEND_INTRINSIC_HEIGHT);
    verify(mBitmapFrameRenderer).renderFrame(1, mBitmap);
=====================================================================
Found a 9 line (71 tokens) duplication in the following files: 
Starting at line 146 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 182 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java

    Bitmap mockBitmap = MockBitmapFactory.create(50, 50, DEFAULT_BITMAP_CONFIG);

    // Expect a call to GifImage.createFromByteBuffer
    TrivialBufferPooledByteBuffer byteBuffer = createDirectByteBuffer();
    when(mGifImageMock.decodeFromByteBuffer(
            eq(byteBuffer.getByteBuffer()), any(ImageDecodeOptions.class)))
        .thenReturn(mockGifImage);
    when(mockGifImage.getWidth()).thenReturn(50);
    when(mockGifImage.getHeight()).thenReturn(50);
=====================================================================
Found a 9 line (71 tokens) duplication in the following files: 
Starting at line 146 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 182 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

    Bitmap mockBitmap = MockBitmapFactory.create(50, 50, DEFAULT_BITMAP_CONFIG);

    // Expect a call to WebPImage.createFromByteBuffer
    TrivialBufferPooledByteBuffer byteBuffer = createDirectByteBuffer();
    when(mWebPImageMock.decodeFromByteBuffer(
            eq(byteBuffer.getByteBuffer()), any(ImageDecodeOptions.class)))
        .thenReturn(mockWebPImage);
    when(mockWebPImage.getWidth()).thenReturn(50);
    when(mockWebPImage.getHeight()).thenReturn(50);
=====================================================================
Found a 6 line (71 tokens) duplication in the following files: 
Starting at line 341 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 327 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(204, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(FadeDrawable.TRANSITION_RUNNING, mFadeDrawable.mTransitionState);
    inOrder.verify(mLayers[0]).mutate();
    inOrder.verify(mLayers[0]).setAlpha(128);
    inOrder.verify(mLayers[0]).draw(mCanvas);
    inOrder.verify(mLayers[1]).draw(mCanvas);
=====================================================================
Found a 10 line (71 tokens) duplication in the following files: 
Starting at line 439 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 485 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

    assertFalse(bitmapMemoryCacheKeyPredicate.apply(dummyCacheKey));

    ArgumentCaptor<Predicate> encodedMemoryCachePredicateCaptor =
        ArgumentCaptor.forClass(Predicate.class);
    verify(mEncodedMemoryCache).removeAll(encodedMemoryCachePredicateCaptor.capture());
    Predicate<CacheKey> encodedMemoryCacheKeyPredicate =
        encodedMemoryCachePredicateCaptor.getValue();
    SimpleCacheKey simpleCacheKey1 = new SimpleCacheKey(uriString);
    SimpleCacheKey simpleCacheKey2 = new SimpleCacheKey("rubbish");
    assertTrue(encodedMemoryCacheKeyPredicate.apply(simpleCacheKey1));
=====================================================================
Found a 8 line (71 tokens) duplication in the following files: 
Starting at line 102 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 173 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    verify(mConsumer).onNewResult(mFinalImageReference, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
=====================================================================
Found a 11 line (71 tokens) duplication in the following files: 
Starting at line 683 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 874 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 948 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

            false /* retryLowPriConnectionException */);

    PriorityFetchState<FetchState> hipri1 = fetch(fetcher, "hipri1", callback, true);

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
    assertThat(fetcher.getHiPriQueue()).isEmpty();
    assertThat(fetcher.getLowPriQueue()).isEmpty();

    // Simulate a failure in hipri1.
    getOnlyElement(recordingNetworkFetcher.callbacks.get(hipri1.delegatedState))
        .onFailure(new PriorityNetworkFetcher.NonrecoverableException("HTTP 403"));
=====================================================================
Found a 15 line (71 tokens) duplication in the following files: 
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java
Starting at line 155 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

        .process(mSourceBitmap, mPlatformBitmapFactory);
    postprocessorConsumer.onNewResult(mSourceCloseableImageRef, Consumer.IS_LAST);
    mSourceCloseableImageRef.close();
    mTestExecutorService.runUntilIdle();

    mInOrder
        .verify(mProducerListener)
        .onProducerStart(mProducerContext, PostprocessorProducer.NAME);
    mInOrder.verify(mPostprocessor).process(mSourceBitmap, mPlatformBitmapFactory);
    mInOrder
        .verify(mProducerListener)
        .requiresExtraMap(mProducerContext, PostprocessorProducer.NAME);
    mInOrder
        .verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PostprocessorProducer.NAME, mExtraMap);
=====================================================================
Found a 11 line (70 tokens) duplication in the following files: 
Starting at line 222 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\main\java\com\facebook\imagepipeline\animated\impl\AnimatedDrawableBackendImpl.java
Starting at line 140 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\main\java\com\facebook\animated\webpdrawable\WebpAnimationBackend.java

  private synchronized Bitmap prepareTempBitmapForThisSize(int width, int height) {
    // Different gif frames can be different size,
    // So we need to ensure we can fit next frame to temporary bitmap
    if (mTempBitmap != null
        && (mTempBitmap.getWidth() < width || mTempBitmap.getHeight() < height)) {
      clearTempBitmap();
    }
    if (mTempBitmap == null) {
      mTempBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
    }
    mTempBitmap.eraseColor(Color.TRANSPARENT);
=====================================================================
Found a 23 line (70 tokens) duplication in the following files: 
Starting at line 314 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 243 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ForwardingDrawable.java

  }

  /** Drawable.Callback methods */
  @Override
  public void invalidateDrawable(Drawable who) {
    invalidateSelf();
  }

  @Override
  public void scheduleDrawable(Drawable who, Runnable what, long when) {
    scheduleSelf(what, when);
  }

  @Override
  public void unscheduleDrawable(Drawable who, Runnable what) {
    unscheduleSelf(what);
  }

  /** TransformationCallbackSetter method */
  @Override
  public void setTransformCallback(TransformCallback transformCallback) {
    mTransformCallback = transformCallback;
  }
=====================================================================
Found a 10 line (70 tokens) duplication in the following files: 
Starting at line 175 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 202 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 240 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 170 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 197 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 235 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    resetInteractions();
    if (fadeUpToLayer) {
      mFadeDrawable.fadeUpToLayer(1);
    } else {
      mFadeDrawable.fadeToLayer(1);
    }
    Assert.assertEquals(fadeUpToLayer, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
=====================================================================
Found a 10 line (70 tokens) duplication in the following files: 
Starting at line 64 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListenerTest.java
Starting at line 99 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListenerTest.java
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListenerTest.java
Starting at line 158 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListenerTest.java

    when(mImagePerfState.getImageLoadStatus()).thenReturn(ImageLoadStatus.SUCCESS);

    when(mMonotonicClock.now()).thenReturn(imageReleaseTime);
    mListener.onRelease(CONTROLLER_ID);
    expectedNumOfTimestamps++;

    verify(mMonotonicClock, times(expectedNumOfTimestamps)).now();
    verify(mImagePerfMonitor)
        .notifyStatusUpdated(eq(mImagePerfState), eq(ImageLoadStatus.REQUESTED));
    verify(mImagePerfMonitor).notifyStatusUpdated(eq(mImagePerfState), eq(ImageLoadStatus.SUCCESS));
=====================================================================
Found a 7 line (70 tokens) duplication in the following files: 
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java
Starting at line 180 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java

    Assert.assertTrue(mPool.mInUseValues.contains(b1));
    mStats.refresh();
    Assert.assertEquals(ImmutableMap.of(2, new IntPair(1, 0)), mStats.mBucketStats);
    Assert.assertEquals(0, mStats.mFreeBytes);
    Assert.assertEquals(2, mStats.mUsedBytes);
    Assert.assertEquals(0, mStats.mFreeCount);
    Assert.assertEquals(1, mStats.mUsedCount);
=====================================================================
Found a 11 line (70 tokens) duplication in the following files: 
Starting at line 398 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SwallowResultProducerTest.java

      mResults = results;
    }

    @Override
    public Void answer(InvocationOnMock invocation) throws Throwable {
      Consumer consumer = (Consumer) invocation.getArguments()[0];
      Iterator<CloseableReference<CloseableImage>> iterator = mResults.iterator();
      while (iterator.hasNext()) {
        CloseableReference<CloseableImage> result = iterator.next();
        consumer.onNewResult(
            result, iterator.hasNext() ? mStatusFlags : Consumer.IS_LAST | mStatusFlags);
=====================================================================
Found a 7 line (70 tokens) duplication in the following files: 
Starting at line 193 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 259 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

    verify(mConsumer3, never()).onNewResult(mIntermediateImageReference1, Consumer.NO_FLAGS);

    mForwardingConsumer2.onNewResult(mIntermediateImageReference2, Consumer.NO_FLAGS);
    verify(mConsumer3).onNewResult(mIntermediateImageReference2, Consumer.NO_FLAGS);
    verify(mConsumer1, never()).onNewResult(mIntermediateImageReference2, Consumer.NO_FLAGS);
    verify(mConsumer2, never()).onNewResult(mIntermediateImageReference2, Consumer.NO_FLAGS);
    assertTrue(mMultiplexProducer.mMultiplexers.size() == 2);
=====================================================================
Found a 33 line (70 tokens) duplication in the following files: 
Starting at line 452 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 334 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

    maybeNotifyExclusiveEntriesRemoval(oldLFUExclusives, oldMFUExclusives);
    maybeUpdateCacheParams();
  }

  /**
   * Check if any items from the cache whose key matches the specified predicate.
   *
   * @param predicate returns true if an item with the given key matches
   * @return true is any items matches from the cache
   */
  @Override
  public synchronized boolean contains(Predicate<K> predicate) {
    return !mCachedEntries.getMatchingEntries(predicate).isEmpty();
  }

  /**
   * Check if an item with the given cache key is currently in the cache.
   *
   * @param key returns true if an item with the given key matches
   * @return true is any items matches from the cache
   */
  @Override
  public synchronized boolean contains(K key) {
    return mCachedEntries.contains(key);
  }

  /**
   * Trims the cache according to the specified trimming strategy and the given trim type. We first
   * trim the LFU cache, if we need to trim more, we continue to trim the MFU cache.
   */
  @Override
  public void trim(MemoryTrimType trimType) {
    ArrayList<Entry<K, V>> oldLFUEntries;
=====================================================================
Found a 9 line (70 tokens) duplication in the following files: 
Starting at line 228 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 161 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(0, 0);
    CloseableReference<Integer> reusedRef = mCache.reuse(KEY);
    assertNull(reusedRef);
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(0, 0);
    verify(mEntryStateObserver, never()).onExclusivityChanged((String) any(), anyBoolean());
=====================================================================
Found a 25 line (70 tokens) duplication in the following files: 
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\color\ColorImageExample.java
Starting at line 112 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\keyframes\KeyframesDecoderExample.java
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\svg\SvgDecoderExample.java

    }

    @Override
    public int getSizeInBytes() {
      return 0;
    }

    @Override
    public void close() {
      mClosed = true;
    }

    @Override
    public boolean isClosed() {
      return mClosed;
    }

    @Override
    public void setImageExtras(@Nullable Map<String, Object> extras) {}

    @Override
    public void setImageExtra(String extra, Object value) {}

    @Override
    public boolean isStateful() {
=====================================================================
Found a 8 line (69 tokens) duplication in the following files: 
Starting at line 106 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 133 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100, mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING, mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
=====================================================================
Found a 8 line (69 tokens) duplication in the following files: 
Starting at line 123 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 140 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100, mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING, mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
=====================================================================
Found a 8 line (69 tokens) duplication in the following files: 
Starting at line 157 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 99 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100, mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING, mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
=====================================================================
Found a 15 line (69 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 91 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 25 line (69 tokens) duplication in the following files: 
Starting at line 129 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java
Starting at line 157 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java

        return fetchDecodedImage(imageRequest, callerContext, requestLevel);
      }

      @Override
      public String toString() {
        return Objects.toStringHelper(this).add("uri", imageRequest.getSourceUri()).toString();
      }
    };
  }

  /**
   * Returns a DataSource supplier that will on get submit the request for execution and return a
   * DataSource representing the pending results of the task.
   *
   * @param imageRequest the request to submit (what to execute).
   * @param callerContext the caller context of the caller of data source supplier
   * @param requestLevel which level to look down until for the image
   * @param requestListener additional image request listener independent of ImageRequest listeners
   * @return a DataSource representing pending results and completion of the request
   */
  public Supplier<DataSource<CloseableReference<CloseableImage>>> getDataSourceSupplier(
      final ImageRequest imageRequest,
      final @Nullable Object callerContext,
      final ImageRequest.RequestLevel requestLevel,
      final @Nullable RequestListener requestListener) {
=====================================================================
Found a 22 line (69 tokens) duplication in the following files: 
Starting at line 160 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\CloseableProducerToDataSourceAdapterTest.java
Starting at line 129 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

    verifyReferenceCount(null);
    verifyNoMoreInteractionsAndReset();
  }

  /* event testing helpers */

  private void testSubscribe(int expected) {
    mDataSource.subscribe(mDataSubscriber2, CallerThreadExecutor.getInstance());
    switch (expected) {
      case NO_INTERACTIONS:
        break;
      case ON_NEW_RESULT:
        verify(mDataSubscriber2).onNewResult(mDataSource);
        break;
      case ON_FAILURE:
        verify(mDataSubscriber2).onFailure(mDataSource);
        break;
    }
    verifyNoMoreInteractionsAndReset();
  }

  private void testNewResult(
=====================================================================
Found a 7 line (69 tokens) duplication in the following files: 
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java
Starting at line 291 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java

    Assert.assertTrue(mPool.mInUseValues.contains(b1));
    mStats.refresh();
    Assert.assertEquals(ImmutableMap.of(2, new IntPair(1, 0)), mStats.mBucketStats);
    Assert.assertEquals(0, mStats.mFreeBytes);
    Assert.assertEquals(2, mStats.mUsedBytes);
    Assert.assertEquals(0, mStats.mFreeCount);
    Assert.assertEquals(1, mStats.mUsedCount);
=====================================================================
Found a 7 line (69 tokens) duplication in the following files: 
Starting at line 168 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java
Starting at line 208 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java

    Assert.assertEquals(2, b1.length);
    mStats.refresh();
    Assert.assertEquals(ImmutableMap.of(2, new IntPair(0, 1)), mStats.mBucketStats);
    Assert.assertEquals(2, mStats.mFreeBytes);
    Assert.assertEquals(0, mStats.mUsedBytes);
    Assert.assertEquals(1, mStats.mFreeCount);
    Assert.assertEquals(0, mStats.mUsedCount);
=====================================================================
Found a 8 line (69 tokens) duplication in the following files: 
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 301 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 318 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, false);
=====================================================================
Found a 13 line (69 tokens) duplication in the following files: 
Starting at line 173 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 379 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 296 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    doAnswer(new ProduceResultsNewResultAnswer(null))
        .when(mInputProducer)
        .produceResults(any(Consumer.class), eq(mProducerContext));
  }

  private void setupInputProducerFailure() {
    doAnswer(new ProduceResultsFailureAnswer())
        .when(mInputProducer)
        .produceResults(any(Consumer.class), eq(mProducerContext));
  }

  private static class ProduceResultsNewResultAnswer implements Answer<Void> {
    private final CloseableReference<CloseableImage> mResult;
=====================================================================
Found a 13 line (69 tokens) duplication in the following files: 
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 164 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java

    setupNetworkUri();
    Consumer<EncodedImage> consumer = produceResults();

    when(mJobScheduler.updateJob(mEncodedImage, Consumer.IS_LAST)).thenReturn(true);
    consumer.onNewResult(mEncodedImage, Consumer.IS_LAST);

    verify(mJobScheduler).updateJob(mEncodedImage, Consumer.IS_LAST);
    verify(mJobScheduler).scheduleJob();
    verifyZeroInteractions(mProgressiveJpegParser);
  }

  @Test
  public void testNewResult_Final_Local() {
=====================================================================
Found a 10 line (69 tokens) duplication in the following files: 
Starting at line 1102 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1309 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    assertLFUExclusivelyOwned(KEYS[2], 20);

    // insert item3 to MFU
    CloseableReference<Integer> originalRef3 = newReference(30);
    CloseableReference<Integer> valueRef3a = mCache.cache(KEYS[3], originalRef3);
    CloseableReference<Integer> valueRef3b = mCache.get(KEYS[3]);
    originalRef3.close();
    valueRef3a.close();
    valueRef3b.close();
    assertMFUExclusivelyOwned(KEYS[1], 10);
=====================================================================
Found a 7 line (69 tokens) duplication in the following files: 
Starting at line 31 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferTest.java
Starting at line 30 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferTest.java

@RunWith(RobolectricTestRunner.class)
@Config(manifest = Config.NONE)
public class MemoryPooledByteBufferTest {
  private static final byte[] BYTES = new byte[] {1, 4, 5, 0, 100, 34, 0, 1, -1, -1};
  private static final int BUFFER_LENGTH = BYTES.length - 2;

  @Mock private AshmemMemoryChunkPool mAshmemPool;
=====================================================================
Found a 9 line (69 tokens) duplication in the following files: 
Starting at line 21 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\androidTest\java\com\facebook\samples\scrollperf\data\impl\LocalResourceSimpleAdapterTest.java
Starting at line 32 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\androidTest\java\com\facebook\samples\scrollperf\data\impl\LocalResourceSimpleAdapterTest.java

  public void testEagerAdapter() {
    final Context context = getContext();
    final Resources res = context.getResources();
    final String[] uris = res.getStringArray(R.array.local_uri_test);
    Assert.assertNotNull(uris);
    SimpleAdapter<Uri> simpleAdapter =
        LocalResourceSimpleAdapter.getEagerAdapter(context, R.array.local_uri_test);
    checkSimpleAdapterData(simpleAdapter, uris.length);
    Assert.assertFalse(simpleAdapter.isLazy());
=====================================================================
Found a 13 line (68 tokens) duplication in the following files: 
Starting at line 232 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 278 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java

        ImageDecodeOptions.newBuilder().setDecodePreviewFrame(true).build();
    EncodedImage encodedImage =
        new EncodedImage(CloseableReference.of(byteBuffer, FAKE_RESOURCE_RELEASER));
    encodedImage.setImageFormat(ImageFormat.UNKNOWN);
    CloseableAnimatedImage closeableImage =
        (CloseableAnimatedImage)
            mAnimatedImageFactory.decodeGif(
                encodedImage, imageDecodeOptions, DEFAULT_BITMAP_CONFIG);

    // Verify we got the right result
    AnimatedImageResult imageResult = closeableImage.getImageResult();
    assertSame(mockGifImage, imageResult.getImage());
    assertNotNull(imageResult.getPreviewBitmap());
=====================================================================
Found a 13 line (68 tokens) duplication in the following files: 
Starting at line 233 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 278 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

        ImageDecodeOptions.newBuilder().setDecodePreviewFrame(true).build();
    EncodedImage encodedImage =
        new EncodedImage(CloseableReference.of(byteBuffer, FAKE_RESOURCE_RELEASER));
    encodedImage.setImageFormat(ImageFormat.UNKNOWN);
    CloseableAnimatedImage closeableImage =
        (CloseableAnimatedImage)
            mAnimatedImageFactory.decodeWebP(
                encodedImage, imageDecodeOptions, DEFAULT_BITMAP_CONFIG);

    // Verify we got the right result
    AnimatedImageResult imageResult = closeableImage.getImageResult();
    assertSame(mockWebPImage, imageResult.getImage());
    assertNotNull(imageResult.getPreviewBitmap());
=====================================================================
Found a 14 line (68 tokens) duplication in the following files: 
Starting at line 114 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\AbstractDataSourceTest.java
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\AbstractDataSourceTest.java

    subscribe();
    // last result
    Value value = mock(Value.class);
    mDataSource.setResult(value, LAST);
    verifySubscribers(ON_NEW_RESULT);
    verifyState(mDataSource, NOT_CLOSED, FINISHED, WITH_RESULT, value, NOT_FAILED, null);
    // close
    mDataSource.close();
    verifySubscribers(NO_INTERACTIONS);
    verifyState(mDataSource, CLOSED, FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
  }

  @Test
  public void testLifeCycle_Failure_Close() {
=====================================================================
Found a 7 line (68 tokens) duplication in the following files: 
Starting at line 34 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 65 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    DataSubscriber<Object> subscriber3 = verifyGetAndSubscribe(mDataSourceSupplier3, mSrc3);

    setState(mSrc2, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, mock(Throwable.class));
    subscriber2.onFailure(mSrc2);
    mInOrder.verify(mSrc2).close();
    verifySubscriber(dataSource, mSrc2, NO_INTERACTIONS);
    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
=====================================================================
Found a 11 line (68 tokens) duplication in the following files: 
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java

    verify(mConsumer).onNewResult(argumentCaptor.capture(), eq(Consumer.IS_LAST));
    EncodedImage encodedImage = argumentCaptor.getValue();
    assertTrue(EncodedImage.isValid(encodedImage));
    assertEquals(DefaultImageFormats.WEBP_SIMPLE, encodedImage.getImageFormat());
    assertEquals(0, encodedImage.getRotationAngle());
    assertEquals(-1, encodedImage.getWidth());
    assertEquals(-1, encodedImage.getHeight());
  }

  @Test
  public void testOnNewResultNotLastNotJpeg() {
=====================================================================
Found a 9 line (68 tokens) duplication in the following files: 
Starting at line 102 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 117 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 195 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 221 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 246 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 271 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 286 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 335 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    verify(mConsumer).onNewResult(mFinalImageReference, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }
=====================================================================
Found a 9 line (68 tokens) duplication in the following files: 
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 227 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 242 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    Assert.assertTrue(EncodedImage.isValid(mFinalEncodedImageClone));
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(EncodedMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }
=====================================================================
Found a 7 line (68 tokens) duplication in the following files: 
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java

    when(mPooledByteBufferFactory.newByteBuffer(any(InputStream.class))).thenThrow(mException);
    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, false);
  }
=====================================================================
Found a 6 line (68 tokens) duplication in the following files: 
Starting at line 130 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 158 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 224 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    PriorityFetchState<FetchState> dontcare1 = fetch(fetcher, "dontcare1", callback, true);
    fetch(fetcher, "dontcare2", callback, true);

    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, true);
    PriorityFetchState<FetchState> two = fetch(fetcher, "2", callback, true);
    PriorityFetchState<FetchState> three = fetch(fetcher, "3", callback, true);
=====================================================================
Found a 7 line (68 tokens) duplication in the following files: 
Starting at line 1214 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 1273 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    for (int i = 0; i < 2; i++) {
      assertThat(delegateFetcher.callbacks).hasSize(i + 1);
      FetchState lastFetched = getLast(delegateFetcher.callbacks.keys());
      assertThat(lastFetched.getUri().toString()).isEqualTo("uri1");
      getOnlyElement(delegateFetcher.callbacks.get(lastFetched))
          .onFailure(new IOException("Canceled"));
    }
=====================================================================
Found a 18 line (68 tokens) duplication in the following files: 
Starting at line 693 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 990 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1023 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  public void testRemoveAllMatchingPredicate() {
    // Cache has 4 entries; 2 for LFU and 2 for MFU
    // key is considered as MFU, if its accessCount > 1
    mCache =
        createDummyAdaptiveCountingMemoryCache(
            mParamsSupplier,
            mCacheTrimStrategy,
            mValueDescriptor,
            100,
            1,
            2,
            initialLFUCacheFractionPromil);

    // insert item1 to MFU
    CloseableReference<Integer> originalRef1 = newReference(10);
    CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);
    CloseableReference<Integer> valueRef1a = mCache.get(KEYS[1]);
    originalRef1.close();
=====================================================================
Found a 8 line (68 tokens) duplication in the following files: 
Starting at line 839 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 628 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    assertSharedWithCount(KEYS[5], 105, 1);
    assertSharedWithCount(KEYS[9], 109, 1);
    assertExclusivelyOwned(KEYS[8], 108);
    assertExclusivelyOwned(KEYS[2], 102);
    assertExclusivelyOwned(KEYS[7], 107);
    assertExclusivelyOwned(KEYS[3], 103);
    assertExclusivelyOwned(KEYS[6], 106);
    assertExclusivelyOwned(KEYS[4], 104);
=====================================================================
Found a 10 line (68 tokens) duplication in the following files: 
Starting at line 1623 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 710 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    AbstractAdaptiveCountingMemoryCache.Entry<String, Integer> entry =
        mCache.mCachedEntries.get(key);
    assertNotNull("entry not found in the cache", entry);
    assertEquals("key mismatch", key, entry.key);
    assertEquals("value mismatch", value, entry.valueRef.get());
    assertEquals("client count mismatch", count, entry.clientCount);
    assertFalse("entry is an orphan", entry.isOrphan);
  }

  private void assertSharedWithAccessCount(String key, Integer value, int count) {
=====================================================================
Found a 10 line (68 tokens) duplication in the following files: 
Starting at line 1649 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1663 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 721 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    AbstractAdaptiveCountingMemoryCache.Entry<String, Integer> entry =
        mCache.mCachedEntries.get(key);
    assertNotNull("entry not found in the cache", entry);
    assertEquals("key mismatch", key, entry.key);
    assertEquals("value mismatch", value, entry.valueRef.get());
    assertEquals("client count greater than zero", 0, entry.clientCount);
    assertFalse("entry is an orphan", entry.isOrphan);
  }

  private void assertMFUExclusivelyOwned(String key, Integer value) {
=====================================================================
Found a 21 line (68 tokens) duplication in the following files: 
Starting at line 146 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\main\java\com\facebook\imagepipeline\memory\NativeMemoryChunk.java
Starting at line 115 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\main\java\com\facebook\imagepipeline\memory\BufferMemoryChunk.java

              + Long.toHexString(mNativePtr));
      Preconditions.checkArgument(false);
    }

    // Case 2: other memory chunk < this memory chunk
    if (other.getUniqueId() < getUniqueId()) {
      synchronized (other) {
        synchronized (this) {
          doCopy(offset, other, otherOffset, count);
        }
      }
      return;
    }

    // Case 3: other memory chunk > this memory chunk
    synchronized (this) {
      synchronized (other) {
        doCopy(offset, other, otherOffset, count);
      }
    }
  }
=====================================================================
Found a 9 line (67 tokens) duplication in the following files: 
Starting at line 69 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java

    mSpec.width = makeMeasureSpec(410, AT_MOST);
    mSpec.height = makeMeasureSpec(310, EXACTLY);
    LayoutParams layoutParams1 = new LayoutParams(WRAP_CONTENT, MATCH_PARENT);
    AspectRatioMeasure.updateMeasureSpec(mSpec, 1.5f, layoutParams1, 10, 10);
    assertEquals(makeMeasureSpec(410, EXACTLY), mSpec.width);
    assertEquals(makeMeasureSpec(310, EXACTLY), mSpec.height);

    // width within limits
    mSpec.width = makeMeasureSpec(510, AT_MOST);
=====================================================================
Found a 17 line (67 tokens) duplication in the following files: 
Starting at line 493 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java
Starting at line 557 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java

    if (!mIsPrefetchEnabledSupplier.get()) {
      return DataSources.immediateFailedDataSource(PREFETCH_EXCEPTION);
    }
    try {
      Producer<Void> producerSequence =
          mProducerSequenceFactory.getEncodedImagePrefetchProducerSequence(imageRequest);
      return submitPrefetchRequest(
          producerSequence,
          imageRequest,
          ImageRequest.RequestLevel.FULL_FETCH,
          callerContext,
          priority,
          requestListener);
    } catch (Exception exception) {
      return DataSources.immediateFailedDataSource(exception);
    }
  }
=====================================================================
Found a 11 line (67 tokens) duplication in the following files: 
Starting at line 115 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\CloseableProducerToDataSourceAdapterTest.java
Starting at line 96 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

    CloseableReference.closeSafely(dataSourceRef);
    assertEquals("hasFailed", hasFailed, dataSource.hasFailed());
    if (failureCause == NPE) {
      assertNotNull("failure", dataSource.getFailureCause());
      assertSame("failure", NullPointerException.class, dataSource.getFailureCause().getClass());
    } else {
      assertSame("failure", failureCause, dataSource.getFailureCause());
    }
  }

  private void verifyReferenceCount(CloseableReference<Object> resultRef) {
=====================================================================
Found a 7 line (67 tokens) duplication in the following files: 
Starting at line 86 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\GenericByteArrayPoolTest.java
Starting at line 93 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\NativeMemoryChunkPoolTest.java

  public void testGetSizeInBytes() throws Exception {
    Assert.assertEquals(1, mPool.getSizeInBytes(1));
    Assert.assertEquals(32, mPool.getSizeInBytes(32));
    Assert.assertEquals(33, mPool.getSizeInBytes(33));
    Assert.assertEquals(64, mPool.getSizeInBytes(64));
    Assert.assertEquals(69, mPool.getSizeInBytes(69));
  }
=====================================================================
Found a 9 line (67 tokens) duplication in the following files: 
Starting at line 115 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 146 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java

    setupInputProducerNotFound();
    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
=====================================================================
Found a 8 line (67 tokens) duplication in the following files: 
Starting at line 132 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 173 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 195 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 221 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 246 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 271 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 335 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
=====================================================================
Found a 9 line (67 tokens) duplication in the following files: 
Starting at line 284 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 300 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    setupInputProducerNotFound();
    mBitmapMemoryCacheProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
=====================================================================
Found a 9 line (67 tokens) duplication in the following files: 
Starting at line 225 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 256 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    setupInputProducerNotFound();
    mEncodedMemoryCacheProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(EncodedMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
=====================================================================
Found a 16 line (67 tokens) duplication in the following files: 
Starting at line 72 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalExifThumbnailProducerTest.java
Starting at line 74 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java

    when(mImageRequest.getSourceUri()).thenReturn(mContentUri);
    doAnswer(
            new Answer() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                mCapturedEncodedImage =
                    EncodedImage.cloneOrNull((EncodedImage) invocation.getArguments()[0]);
                return null;
              }
            })
        .when(mConsumer)
        .onNewResult(notNull(EncodedImage.class), anyInt());
  }

  @Test
  public void testLocalContentUriFetchCancelled() {
=====================================================================
Found a 13 line (67 tokens) duplication in the following files: 
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 121 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> originalRef = newReference(100);
    mCache.cache(KEY, originalRef);
    // cache should make its own copy and closing the original reference after caching
    // should not affect the cached value
    originalRef.close();
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(0, 0);
    assertSharedWithCount(KEY, 100, 1);
    verify(mReleaser, never()).release(anyInt());
  }

  @Test
  public void testClosingClientReference() {
=====================================================================
Found a 9 line (67 tokens) duplication in the following files: 
Starting at line 155 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 177 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 155 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 177 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 155 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 177 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java

        mStats.getBucketStats());
  }

  // Assert that the first 'length' bytes of expected are the same as those in 'actual'
  private static void assertArrayEquals(byte[] expected, byte[] actual, int length) {
    Assert.assertTrue(expected.length >= length);
    Assert.assertTrue(actual.length >= length);
    for (int i = 0; i < length; i++) {
      Assert.assertEquals(expected[i], actual[i], i);
=====================================================================
Found a 22 line (67 tokens) duplication in the following files: 
Starting at line 113 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRecyclerViewFragment.java
Starting at line 114 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\VitoViewRecyclerFragment.java

      holder.mSimpleDraweeView.setImageRequest(imageRequest);
    }

    @Override
    public int getItemCount() {
      return mUris.size();
    }

    @Override
    public long getItemId(int position) {
      return mUris.get(position).hashCode();
    }

    public void setData(List<Uri> uris) {
      mUris = uris;
      notifyDataSetChanged();
    }
  }

  static class SimpleViewHolder extends RecyclerView.ViewHolder {

    private static final Random sRandom = new Random();
=====================================================================
Found a 10 line (66 tokens) duplication in the following files: 
Starting at line 112 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedSingleUsePostprocessorProducerTest.java

    RepeatedPostprocessorRunner repeatedPostprocessorRunner = getRunner();

    CloseableAnimatedImage sourceCloseableAnimatedImage = mock(CloseableAnimatedImage.class);
    CloseableReference<CloseableImage> sourceCloseableImageRef =
        CloseableReference.<CloseableImage>of(sourceCloseableAnimatedImage);
    postprocessorConsumer.onNewResult(sourceCloseableImageRef, Consumer.IS_LAST);
    sourceCloseableImageRef.close();
    mTestExecutorService.runUntilIdle();

    mInOrder.verify(mConsumer).onNewResult(any(CloseableReference.class), eq(Consumer.NO_FLAGS));
=====================================================================
Found a 6 line (66 tokens) duplication in the following files: 
Starting at line 377 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 392 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    dh.setRetry(new RuntimeException());
    assertEquals(ColorDrawable.class, actualImageSettableDrawable.getCurrent().getClass());
    assertEquals(true, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(FadeDrawable.TRANSITION_STARTING, fadeDrawable.getTransitionState());
    assertEquals(250, fadeDrawable.getTransitionDuration());
=====================================================================
Found a 16 line (66 tokens) duplication in the following files: 
Starting at line 166 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java

    doThrow(new IllegalArgumentException()).when(mMockStatFsExternal).restat(EXTERNAL_PATH);

    StatFsHelper statFsHelper = new StatFsHelper();
    statFsHelper.resetStats();

    long freeBytes = statFsHelper.getAvailableStorageSpace(StatFsHelper.StorageType.INTERNAL);
    assertEquals(INTERNAL_BLOCK_SIZE * INTERNAL_BLOCKS_FREE, freeBytes);

    freeBytes = statFsHelper.getAvailableStorageSpace(StatFsHelper.StorageType.EXTERNAL);
    assertEquals(0, freeBytes);

    verify(mMockStatFsInternal).restat(INTERNAL_PATH);
  }

  @Test
  public void testShouldHandleExternalStorageRemoved() {
=====================================================================
Found a 12 line (66 tokens) duplication in the following files: 
Starting at line 235 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 307 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    subscriber1.onNewResult(mSrc1);
    mInOrder.verify(mSrc2).close();
    verifySubscriber(dataSource, mSrc1, ON_NEW_RESULT);
    verifyState(dataSource, mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val1b, NOT_FAILED, null);

    testClose(dataSource, mSrc1);
    verifyState(dataSource, null, CLOSED, FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
  }

  /** Second data source produced its final result, followed by the first data source. */
  @Test
  public void testLifecycle_S2_S1_C() {
=====================================================================
Found a 7 line (66 tokens) duplication in the following files: 
Starting at line 87 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 166 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 189 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java

        .thenAnswer((Answer<ImageFormat>) i -> DefaultImageFormats.WEBP_SIMPLE);
    mAddMetaDataConsumer.onNewResult(mFinalResult, Consumer.IS_LAST);
    ArgumentCaptor<EncodedImage> argumentCaptor = ArgumentCaptor.forClass(EncodedImage.class);
    verify(mConsumer).onNewResult(argumentCaptor.capture(), eq(Consumer.IS_LAST));
    EncodedImage encodedImage = argumentCaptor.getValue();
    assertTrue(EncodedImage.isValid(encodedImage));
    assertEquals(DefaultImageFormats.WEBP_SIMPLE, encodedImage.getImageFormat());
=====================================================================
Found a 10 line (66 tokens) duplication in the following files: 
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java
Starting at line 164 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java

        mFinalImageReference.getUnderlyingReferenceTestOnly());
    verify(mConsumer).onNewResult(mIntermediateEncodedImage, Consumer.NO_FLAGS);
    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener, times(2)).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener, times(2))
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, null);
  }

  @Test
  public void testSmallImageDiskCacheInputProducerSuccess() {
=====================================================================
Found a 29 line (66 tokens) duplication in the following files: 
Starting at line 512 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 372 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

    maybeNotifyExclusiveEntriesRemoval(oldLFUEntries, oldMFUEntries);
    maybeUpdateCacheParams();
    maybeEvictEntries();
  }

  /** Updates the cache params (constraints) if enough time has passed since the last update. */
  private synchronized void maybeUpdateCacheParams() {
    if (mLastCacheParamsCheck + mMemoryCacheParams.paramsCheckIntervalMs
        > SystemClock.uptimeMillis()) {
      return;
    }
    mLastCacheParamsCheck = SystemClock.uptimeMillis();
    mMemoryCacheParams =
        Preconditions.checkNotNull(
            mMemoryCacheParamsSupplier.get(), "mMemoryCacheParamsSupplier returned null");
  }

  public MemoryCacheParams getMemoryCacheParams() {
    return mMemoryCacheParams;
  }

  /**
   * Removes the exclusively owned items until the cache constraints are met.
   *
   * <p>This method invokes the external {@link CloseableReference#close} method, so it must not be
   * called while holding the <code>this</code> lock.
   */
  @Override
  public void maybeEvictEntries() {
=====================================================================
Found a 8 line (65 tokens) duplication in the following files: 
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 181 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

            .setActualImageFocusPoint(mFocusPoint)
            .build();
    RootDrawable rootDrawable = (RootDrawable) dh.getTopLevelDrawable();
    FadeDrawable fadeDrawable = (FadeDrawable) rootDrawable.getCurrent();
    assertEquals(7, fadeDrawable.getNumberOfLayers());
    assertNull(fadeDrawable.getDrawable(0));
    assertScaleTypeAndDrawable(mPlaceholderImage, ScaleType.CENTER, fadeDrawable.getDrawable(1));
    assertActualImageScaleType(ScaleType.FOCUS_CROP, mFocusPoint, fadeDrawable.getDrawable(2));
=====================================================================
Found a 8 line (65 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 301 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
=====================================================================
Found a 8 line (65 tokens) duplication in the following files: 
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 285 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, false);
=====================================================================
Found a 15 line (65 tokens) duplication in the following files: 
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalExifThumbnailProducerTest.java

    when(mImageRequest.getSourceUri()).thenReturn(Uri.parse("asset:///" + TEST_FILENAME));
    doAnswer(
            new Answer() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                mCapturedEncodedImage =
                    EncodedImage.cloneOrNull((EncodedImage) invocation.getArguments()[0]);
                return null;
              }
            })
        .when(mConsumer)
        .onNewResult(notNull(EncodedImage.class), anyInt());
  }

  @After
=====================================================================
Found a 16 line (65 tokens) duplication in the following files: 
Starting at line 89 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 86 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java

                    EncodedImage.cloneOrNull((EncodedImage) invocation.getArguments()[0]);
                return null;
              }
            })
        .when(mConsumer)
        .onNewResult(notNull(EncodedImage.class), anyInt());
  }

  @After
  public void tearDown() throws Exception {
    verify(mPooledByteBufferFactory, atMost(1))
        .newByteBuffer(any(InputStream.class), eq(TEST_DATA_LENGTH));
  }

  @Test
  public void testFetchAssetResource() throws Exception {
=====================================================================
Found a 12 line (65 tokens) duplication in the following files: 
Starting at line 174 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> cachedRef = mCache.cache(KEY, newReference(100));
    // cached item should get exclusively owned
    cachedRef.close();
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(1, 100);
    assertExclusivelyOwned(KEY, 100);
    verify(mReleaser, never()).release(anyInt());
  }

  @Test
  public void testNotExclusiveAtFirst() {
    mCache =
=====================================================================
Found a 8 line (65 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\AshmemMemoryChunkPoolTest.java
Starting at line 40 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\NativeMemoryChunkPoolTest.java
Starting at line 38 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\BufferMemoryChunkPoolTest.java

    Assert.assertEquals(1, b.getSize());
    Assert.assertEquals(1, mPool.alloc(1).getSize());
    Assert.assertEquals(33, mPool.alloc(33).getSize());
    Assert.assertEquals(32, mPool.alloc(32).getSize());
  }

  @Test
  public void testFree() {
=====================================================================
Found a 7 line (65 tokens) duplication in the following files: 
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\main\java\com\facebook\imagepipeline\memory\NativeMemoryChunk.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\main\java\com\facebook\imagepipeline\memory\NativeMemoryChunk.java

  public synchronized int write(
      final int memoryOffset, final byte[] byteArray, final int byteArrayOffset, final int count) {
    Preconditions.checkNotNull(byteArray);
    Preconditions.checkState(!isClosed());
    final int actualCount = MemoryChunkUtil.adjustByteCount(memoryOffset, count, mSize);
    MemoryChunkUtil.checkBounds(
        memoryOffset, byteArray.length, byteArrayOffset, actualCount, mSize);
=====================================================================
Found a 12 line (65 tokens) duplication in the following files: 
Starting at line 53 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\keyframes\ImageFormatKeyframesFragment.java
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\svg\ImageFormatSvgFragment.java

    mSimpleDraweeView.setController(controller);

    final SwitchCompat switchBackground = (SwitchCompat) view.findViewById(R.id.switch_background);
    switchBackground.setOnCheckedChangeListener(
        new CompoundButton.OnCheckedChangeListener() {
          @Override
          public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
            mSimpleDraweeView
                .getHierarchy()
                .setBackgroundImage(isChecked ? new CheckerBoardDrawable(getResources()) : null);
          }
        });
=====================================================================
Found a 17 line (65 tokens) duplication in the following files: 
Starting at line 30 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\androidTest\java\com\facebook\webpsupport\WebpBitmapFactoryTest.java
Starting at line 31 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\androidTest\java\com\facebook\webpsupport\WebpDecodingTest.java

  private Instrumentation mInstrumentation;

  private WebpBitmapFactoryImpl mWebpBitmapFactory;

  @Override
  @Before
  public void setUp() {
    mInstrumentation = InstrumentationRegistry.getInstrumentation();
    mWebpBitmapFactory = new WebpBitmapFactoryImpl();
    ImagePipelineConfig.Builder configBuilder =
        ImagePipelineConfig.newBuilder(mInstrumentation.getContext())
            .experiment()
            .setWebpBitmapFactory(mWebpBitmapFactory);
    ImagePipelineFactory.initialize(configBuilder.build());
  }

  private FileDescriptor getImageFileDescriptor(String path) {
=====================================================================
Found a 7 line (64 tokens) duplication in the following files: 
Starting at line 441 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 467 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 494 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 532 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 543 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 571 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 609 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
=====================================================================
Found a 7 line (64 tokens) duplication in the following files: 
Starting at line 60 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\HashCodeUtil.java
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\HashCodeUtil.java

      @Nullable Object o5) {
    return hashCode(
        o1 == null ? 0 : o1.hashCode(),
        o2 == null ? 0 : o2.hashCode(),
        o3 == null ? 0 : o3.hashCode(),
        o4 == null ? 0 : o4.hashCode(),
        o5 == null ? 0 : o5.hashCode());
=====================================================================
Found a 14 line (64 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 92 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 14 line (64 tokens) duplication in the following files: 
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 356 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x05,
        (byte) 0x01,
        (byte) 0x01,
        (byte) 0x01,
        (byte) 0x01,
        (byte) 0x01,
        (byte) 0x01,
        (byte) 0x00,
        (byte) 0x00,
        (byte) 0x00,
        (byte) 0x00,
        (byte) 0x00,
        (byte) 0x00,
        (byte) 0x00,
=====================================================================
Found a 7 line (64 tokens) duplication in the following files: 
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 142 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java

        .thenAnswer((Answer<Pair<Integer, Integer>>) i -> null);
    mAddMetaDataConsumer.onNewResult(mIntermediateResult, Consumer.NO_FLAGS);
    ArgumentCaptor<EncodedImage> argumentCaptor = ArgumentCaptor.forClass(EncodedImage.class);
    verify(mConsumer).onNewResult(argumentCaptor.capture(), eq(Consumer.NO_FLAGS));
    EncodedImage encodedImage = argumentCaptor.getValue();
    assertTrue(EncodedImage.isValid(encodedImage));
    assertEquals(DefaultImageFormats.WEBP_SIMPLE, encodedImage.getImageFormat());
=====================================================================
Found a 7 line (64 tokens) duplication in the following files: 
Starting at line 161 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 179 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 336 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    ArgumentCaptor<HashMap> captor = ArgumentCaptor.forClass(HashMap.class);
    verify(mProducerListener)
        .onProducerFinishWithSuccess(eq(mProducerContext), eq(PRODUCER_NAME), captor.capture());
    Map<String, String> resultMap = captor.getValue();
    assertEquals("true", resultMap.get(DiskCacheReadProducer.EXTRA_CACHED_VALUE_FOUND));
=====================================================================
Found a 15 line (64 tokens) duplication in the following files: 
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 72 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 74 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java

    when(mImageRequest.getSourceUri()).thenReturn(Uri.parse("asset:///" + TEST_FILENAME));
    doAnswer(
            new Answer() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                mCapturedEncodedImage =
                    EncodedImage.cloneOrNull((EncodedImage) invocation.getArguments()[0]);
                return null;
              }
            })
        .when(mConsumer)
        .onNewResult(notNull(EncodedImage.class), anyInt());
  }

  @After
=====================================================================
Found a 8 line (64 tokens) duplication in the following files: 
Starting at line 436 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 454 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

  public void getExtraMapToleratesDelegateNullMap() {
    PriorityNetworkFetcher<FetchState> fetcher =
        newFetcher(delegate, false, 2, 1, true, 0, false, false);

    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, true);

    // Explicitly return a null.
    when(delegate.getExtraMap(eq(one.delegatedState), anyInt())).thenReturn(null);
=====================================================================
Found a 17 line (64 tokens) duplication in the following files: 
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineRegionDecodingFragment.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\FrescoVitoLithoRegionDecodeFragment.java

    mSelectedRegion.setSizeChangedListener(mSizeChangedListener);

    mRegionDraweeView = (SimpleDraweeView) view.findViewById(R.id.drawee_view_region);
    mRegionDraweeView.setOnClickListener(
        new View.OnClickListener() {
          @Override
          public void onClick(View v) {
            updateRegion();
          }
        });
  }

  private void updateRegion() {
    if (mImageInfo == null) {
      return;
    }
    int left = 0;
=====================================================================
Found a 13 line (64 tokens) duplication in the following files: 
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\ImagePipelineUtilsImplTest.java
Starting at line 123 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\ImagePipelineUtilsImplTest.java

        ImageOptions.create().round(RoundingOptions.asCircle()).build();

    ImageRequest imageRequest =
        mImagePipelineUtilsNoNativeRounding.buildImageRequest(URI, imageOptions);

    assertThat(imageRequest).isNotNull();
    assertThat(imageRequest.getSourceUri()).isEqualTo(URI);
    ImageDecodeOptions imageDecodeOptions = imageRequest.getImageDecodeOptions();
    assertThat(imageDecodeOptions).isEqualTo(ImageDecodeOptions.defaults());
  }

  @Test
  public void
=====================================================================
Found a 10 line (63 tokens) duplication in the following files: 
Starting at line 124 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedSingleUsePostprocessorProducerTest.java
Starting at line 178 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

    verify(sourceCloseableAnimatedImage).close();
  }

  private SingleUsePostprocessorConsumer produceResults() {
    mPostprocessorProducer.produceResults(mConsumer, mProducerContext);
    ArgumentCaptor<Consumer> consumerCaptor = ArgumentCaptor.forClass(Consumer.class);
    verify(mInputProducer).produceResults(consumerCaptor.capture(), eq(mProducerContext));
    return (SingleUsePostprocessorConsumer) consumerCaptor.getValue();
  }
}
=====================================================================
Found a 12 line (63 tokens) duplication in the following files: 
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\preparation\DefaultBitmapFramePreparerTest.java
Starting at line 186 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\preparation\DefaultBitmapFramePreparerTest.java

    when(mBitmapFrameRenderer.renderFrame(1, mBitmap)).thenReturn(true);

    mDefaultBitmapFramePreparer.prepareFrame(mBitmapFrameCache, mAnimationBackend, 1);

    mExecutorService.getScheduledQueue().runNextPendingCommand();

    verify(mBitmapFrameCache, times(2)).contains(1);
    verify(mBitmapFrameCache)
        .getBitmapToReuseForFrame(1, BACKEND_INTRINSIC_WIDTH, BACKEND_INTRINSIC_HEIGHT);
    verify(mPlatformBitmapFactory)
        .createBitmap(BACKEND_INTRINSIC_WIDTH, BACKEND_INTRINSIC_HEIGHT, BITMAP_CONFIG);
    verify(mBitmapFrameRenderer).renderFrame(1, mBitmap);
=====================================================================
Found a 8 line (63 tokens) duplication in the following files: 
Starting at line 442 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 453 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 468 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 495 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 506 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 533 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 572 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 583 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 610 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 621 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set final image (immediate)
    dh.setImage(mActualImage2, 1f, true);
=====================================================================
Found a 10 line (63 tokens) duplication in the following files: 
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListenerTest.java
Starting at line 87 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListenerTest.java
Starting at line 141 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListenerTest.java

    final long imageLoadTime = 200L;
    final long imageReleaseTime = 345L;
    int expectedNumOfTimestamps = 0;

    when(mMonotonicClock.now()).thenReturn(startTime);
    mListener.onSubmit(CONTROLLER_ID, CALLER_CONTEXT);
    expectedNumOfTimestamps++;
    when(mImagePerfState.getImageLoadStatus()).thenReturn(ImageLoadStatus.REQUESTED);

    when(mMonotonicClock.now()).thenReturn(imageLoadTime);
=====================================================================
Found a 13 line (63 tokens) duplication in the following files: 
Starting at line 102 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java

                dataSubscriber.onNewResult(mDataSource);
                return null;
              }
            })
        .when(mDataSource)
        .subscribe(any(DataSubscriber.class), any(Executor.class));

    // the mocked one falls through, but the real one waits with the countdown latch for isFinished
    final Object actual = DataSources.waitForFinalResult(mDataSource);
    assertEquals(null, actual);

    verify(mCountDownLatch, times(1)).await();
    verify(mCountDownLatch, never()).countDown();
=====================================================================
Found a 12 line (63 tokens) duplication in the following files: 
Starting at line 267 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 329 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1, NOT_FAILED, null);

    testClose(dataSource, mSrc1, mSrc2);
    verifySubscriber(dataSource, null, ON_CANCELLATION);
    verifyState(dataSource, null, CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
  }

  /** Early close with no results. */
  @Test
  public void testLifecycle_C() {
    DataSource<Object> dataSource = getAndSubscribe();
    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribe(mDataSourceSupplier1, mSrc1);
=====================================================================
Found a 8 line (63 tokens) duplication in the following files: 
Starting at line 99 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 246 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

  public void testLifecycle_I2_F2_F1_S3_C() {
    DataSource<Object> dataSource = getAndSubscribe();
    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribeM(mDataSourceSupplier1, mSrc1);
    DataSubscriber<Object> subscriber2 = verifyGetAndSubscribeM(mDataSourceSupplier2, mSrc2);
    DataSubscriber<Object> subscriber3 = verifyGetAndSubscribe(mDataSourceSupplier3, mSrc3);

    Object val2 = mock(Object.class);
    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2, NOT_FAILED, null);
=====================================================================
Found a 9 line (63 tokens) duplication in the following files: 
Starting at line 101 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imageutils\BitmapUtil.java
Starting at line 128 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imageutils\BitmapUtil.java

    ByteBuffer byteBuffer = acquireByteBuffer();
    if (byteBuffer == null) {
      byteBuffer = ByteBuffer.allocate(DecodeBufferHelper.getRecommendedDecodeBufferSize());
    }
    BitmapFactory.Options options = new BitmapFactory.Options();
    options.inJustDecodeBounds = true;
    try {
      options.inTempStorage = byteBuffer.array();
      BitmapFactory.decodeStream(is, null, options);
=====================================================================
Found a 9 line (63 tokens) duplication in the following files: 
Starting at line 1168 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1359 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    assertMFUExclusivelyOwned(KEYS[1], 10);
    assertLFUExclusivelyOwned(KEYS[2], 20);
    assertLFUExclusivelyOwned(KEYS[3], 30);

    // insert item4 to LFU, the cache should evict item2
    CloseableReference<Integer> originalRef4 = newReference(40);
    CloseableReference<Integer> valueRef4a = mCache.cache(KEYS[4], originalRef4);
    originalRef4.close();
    valueRef4a.close();
=====================================================================
Found a 9 line (63 tokens) duplication in the following files: 
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\AshmemMemoryChunkPoolTest.java
Starting at line 53 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\NativeMemoryChunkPoolTest.java
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\BufferMemoryChunkPoolTest.java

    Assert.assertTrue(b.isClosed());
  }

  @Test
  public void testGetBucketedSize() {
    Assert.assertEquals(32, mPool.getBucketedSize(1));
    Assert.assertEquals(32, mPool.getBucketedSize(32));
    Assert.assertEquals(64, mPool.getBucketedSize(33));
    Assert.assertEquals(64, mPool.getBucketedSize(63));
=====================================================================
Found a 9 line (62 tokens) duplication in the following files: 
Starting at line 113 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedSingleUsePostprocessorProducerTest.java
Starting at line 136 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

    mTestExecutorService.runUntilIdle();

    mInOrder.verify(mConsumer).onNewResult(any(CloseableReference.class), eq(Consumer.IS_LAST));
    mInOrder.verifyNoMoreInteractions();

    assertEquals(1, mResults.size());
    CloseableReference<CloseableImage> res0 = mResults.get(0);
    assertTrue(CloseableReference.isValid(res0));
    assertSame(sourceCloseableAnimatedImage, res0.get());
=====================================================================
Found a 14 line (62 tokens) duplication in the following files: 
Starting at line 261 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 288 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java

    public static final ScaleType INSTANCE = new ScaleTypeFitCenter();

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float scale = Math.min(scaleX, scaleY);
      float dx = parentRect.left + (parentRect.width() - childWidth * scale) * 0.5f;
=====================================================================
Found a 8 line (62 tokens) duplication in the following files: 
Starting at line 545 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 595 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_STARTING, fadeDrawable.getTransitionState());
    assertEquals(250, fadeDrawable.getTransitionDuration());
    // set final image (non-immediate)
    dh.setImage(mActualImage2, 1f, false);
=====================================================================
Found a 7 line (62 tokens) duplication in the following files: 
Starting at line 45 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifySubscriber(dataSource, mSrc3, NO_INTERACTIONS);
    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);

    Throwable throwable = mock(Throwable.class);
    setState(mSrc1, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, throwable);
    subscriber1.onFailure(mSrc1);
    mInOrder.verify(mSrc1).close();
=====================================================================
Found a 10 line (62 tokens) duplication in the following files: 
Starting at line 130 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 126 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java

    mLocalAssetFetchProducer.produceResults(mConsumer, mProducerContext);
    mExecutor.runUntilIdle();

    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, false);
  }
}
=====================================================================
Found a 6 line (62 tokens) duplication in the following files: 
Starting at line 139 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java
Starting at line 169 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java

  public void testLocalVideoMicroThumbnailSuccess() throws Exception {
    when(mImageRequest.getSourceUri()).thenReturn(mLocalVideoUri);
    when(mProducerListener.requiresExtraMap(mProducerContext, PRODUCER_NAME)).thenReturn(true);
    when(android.media.ThumbnailUtils.createVideoThumbnail(
            mFile.getPath(), MediaStore.Images.Thumbnails.MICRO_KIND))
        .thenReturn(mBitmap);
=====================================================================
Found a 11 line (62 tokens) duplication in the following files: 
Starting at line 643 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 824 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    PriorityFetchState<FetchState> hipri2 = fetch(fetcher, "hipri2", callback, true);

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
    assertThat(fetcher.getHiPriQueue()).containsExactly(hipri2);
    assertThat(fetcher.getLowPriQueue()).isEmpty();

    // Simulate a failure in hipri1.
    getOnlyElement(recordingNetworkFetcher.callbacks.get(hipri1.delegatedState))
        .onFailure(new Exception());

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
=====================================================================
Found a 8 line (61 tokens) duplication in the following files: 
Starting at line 317 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 341 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    when(mBitmapFrameRenderer.renderFrame(anyInt(), any(Bitmap.class))).thenReturn(true);

    mBitmapAnimationBackend.drawFrame(mParentDrawable, mCanvas, 3);

    verify(mFrameListener).onDrawFrameStart(mBitmapAnimationBackend, 3);
    verify(mBitmapFrameCache).getCachedFrame(3);
    verify(mBitmapFrameCache).getBitmapToReuseForFrame(3, 0, 0);
    verify(mPlatformBitmapFactory).createBitmap(0, 0, Bitmap.Config.ARGB_8888);
=====================================================================
Found a 9 line (61 tokens) duplication in the following files: 
Starting at line 322 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 322 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

  private AnimatedDrawableBackend createAnimatedDrawableBackendMock(final int frameCount) {
    // For decoding preview frame, expect some calls.
    final AnimatedDrawableBackend mockAnimatedDrawableBackend = mock(AnimatedDrawableBackend.class);
    when(mockAnimatedDrawableBackend.getFrameCount()).thenReturn(frameCount);
    when(mockAnimatedDrawableBackend.getWidth()).thenReturn(50);
    when(mockAnimatedDrawableBackend.getHeight()).thenReturn(50);
    return mockAnimatedDrawableBackend;
  }
}
=====================================================================
Found a 41 line (61 tokens) duplication in the following files: 
Starting at line 238 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedColorDrawable.java
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedCornersDrawable.java

  }

  /** Gets whether image should be scaled down inside borders. */
  @Override
  public boolean getScaleDownInsideBorders() {
    return mScaleDownInsideBorders;
  }

  /**
   * Sets FILTER_BITMAP_FLAG flag to Paint. {@link android.graphics.Paint#FILTER_BITMAP_FLAG}
   *
   * <p>This should generally be on when drawing bitmaps, unless performance-bound (rendering to
   * software canvas) or preferring pixelation artifacts to blurriness when scaling significantly.
   *
   * @param paintFilterBitmap whether to set FILTER_BITMAP_FLAG flag to Paint.
   */
  @Override
  public void setPaintFilterBitmap(boolean paintFilterBitmap) {
    if (mPaintFilterBitmap != paintFilterBitmap) {
      mPaintFilterBitmap = paintFilterBitmap;
      invalidateSelf();
    }
  }

  /** Gets whether to set FILTER_BITMAP_FLAG flag to Paint. */
  @Override
  public boolean getPaintFilterBitmap() {
    return mPaintFilterBitmap;
  }

  @Override
  public void setRepeatEdgePixels(boolean repeatEdgePixels) {
    // no-op
  }

  /**
   * Sets the drawable's alpha value.
   *
   * @param alpha The alpha value to set, between 0 and 255.
   */
  @Override
=====================================================================
Found a 15 line (61 tokens) duplication in the following files: 
Starting at line 96 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalThumbnailBitmapProducer.java
Starting at line 113 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducer.java

            cancellationSignal.cancel();
          }

          @Override
          protected Map<String, String> getExtraMapOnSuccess(
              final @Nullable CloseableReference<CloseableImage> result) {
            return ImmutableMap.of(CREATED_THUMBNAIL, String.valueOf(result != null));
          }

          @Override
          // NULLSAFE_FIXME[Inconsistent Subclass Parameter Annotation]
          protected void disposeResult(CloseableReference<CloseableImage> result) {
            CloseableReference.closeSafely(result);
          }
        };
=====================================================================
Found a 7 line (61 tokens) duplication in the following files: 
Starting at line 323 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 342 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 363 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

    verify(decodedSequence)
        .produceResults(any(Consumer.class), producerContextArgumentCaptor.capture());
    assertTrue(producerContextArgumentCaptor.getValue().isIntermediateResultExpected());
    assertEquals(producerContextArgumentCaptor.getValue().getPriority(), Priority.HIGH);
    assertEquals(
        producerContextArgumentCaptor.getValue().getLowestPermittedRequestLevel(),
        ImageRequest.RequestLevel.DISK_CACHE);
=====================================================================
Found a 14 line (61 tokens) duplication in the following files: 
Starting at line 321 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 378 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java

    JobScheduler.JobRunnable jobRunnable = getJobRunnable();

    jobRunnable.run(mEncodedImage, Consumer.IS_LAST);

    InOrder inOrder = inOrder(mProducerListener, mImageDecoder);
    inOrder
        .verify(mProducerListener)
        .onProducerStart(mProducerContext, DecodeProducer.PRODUCER_NAME);
    inOrder
        .verify(mImageDecoder)
        .decode(mEncodedImage, IMAGE_SIZE, ImmutableQualityInfo.FULL_QUALITY, IMAGE_DECODE_OPTIONS);
    inOrder
        .verify(mProducerListener)
        .onProducerFinishWithSuccess(
=====================================================================
Found a 8 line (61 tokens) duplication in the following files: 
Starting at line 245 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 155 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

    mDiskCacheReadProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }
=====================================================================
Found a 10 line (61 tokens) duplication in the following files: 
Starting at line 209 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
    cachedRef.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
    mCache.get(KEY);
    verify(mEntryStateObserver).onExclusivityChanged(KEY, false);
  }

  @Test
  public void testCantReuseNonExclusive() {
=====================================================================
Found a 11 line (61 tokens) duplication in the following files: 
Starting at line 1522 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1594 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    assertMFUExclusivelyOwned(KEYS[2], 20);

    // insert item4 to MFU, item2 will be evicted from MFU and inserted in the MFU ghost list
    CloseableReference<Integer> originalRef4 = newReference(40);
    CloseableReference<Integer> valueRef4 = mCache.cache(KEYS[4], originalRef4);
    CloseableReference<Integer> valueRef4a = mCache.get(KEYS[4]);
    originalRef4.close();
    valueRef4.close();
    valueRef4a.close();
    assertEquals(
        initialLFUCacheFractionPromil + mCache.mAdaptiveRatePromil, mCache.mLFUFractionPromil);
=====================================================================
Found a 18 line (61 tokens) duplication in the following files: 
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\main\java\com\facebook\imagepipeline\platform\GingerbreadPurgeableDecoder.java
Starting at line 55 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\androidTest\java\com\facebook\webpsupport\WebpDecodingTest.java

      Closeables.close(os, true);
    }
  }

  private synchronized Method getFileDescriptorMethod() {
    if (sGetFileDescriptorMethod == null) {
      try {
        sGetFileDescriptorMethod = MemoryFile.class.getDeclaredMethod("getFileDescriptor");
      } catch (Exception e) {
        throw Throwables.propagate(e);
      }
    }
    return sGetFileDescriptorMethod;
  }

  private FileDescriptor getMemoryFileDescriptor(MemoryFile memoryFile) {
    try {
      Object rawFD = Preconditions.checkNotNull(getFileDescriptorMethod().invoke(memoryFile));
=====================================================================
Found a 22 line (61 tokens) duplication in the following files: 
Starting at line 21 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\testing\FakeAshmemMemoryChunk.java
Starting at line 21 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\testing\FakeNativeMemoryChunk.java

  public FakeAshmemMemoryChunk(int bufSize) {
    super();
    mBuf = new byte[bufSize];
  }

  @Override
  public void close() {
    mBuf = null;
  }

  @Override
  public boolean isClosed() {
    return mBuf == null;
  }

  @Override
  public int getSize() {
    return mBuf.length;
  }

  @Override
  public int write(int ashmemMemoryOffset, byte[] byteArray, int byteArrayOffset, int count) {
=====================================================================
Found a 7 line (61 tokens) duplication in the following files: 
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\samples\comparison\src\main\java\com\facebook\samples\comparison\holders\BaseViewHolder.java
Starting at line 36 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\main\java\com\facebook\samples\scrollperf\util\SizeUtil.java

  private void updateViewLayoutParams(View view, int width, int height) {
    ViewGroup.LayoutParams layoutParams = view.getLayoutParams();
    if (layoutParams == null || layoutParams.height != width || layoutParams.width != height) {
      layoutParams = new AbsListView.LayoutParams(width, height);
      view.setLayoutParams(layoutParams);
    }
  }
=====================================================================
Found a 11 line (60 tokens) duplication in the following files: 
Starting at line 353 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 367 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 382 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(250, fadeDrawable.getTransitionDuration());

    // initial state -> final image (immediate)
    // reset hierarchy to initial state
    dh.reset();
    assertEquals(ColorDrawable.class, actualImageSettableDrawable.getCurrent().getClass());
    assertEquals(true, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set final image (immediate)
    dh.setImage(mActualImage2, 1f, true);
=====================================================================
Found a 11 line (60 tokens) duplication in the following files: 
Starting at line 142 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\statfs\StatFsHelper.java
Starting at line 198 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\statfs\StatFsHelper.java

  public long getFreeStorageSpace(StorageType storageType) {
    ensureInitialized();

    maybeUpdateStats();

    StatFs statFS = storageType == StorageType.INTERNAL ? mInternalStatFs : mExternalStatFs;
    if (statFS != null) {
      long blockSize, availableBlocks;
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
        blockSize = statFS.getBlockSizeLong();
        availableBlocks = statFS.getFreeBlocksLong();
=====================================================================
Found a 13 line (60 tokens) duplication in the following files: 
Starting at line 411 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 444 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    mInOrder.verify(mSrc3).close();
    verifySubscriber(dataSource, mSrc1, ON_NEW_RESULT);
    verifyState(dataSource, mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);

    testClose(dataSource, mSrc1);
    verifyState(dataSource, null, CLOSED, FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
  }

  /**
   * Immediate result of low-res data source followed by delayed result of the first data source.
   */
  @Test
  public void testLifecycle_ImmediateLowRes() {
=====================================================================
Found a 13 line (60 tokens) duplication in the following files: 
Starting at line 24 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\SettableProducerContext.java
Starting at line 38 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\SettableProducerContext.java

        context.getImageRequest(),
        context.getId(),
        context.getUiComponentId(),
        context.getProducerListener(),
        context.getCallerContext(),
        context.getLowestPermittedRequestLevel(),
        context.isPrefetch(),
        context.isIntermediateResultExpected(),
        context.getPriority(),
        context.getImagePipelineConfig());
  }

  public SettableProducerContext(ImageRequest overrideRequest, ProducerContext context) {
=====================================================================
Found a 12 line (60 tokens) duplication in the following files: 
Starting at line 111 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java

    mLocalAssetFetchProducer.produceResults(mConsumer, mProducerContext);
    mExecutor.runUntilIdle();

    assertEquals(
        2,
        mCapturedEncodedImage
            .getByteBufferRef()
            .getUnderlyingReferenceTestOnly()
            .getRefCountTestOnly());
    assertSame(pooledByteBuffer, mCapturedEncodedImage.getByteBufferRef().get());
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener).onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, null);
=====================================================================
Found a 9 line (60 tokens) duplication in the following files: 
Starting at line 647 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 822 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    assertThat(fetcher.getLowPriQueue()).isEmpty();

    // Simulate a failure in hipri1.
    getOnlyElement(recordingNetworkFetcher.callbacks.get(hipri1.delegatedState))
        .onFailure(new Exception());

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
    assertThat(fetcher.getHiPriQueue()).containsExactly(hipri2);
    assertThat(fetcher.getLowPriQueue()).isEmpty();
=====================================================================
Found a 9 line (60 tokens) duplication in the following files: 
Starting at line 814 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 824 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    PriorityFetchState<FetchState> hipri2 = fetch(fetcher, "hipri2", callback, true);

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
    assertThat(fetcher.getHiPriQueue()).containsExactly(hipri2);
    assertThat(fetcher.getLowPriQueue()).isEmpty();

    // Simulate 2 failures in hipri1, the request should be requeued.
    getOnlyElement(recordingNetworkFetcher.callbacks.get(hipri1.delegatedState))
        .onFailure(new Exception());
=====================================================================
Found a 23 line (60 tokens) duplication in the following files: 
Starting at line 1186 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 1245 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

  public void failuresAreRetried_eventualSuccess() throws IOException {
    final int maxAttemptCount = 3;

    RecordingNetworkFetcher delegateFetcher = new RecordingNetworkFetcher();

    PriorityNetworkFetcher<FetchState> fetcher =
        new PriorityNetworkFetcher<>(
            delegateFetcher,
            true,
            1,
            0,
            true,
            0,
            false,
            NO_DELAYED_REQUESTS,
            0 /* requeueDelayTimeInMillis */,
            false,
            false /* nonRecoverableExceptionPreventsRequeue */,
            1 /* maxConnectAttemptCount */,
            maxAttemptCount,
            false /* retryLowPriAll */,
            false /* retryLowPriUnknownHostException */,
            false /* retryLowPriConnectionException */);
=====================================================================
Found a 17 line (60 tokens) duplication in the following files: 
Starting at line 15 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\image\DefaultCloseableImage.java
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\image\DefaultCloseableStaticBitmap.java

  @Override
  protected void finalize() throws Throwable {
    if (isClosed()) {
      return;
    }
    FLog.w(
        TAG,
        "finalize: %s %x still open.",
        this.getClass().getSimpleName(),
        System.identityHashCode(this));
    try {
      close();
    } finally {
      super.finalize();
    }
  }
}
=====================================================================
Found a 8 line (60 tokens) duplication in the following files: 
Starting at line 1621 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1661 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

        "key found in the MFU exclusives",
        mCache.mMostFrequentlyUsedExclusiveEntries.contains(key));
    AbstractAdaptiveCountingMemoryCache.Entry<String, Integer> entry =
        mCache.mCachedEntries.get(key);
    assertNotNull("entry not found in the cache", entry);
    assertEquals("key mismatch", key, entry.key);
    assertEquals("value mismatch", value, entry.valueRef.get());
    assertEquals("client count mismatch", count, entry.clientCount);
=====================================================================
Found a 6 line (60 tokens) duplication in the following files: 
Starting at line 709 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 720 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    assertFalse("key found in the exclusives", mCache.mExclusiveEntries.contains(key));
    CountingMemoryCache.Entry<String, Integer> entry = mCache.mCachedEntries.get(key);
    assertNotNull("entry not found in the cache", entry);
    assertEquals("key mismatch", key, entry.key);
    assertEquals("value mismatch", value, entry.valueRef.get());
    assertEquals("client count mismatch", count, entry.clientCount);
=====================================================================
Found a 10 line (59 tokens) duplication in the following files: 
Starting at line 324 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 350 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    verify(mPlatformBitmapFactory).createBitmap(0, 0, Bitmap.Config.ARGB_8888);
    verify(mBitmapFrameCache).getFallbackFrame(3);
    verify(mCanvas).drawBitmap(eq(mBitmap), eq(0f), eq(0f), any(Paint.class));
    verifyFramePreparationStrategyCalled(3);
    verifyListenersNotifiedWithoutCache(3, BitmapAnimationBackend.FRAME_TYPE_FALLBACK);
    assertReferencesClosed();
  }

  @Test
  public void testDrawFallbackBitmapWhenRenderFrameNotWorking() {
=====================================================================
Found a 8 line (59 tokens) duplication in the following files: 
Starting at line 275 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 354 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 452 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java

      float dy = parentRect.top + (parentRect.height() - childHeight * scale) * 0.5f;
      outTransform.setScale(scale, scale);
      outTransform.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
    }

    @Override
    public String toString() {
      return "fit_center";
=====================================================================
Found a 10 line (59 tokens) duplication in the following files: 
Starting at line 198 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 394 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    DataSubscriber<Object> subscriber3 = verifyGetAndSubscribe(mDataSourceSupplier3, mSrc3);

    Object val3a = mock(Object.class);
    setState(mSrc3, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val3a, NOT_FAILED, null);
    subscriber3.onNewResult(mSrc3);
    verifySubscriber(dataSource, mSrc3, ON_NEW_RESULT);
    verifyState(dataSource, mSrc3, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val3a, NOT_FAILED, null);

    // gets ignored because DS3 was first
    Object val2a = mock(Object.class);
=====================================================================
Found a 13 line (59 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 93 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 11 line (59 tokens) duplication in the following files: 
Starting at line 183 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\CloseableProducerToDataSourceAdapterTest.java
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

    mInternalConsumer.onNewResult(resultRef, BaseConsumer.simpleStatusForIsLast(isLast));
    if (isLast) {
      verify(mRequestListener).onRequestSuccess(mSettableProducerContext);
    }
    if (numSubscribers >= 1) {
      verify(mDataSubscriber1).onNewResult(mDataSource);
    }
    if (numSubscribers >= 2) {
      verify(mDataSubscriber2).onNewResult(mDataSource);
    }
    verifyWithResult(resultRef, isLast);
=====================================================================
Found a 10 line (59 tokens) duplication in the following files: 
Starting at line 248 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java
Starting at line 315 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java

    Assert.assertEquals(ImmutableMap.of(4, new IntPair(0, 0)), mStats.mBucketStats);
    Assert.assertEquals(0, mStats.mFreeBytes);
    Assert.assertEquals(0, mStats.mUsedBytes);
    Assert.assertEquals(0, mStats.mFreeCount);
    Assert.assertEquals(0, mStats.mUsedCount);
  }

  // Test release with bucket length constraints
  @Test
  public void testRelease_BucketLengths() throws Exception {
=====================================================================
Found a 8 line (59 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 285 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 318 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
=====================================================================
Found a 8 line (59 tokens) duplication in the following files: 
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 172 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 301 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, false);
=====================================================================
Found a 13 line (59 tokens) duplication in the following files: 
Starting at line 95 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 87 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PostprocessedBitmapMemoryCacheProducerTest.java

    when(mImageRequest.isMemoryCacheEnabled()).thenReturn(true);
    setUpCacheEnabled(true);
  }

  private void setUpCacheEnabled(boolean enabled) {
    when(mImageRequest.isCacheEnabled(ImageRequest.CachesLocationsMasks.BITMAP_READ))
        .thenReturn(enabled);
    when(mImageRequest.isCacheEnabled(ImageRequest.CachesLocationsMasks.BITMAP_WRITE))
        .thenReturn(enabled);
  }

  @Test
  public void testDisableMemoryCache() {
=====================================================================
Found a 26 line (59 tokens) duplication in the following files: 
Starting at line 467 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 572 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

  public void queueTimeIsReturnedInExtraMap() {
    FakeClock clock = new FakeClock();

    PriorityNetworkFetcher<FetchState> fetcher =
        new PriorityNetworkFetcher<>(
            delegate,
            false,
            1,
            0,
            true,
            0,
            false,
            NO_DELAYED_REQUESTS,
            0,
            false,
            false /* nonRecoverableExceptionPreventsRequeue */,
            1 /* maxConnectAttemptCount */,
            1 /* maxAttemptCount */,
            false /* retryLowPriAll */,
            false /* retryLowPriUnknownHostException */,
            false /* retryLowPriConnectionException */,
            clock);

    // The queue is empty, so enqueuing a request immediately executes it. Therefore, the queue time
    // is 0.
    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, true);
=====================================================================
Found a 5 line (59 tokens) duplication in the following files: 
Starting at line 397 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 285 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> originalRef1 = newReference(110);
    CloseableReference<Integer> cachedRef1 = mCache.cache(KEY, originalRef1);
    CloseableReference<Integer> cachedRef2a = mCache.get(KEY);
    CloseableReference<Integer> cachedRef2b = cachedRef2a.clone();
    CloseableReference<Integer> cachedRef3 = mCache.get(KEY);
=====================================================================
Found a 7 line (59 tokens) duplication in the following files: 
Starting at line 1622 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1648 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

        mCache.mMostFrequentlyUsedExclusiveEntries.contains(key));
    AbstractAdaptiveCountingMemoryCache.Entry<String, Integer> entry =
        mCache.mCachedEntries.get(key);
    assertNotNull("entry not found in the cache", entry);
    assertEquals("key mismatch", key, entry.key);
    assertEquals("value mismatch", value, entry.valueRef.get());
    assertEquals("client count mismatch", count, entry.clientCount);
=====================================================================
Found a 8 line (58 tokens) duplication in the following files: 
Starting at line 248 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 302 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java

      float dy = parentRect.top + (parentRect.height() - childHeight * scale);
      outTransform.setScale(scale, scale);
      outTransform.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
    }

    @Override
    public String toString() {
      return "fit_bottom_start";
=====================================================================
Found a 8 line (58 tokens) duplication in the following files: 
Starting at line 44 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 84 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);

    Throwable throwable = mock(Throwable.class);
    setState(mSrc3, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, throwable);
    subscriber3.onFailure(mSrc3);
    mInOrder.verify(mSrc3).close();
    verifySubscriber(dataSource, mSrc3, ON_FAILURE);
    verifyState(dataSource, null, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, throwable);
=====================================================================
Found a 8 line (58 tokens) duplication in the following files: 
Starting at line 46 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 115 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);

    Throwable throwable = mock(Throwable.class);
    setState(mSrc1, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, throwable);
    subscriber1.onFailure(mSrc1);
    mInOrder.verify(mSrc1).close();
    verifySubscriber(dataSource, mSrc1, ON_FAILURE);
    verifyState(dataSource, null, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, throwable);
=====================================================================
Found a 10 line (58 tokens) duplication in the following files: 
Starting at line 196 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\CloseableProducerToDataSourceAdapterTest.java
Starting at line 164 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

  private void testFailure(CloseableReference<Object> resultRef, int numSubscribers) {
    mInternalConsumer.onFailure(mException);
    verify(mRequestListener).onRequestFailure(mSettableProducerContext, mException);
    if (numSubscribers >= 1) {
      verify(mDataSubscriber1).onFailure(mDataSource);
    }
    if (numSubscribers >= 2) {
      verify(mDataSubscriber2).onFailure(mDataSource);
    }
    verifyFailed(resultRef, mException);
=====================================================================
Found a 9 line (58 tokens) duplication in the following files: 
Starting at line 154 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 179 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java

  public void testOnNewResultNotLastAndJpeg() {
    int rotationAngle = 180;
    int orientation = 1;
    int width = 10;
    int height = 20;
    when(ImageFormatChecker.getImageFormat_WrapIOException(any(InputStream.class)))
        .thenAnswer((Answer<ImageFormat>) i -> DefaultImageFormats.JPEG);
    when(JfifUtil.getAutoRotateAngleFromOrientation(orientation))
        .thenAnswer((Answer<Integer>) i -> rotationAngle);
=====================================================================
Found a 12 line (58 tokens) duplication in the following files: 
Starting at line 173 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 379 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 296 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 95 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SwallowResultProducerTest.java

    doAnswer(new ProduceResultsNewResultAnswer(null))
        .when(mInputProducer)
        .produceResults(any(Consumer.class), eq(mProducerContext));
  }

  private void setupInputProducerFailure() {
    doAnswer(new ProduceResultsFailureAnswer())
        .when(mInputProducer)
        .produceResults(any(Consumer.class), eq(mProducerContext));
  }

  private static class ProduceResultsNewResultAnswer implements Answer<Void> {
=====================================================================
Found a 12 line (58 tokens) duplication in the following files: 
Starting at line 88 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java

    mLocalContentUriFetchProducer.produceResults(mConsumer, mProducerContext);
    mProducerContext.cancel();
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithCancellation(mProducerContext, PRODUCER_NAME, null);
    verify(mConsumer).onCancellation();
    mExecutor.runUntilIdle();
    verifyZeroInteractions(mPooledByteBufferFactory);
  }

  @Test
  public void testFetchLocalContentUri() throws Exception {
=====================================================================
Found a 12 line (58 tokens) duplication in the following files: 
Starting at line 88 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 156 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java

    mLocalContentUriFetchProducer.produceResults(mConsumer, mProducerContext);
    mProducerContext.cancel();
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithCancellation(mProducerContext, PRODUCER_NAME, null);
    verify(mConsumer).onCancellation();
    mExecutor.runUntilIdle();
    verifyZeroInteractions(mPooledByteBufferFactory);
  }

  @Test
  public void testFetchLocalContentUri() throws Exception {
=====================================================================
Found a 9 line (58 tokens) duplication in the following files: 
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 121 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java

    when(mPooledByteBufferFactory.newByteBuffer(any(InputStream.class))).thenThrow(mException);
    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, false);
  }

  @Test
=====================================================================
Found a 8 line (58 tokens) duplication in the following files: 
Starting at line 620 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 631 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

    mProducerContext1.setPriority(Priority.LOW);
    mProducerContext2.setPriority(Priority.HIGH);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext1);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext2);
    assertEquals(Priority.HIGH, mMultiplexedContext1.getPriority());
    mProducerContext1.setPriority(Priority.MEDIUM);
    assertEquals(Priority.HIGH, mMultiplexedContext1.getPriority());
  }
=====================================================================
Found a 14 line (58 tokens) duplication in the following files: 
Starting at line 599 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1472 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  public void testEviction_ByEvictionQueueCount() {
    mCache =
        createDummyAdaptiveCountingMemoryCache(
            mParamsSupplier,
            mCacheTrimStrategy,
            mValueDescriptor,
            100,
            1,
            2,
            initialLFUCacheFractionPromil);
    CloseableReference<Integer> originalRef1 = newReference(10);
    CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);
    originalRef1.close();
    valueRef1.close();
=====================================================================
Found a 14 line (58 tokens) duplication in the following files: 
Starting at line 61 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\test\java\com\facebook\imagepipeline\platform\GingerbreadPurgeableDecoderTest.java
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\test\java\com\facebook\imagepipeline\platform\KitKatPurgeableDecoderTest.java

  @Rule public PowerMockRule rule = new PowerMockRule();

  static {
    TestNativeLoader.init();
  }

  protected static final int IMAGE_SIZE = 5;
  protected static final int LENGTH = 10;
  protected static final long POINTER = 1000L;
  protected static final int MAX_BITMAP_COUNT = 2;
  protected static final int MAX_BITMAP_SIZE =
      MAX_BITMAP_COUNT * MockBitmapFactory.DEFAULT_BITMAP_SIZE;

  protected GingerbreadPurgeableDecoder mGingerbreadPurgeableDecoder;
=====================================================================
Found a 9 line (58 tokens) duplication in the following files: 
Starting at line 135 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\test\java\com\facebook\imagepipeline\platform\KitKatPurgeableDecoderTest.java
Starting at line 155 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\test\java\com\facebook\imagepipeline\platform\KitKatPurgeableDecoderTest.java

        same(mDecodeBuf), eq(0), eq(IMAGE_SIZE), argThat(new BitmapFactoryOptionsMatcher()));
    assertEquals(2, mByteBufferRef.getUnderlyingReferenceTestOnly().getRefCountTestOnly());
    assertEquals(mBitmap, result.get());
    assertTrue(result.isValid());
    assertEquals(1, mBitmapCounter.getCount());
    assertEquals(MockBitmapFactory.DEFAULT_BITMAP_SIZE, mBitmapCounter.getSize());
  }

  @Test
=====================================================================
Found a 12 line (58 tokens) duplication in the following files: 
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineRegionDecodingFragment.java
Starting at line 38 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\FrescoVitoLithoRegionDecodeFragment.java

  private SimpleDraweeView mRegionDraweeView;
  private Uri mUri;
  private @Nullable ImageInfo mImageInfo;

  private final ControllerListener<ImageInfo> mControllerListener =
      new BaseControllerListener<ImageInfo>() {
        @Override
        public void onFinalImageSet(
            String id,
            @javax.annotation.Nullable ImageInfo imageInfo,
            @javax.annotation.Nullable Animatable animatable) {
          mImageInfo = imageInfo;
=====================================================================
Found a 10 line (58 tokens) duplication in the following files: 
Starting at line 188 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\main\java\com\facebook\webpsupport\WebpBitmapFactoryImpl.java
Starting at line 372 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\main\java\com\facebook\webpsupport\WebpBitmapFactoryImpl.java

    byte[] header = getWebpHeader(inputStream, opts);
    if (WebpSupportStatus.sIsWebpSupportRequired
        && header != null
        && isWebpHeader(header, 0, HEADER_SIZE)) {
      bitmap =
          nativeDecodeStream(
              inputStream, opts, getScaleFromOptions(opts), getInTempStorageFromOptions(opts));
      // We notify that the direct decoder failed
      if (bitmap == null) {
        sendWebpErrorLog("webp_direct_decode_stream");
=====================================================================
Found a 7 line (58 tokens) duplication in the following files: 
Starting at line 129 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\HierarcherImplTest.java
Starting at line 148 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\HierarcherImplTest.java

  public void testApplyRoundingOptions_whenRoundWithCornerRadius_thenReturnDrawable() {
    final BitmapDrawable drawable = mock(BitmapDrawable.class);
    final Bitmap bitmap = mock(Bitmap.class);
    when(drawable.getBitmap()).thenReturn(bitmap);

    ImageOptions options = mock(ImageOptions.class);
    when(options.getRoundingOptions()).thenReturn(RoundingOptions.forCornerRadiusPx(123));
=====================================================================
Found a 6 line (57 tokens) duplication in the following files: 
Starting at line 257 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 252 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(255, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(FadeDrawable.TRANSITION_RUNNING, mFadeDrawable.mTransitionState);
    verify(mLayers[0]).mutate();
    verify(mLayers[0]).setAlpha(255);
    verify(mLayers[0]).draw(mCanvas);
    verify(mLayers[1]).mutate();
=====================================================================
Found a 5 line (57 tokens) duplication in the following files: 
Starting at line 262 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 289 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java

    verify(mLayers[1]).mutate();
    verify(mLayers[1]).setAlpha(255);
    verify(mLayers[1]).draw(mCanvas);
    verify(mLayers[2]).mutate();
    verify(mLayers[2]).setAlpha(255);
=====================================================================
Found a 16 line (57 tokens) duplication in the following files: 
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\CloseableProducerToDataSourceAdapterTest.java
Starting at line 217 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

    mInternalConsumer.onNewResult(mResultRef2, Consumer.IS_LAST);
    verifyClosed(NOT_FINISHED, null);
    testSubscribe(NO_INTERACTIONS);
  }

  @Test
  public void testC_F_a() {
    testClose(NOT_FINISHED, 1);
    mInternalConsumer.onFailure(mException);
    verifyClosed(NOT_FINISHED, null);
    testSubscribe(NO_INTERACTIONS);
  }

  @Test
  public void test_I_a_C() {
    testNewResult(mResultRef1, INTERMEDIATE, 1);
=====================================================================
Found a 7 line (57 tokens) duplication in the following files: 
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 121 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java

    when(mPooledByteBufferFactory.newByteBuffer(any(InputStream.class))).thenThrow(mException);
    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, false);
  }
=====================================================================
Found a 9 line (57 tokens) duplication in the following files: 
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 189 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java

    when(mPooledByteBufferFactory.newByteBuffer(any(InputStream.class))).thenThrow(mException);
    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, false);
  }

  @Test
=====================================================================
Found a 14 line (57 tokens) duplication in the following files: 
Starting at line 31 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\bitmap\BitmapAnimationFragment.java
Starting at line 29 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\color\SimpleColorFragment.java

public class BitmapAnimationFragment extends Fragment {

  @Nullable
  @Override
  public View onCreateView(
      LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
    return inflater.inflate(R.layout.fragment_simple_container, container, false);
  }

  @Override
  public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {

    // Get the animation container
    ImageView imageView = (ImageView) view.findViewById(R.id.animation_container);
=====================================================================
Found a 10 line (57 tokens) duplication in the following files: 
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 55 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\keyframes\ImageFormatKeyframesFragment.java
Starting at line 45 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\svg\ImageFormatSvgFragment.java

    final SwitchCompat switchBackground = view.findViewById(R.id.switch_background);
    switchBackground.setOnCheckedChangeListener(
        new CompoundButton.OnCheckedChangeListener() {
          @Override
          public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
            mSimpleDraweeView
                .getHierarchy()
                .setBackgroundImage(isChecked ? new CheckerBoardDrawable(getResources()) : null);
          }
        });
=====================================================================
Found a 12 line (57 tokens) duplication in the following files: 
Starting at line 54 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\androidTest\java\com\facebook\webpsupport\WebpBitmapFactoryTest.java
Starting at line 74 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\androidTest\java\com\facebook\webpsupport\WebpDecodingTest.java

    } catch (IOException e) {
      throw Throwables.propagate(e);
    }
  }

  private InputStream getTestImageInputStream(String path) {
    try {
      return mInstrumentation.getContext().getResources().getAssets().open(path);
    } catch (IOException e) {
      throw Throwables.propagate(e);
    }
  }
=====================================================================
Found a 11 line (57 tokens) duplication in the following files: 
Starting at line 87 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\androidTest\java\com\facebook\webpsupport\WebpBitmapFactoryTest.java
Starting at line 98 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\androidTest\java\com\facebook\webpsupport\WebpBitmapFactoryTest.java

    final Bitmap bitmap = mWebpBitmapFactory.decodeStream(getTestJpegInputStream(), null, null);

    assertNotNull("Bitmap should not be null", bitmap);
    assertEquals("Width should be decoded properly", 20, bitmap.getWidth());
    assertEquals("Height should be decoded properly", 20, bitmap.getHeight());

    assertEquals("Bitmap pixels should be red", 0xFFFF0100, bitmap.getPixel(5, 8));
  }

  @Test
  public void testWebpDecodeStream() throws Throwable {
=====================================================================
Found a 10 line (56 tokens) duplication in the following files: 
Starting at line 135 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java

            eq(byteBuffer.getNativePtr()), eq(byteBuffer.size()), any(ImageDecodeOptions.class)))
        .thenReturn(mockGifImage);
    when(mockGifImage.getWidth()).thenReturn(50);
    when(mockGifImage.getHeight()).thenReturn(50);

    testCreateWithPreviewBitmap(mockGifImage, mockBitmap, byteBuffer);
  }

  @Test
  public void testCreateWithPreviewBitmapUsingByteBuffer() throws Exception {
=====================================================================
Found a 10 line (56 tokens) duplication in the following files: 
Starting at line 135 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

            eq(byteBuffer.getNativePtr()), eq(byteBuffer.size()), any(ImageDecodeOptions.class)))
        .thenReturn(mockWebPImage);
    when(mockWebPImage.getWidth()).thenReturn(50);
    when(mockWebPImage.getHeight()).thenReturn(50);

    testCreateWithPreviewBitmap(mockWebPImage, byteBuffer, mockBitmap);
  }

  @Test
  public void testCreateWithPreviewBitmapUsingByteBuffer() throws Exception {
=====================================================================
Found a 34 line (56 tokens) duplication in the following files: 
Starting at line 236 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedColorDrawable.java
Starting at line 198 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedDrawable.java

      invalidateSelf();
    }
  }

  /** Gets whether image should be scaled down inside borders. */
  @Override
  public boolean getScaleDownInsideBorders() {
    return mScaleDownInsideBorders;
  }

  /**
   * Sets FILTER_BITMAP_FLAG flag to Paint. {@link android.graphics.Paint#FILTER_BITMAP_FLAG}
   *
   * <p>This should generally be on when drawing bitmaps, unless performance-bound (rendering to
   * software canvas) or preferring pixelation artifacts to blurriness when scaling significantly.
   *
   * @param paintFilterBitmap whether to set FILTER_BITMAP_FLAG flag to Paint.
   */
  @Override
  public void setPaintFilterBitmap(boolean paintFilterBitmap) {
    if (mPaintFilterBitmap != paintFilterBitmap) {
      mPaintFilterBitmap = paintFilterBitmap;
      invalidateSelf();
    }
  }

  /** Gets whether to set FILTER_BITMAP_FLAG flag to Paint. */
  @Override
  public boolean getPaintFilterBitmap() {
    return mPaintFilterBitmap;
  }

  @Override
  public void setRepeatEdgePixels(boolean repeatEdgePixels) {
=====================================================================
Found a 15 line (56 tokens) duplication in the following files: 
Starting at line 207 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 234 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java

    public static final ScaleType INSTANCE = new ScaleTypeFitStart();

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float scale = Math.min(scaleX, scaleY);
      float dx = parentRect.left;
      float dy = parentRect.top;
=====================================================================
Found a 7 line (56 tokens) duplication in the following files: 
Starting at line 274 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java
Starting at line 281 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java

    inOrder.verify(draweeHierarchy1, times(1)).setControllerOverlay(controllerOverlay1);
    inOrder.verify(draweeHierarchy1, times(0)).reset();
    inOrder.verify(draweeHierarchy2, times(0)).setControllerOverlay(any(Drawable.class));
    inOrder.verify(draweeHierarchy2, times(0)).reset();

    // change controller overlay
    mController.setControllerOverlay(controllerOverlay2);
=====================================================================
Found a 7 line (56 tokens) duplication in the following files: 
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 158 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 117 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100, mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING, mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
=====================================================================
Found a 7 line (56 tokens) duplication in the following files: 
Starting at line 124 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 141 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 100 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 153 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[2]);
    Assert.assertEquals(100, mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING, mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
=====================================================================
Found a 5 line (56 tokens) duplication in the following files: 
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 213 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 302 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 182 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 208 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 288 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    verify(mCallback, times(2)).invalidateDrawable(mFadeDrawable);
    Assert.assertEquals(fadeUpToLayer ? 255 : 0, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(FadeDrawable.TRANSITION_NONE, mFadeDrawable.mTransitionState);
=====================================================================
Found a 11 line (56 tokens) duplication in the following files: 
Starting at line 154 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 235 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

    subscriber2.onNewResult(mSrc2);
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);

    testClose(dataSource, mSrc2);
    verifyState(dataSource, null, CLOSED, FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
  }

  /** First data source succeeded, no intermediate results. */
  @Test
  public void testLifecycle_S1_C() {
=====================================================================
Found a 11 line (56 tokens) duplication in the following files: 
Starting at line 170 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 198 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 411 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 444 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    subscriber1.onNewResult(mSrc1);
    verifySubscriber(dataSource, mSrc1, ON_NEW_RESULT);
    verifyState(dataSource, mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);

    testClose(dataSource, mSrc1);
    verifyState(dataSource, null, CLOSED, FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
  }

  /** First data source succeeded, with multiple intermediate results. */
  @Test
  public void testLifecycle_I1_I1_S1_C() {
=====================================================================
Found a 11 line (56 tokens) duplication in the following files: 
Starting at line 236 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 288 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 308 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    mInOrder.verify(mSrc2).close();
    verifySubscriber(dataSource, mSrc1, ON_NEW_RESULT);
    verifyState(dataSource, mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val1b, NOT_FAILED, null);

    testClose(dataSource, mSrc1);
    verifyState(dataSource, null, CLOSED, FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
  }

  /** Second data source produced its final result, followed by the first data source. */
  @Test
  public void testLifecycle_S2_S1_C() {
=====================================================================
Found a 8 line (56 tokens) duplication in the following files: 
Starting at line 285 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipelineFactory.java
Starting at line 426 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipelineFactory.java

              getMainFileCache(),
              mConfig.getPoolFactory().getPooledByteBufferFactory(mConfig.getMemoryChunkType()),
              mConfig.getPoolFactory().getPooledByteStreams(),
              mConfig.getExecutorSupplier().forLocalStorageRead(),
              mConfig.getExecutorSupplier().forLocalStorageWrite(),
              mConfig.getImageCacheStatsTracker());
    }
    return mMainBufferedDiskCache;
=====================================================================
Found a 7 line (56 tokens) duplication in the following files: 
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 189 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java

    when(mPooledByteBufferFactory.newByteBuffer(any(InputStream.class))).thenThrow(mException);
    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, false);
  }
=====================================================================
Found a 9 line (56 tokens) duplication in the following files: 
Starting at line 646 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 879 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 953 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    assertThat(fetcher.getHiPriQueue()).containsExactly(hipri2);
    assertThat(fetcher.getLowPriQueue()).isEmpty();

    // Simulate a failure in hipri1.
    getOnlyElement(recordingNetworkFetcher.callbacks.get(hipri1.delegatedState))
        .onFailure(new Exception());

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
    assertThat(fetcher.getHiPriQueue()).containsExactly(hipri2);
=====================================================================
Found a 14 line (56 tokens) duplication in the following files: 
Starting at line 199 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 241 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 267 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 299 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  public void testToggleExclusive() {
    mCache =
        createDummyAdaptiveCountingMemoryCache(
            mParamsSupplier,
            mCacheTrimStrategy,
            mValueDescriptor,
            100,
            1,
            2,
            initialLFUCacheFractionPromil);
    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
    cachedRef.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
=====================================================================
Found a 9 line (56 tokens) duplication in the following files: 
Starting at line 1344 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1407 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    assertLFUExclusivelyOwned(KEYS[1], 10);

    // insert item2 to LFU
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2a = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
    valueRef2a.close();
    assertLFUExclusivelyOwned(KEYS[1], 10);
    assertLFUExclusivelyOwned(KEYS[2], 20);
=====================================================================
Found a 7 line (56 tokens) duplication in the following files: 
Starting at line 1622 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1633 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1648 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1662 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1717 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

        mCache.mMostFrequentlyUsedExclusiveEntries.contains(key));
    AbstractAdaptiveCountingMemoryCache.Entry<String, Integer> entry =
        mCache.mCachedEntries.get(key);
    assertNotNull("entry not found in the cache", entry);
    assertEquals("key mismatch", key, entry.key);
    assertEquals("value mismatch", value, entry.valueRef.get());
    assertEquals("client count mismatch", count, entry.clientCount);
=====================================================================
Found a 8 line (56 tokens) duplication in the following files: 
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 92 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 92 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 92 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java

    assertArrayEquals(mData, getBytes(sb1), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(1, 0),
            8, new IntPair(0, 1),
            4, new IntPair(0, 1)),
=====================================================================
Found a 11 line (56 tokens) duplication in the following files: 
Starting at line 72 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java
Starting at line 156 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java

    mGestureDetector.onTouchEvent(event4);
    assertFalse(mGestureDetector.isGestureInProgress());
    assertEquals(0, mGestureDetector.getPointerCount());
    inOrder.verify(mListener).onGestureEnd(mGestureDetector);
    inOrder.verifyNoMoreInteractions();

    event1.recycle();
    event2.recycle();
    event3.recycle();
    event4.recycle();
  }
=====================================================================
Found a 12 line (56 tokens) duplication in the following files: 
Starting at line 92 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRecyclerViewFragment.java
Starting at line 95 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\VitoViewRecyclerFragment.java

    private List<Uri> mUris;

    SimpleAdapter(List<Uri> uris) {
      mUris = uris;
      setHasStableIds(true);
    }

    @Override
    public SimpleViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
      View itemView =
          LayoutInflater.from(parent.getContext())
              .inflate(R.layout.drawee_recycler_item, parent, false);
=====================================================================
Found a 15 line (56 tokens) duplication in the following files: 
Starting at line 71 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\color\ColorImageExample.java
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\svg\SvgDecoderExample.java

    public static final byte[] HEADER = ImageFormatCheckerUtils.asciiBytes(COLOR_TAG);

    @Override
    public int getHeaderSize() {
      return HEADER.length;
    }

    @Nullable
    @Override
    public ImageFormat determineFormat(byte[] headerBytes, int headerSize) {
      if (headerSize < getHeaderSize()) {
        return null;
      }
      if (ImageFormatCheckerUtils.startsWithPattern(headerBytes, HEADER)) {
        return IMAGE_FORMAT_COLOR;
=====================================================================
Found a 7 line (55 tokens) duplication in the following files: 
Starting at line 118 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\ForwardingControllerListener.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\ForwardingControllerListener.java

  public void onIntermediateImageFailed(String id, Throwable throwable) {
    final int numberOfListeners = mListeners.size();
    for (int i = 0; i < numberOfListeners; ++i) {
      try {
        ControllerListener<? super INFO> listener = mListeners.get(i);
        if (listener != null) {
          listener.onIntermediateImageFailed(id, throwable);
=====================================================================
Found a 10 line (55 tokens) duplication in the following files: 
Starting at line 339 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 357 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

        (ForwardingDrawable) fadeDrawable.getDrawable(actualImageIndex);

    // initial state -> final image (non-immediate)
    // initial state
    assertEquals(ColorDrawable.class, actualImageSettableDrawable.getCurrent().getClass());
    assertEquals(true, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set final image (non-immediate)
    dh.setImage(mActualImage1, 1f, false);
=====================================================================
Found a 8 line (55 tokens) duplication in the following files: 
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java
Starting at line 54 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java

    assertEquals(makeMeasureSpec(460, EXACTLY), mSpec.width);
    assertEquals(makeMeasureSpec(310, EXACTLY), mSpec.height);

    // height
    mSpec.width = makeMeasureSpec(410, EXACTLY);
    mSpec.height = makeMeasureSpec(310, UNSPECIFIED);
    LayoutParams layoutParams2 = new LayoutParams(MATCH_PARENT, WRAP_CONTENT);
    AspectRatioMeasure.updateMeasureSpec(mSpec, 2f, layoutParams2, 10, 10);
=====================================================================
Found a 6 line (55 tokens) duplication in the following files: 
Starting at line 333 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 412 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

  public void testFetchFromBitmapCacheDueToMethodCall() {
    Producer<CloseableReference<CloseableImage>> bitmapCacheSequence = mock(Producer.class);
    when(mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest))
        .thenReturn(bitmapCacheSequence);
    mImagePipeline.fetchImageFromBitmapCache(mImageRequest, mCallerContext);
    verify(mRequestListener1).onRequestStart(mImageRequest, mCallerContext, "0", false);
=====================================================================
Found a 16 line (55 tokens) duplication in the following files: 
Starting at line 340 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\CloseableProducerToDataSourceAdapterTest.java
Starting at line 308 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

    verifyWithResult(mResultRef1, LAST);
    testSubscribe(ON_NEW_RESULT);
    testClose(FINISHED, 2);
  }

  @Test
  public void test_F_a_C() {
    testFailure(null, 1);
    testSubscribe(ON_FAILURE);
    testClose(mException);
  }

  @Test
  public void test_F_I_a_C() {
    testFailure(null, 1);
    mInternalConsumer.onNewResult(mResultRef1, Consumer.NO_FLAGS);
=====================================================================
Found a 6 line (55 tokens) duplication in the following files: 
Starting at line 642 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 714 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 813 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 903 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    PriorityFetchState<FetchState> hipri1 = fetch(fetcher, "hipri1", callback, true);
    PriorityFetchState<FetchState> hipri2 = fetch(fetcher, "hipri2", callback, true);

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
    assertThat(fetcher.getHiPriQueue()).containsExactly(hipri2);
    assertThat(fetcher.getLowPriQueue()).isEmpty();
=====================================================================
Found a 9 line (55 tokens) duplication in the following files: 
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 112 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    mCache.cache(KEY, newReference(100));
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(0, 0);
    assertSharedWithCount(KEY, 100, 1);
    verify(mReleaser, never()).release(anyInt());
  }

  @Test
  public void testClosingOriginalReference() {
=====================================================================
Found a 12 line (55 tokens) duplication in the following files: 
Starting at line 725 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 532 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

        mCache.mCachedEntries.get(KEYS[3]);

    int numEvictedEntries =
        mCache.removeAll(
            new Predicate<String>() {
              @Override
              public boolean apply(String key) {
                return key.equals(KEYS[2]) || key.equals(KEYS[3]);
              }
            });

    assertEquals(2, numEvictedEntries);
=====================================================================
Found a 14 line (55 tokens) duplication in the following files: 
Starting at line 65 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\AshmemMemoryChunkPoolTest.java
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\NativeMemoryChunkPoolTest.java
Starting at line 64 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\BufferMemoryChunkPoolTest.java

    int[] invalidSizes = new int[] {-1, -2, 0};
    for (int size : invalidSizes) {
      try {
        mPool.getBucketedSize(size);
        Assert.fail();
      } catch (BasePool.InvalidSizeException e) {
        // all good
      }
    }
  }

  @Test
  public void testGetBucketedSizeForValue() {
    Assert.assertEquals(32, mPool.getBucketedSizeForValue(new FakeAshmemMemoryChunk(32)));
=====================================================================
Found a 12 line (55 tokens) duplication in the following files: 
Starting at line 34 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\testing\FakeAshmemMemoryChunkPool.java
Starting at line 31 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\testing\FakeNativeMemoryChunkPool.java
Starting at line 36 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\testing\FakeBufferMemoryChunkPool.java

    return new FakeAshmemMemoryChunk(bucketedSize);
  }

  private static SparseIntArray getBucketSizes() {
    final SparseIntArray bucketSizes = new SparseIntArray();
    bucketSizes.put(4, 10);
    bucketSizes.put(8, 10);
    bucketSizes.put(16, 10);
    bucketSizes.put(32, 10);
    return bucketSizes;
  }
}
=====================================================================
Found a 10 line (55 tokens) duplication in the following files: 
Starting at line 163 of C:\Users\anaca\Documents\Projetos\fresco\native-imagetranscoder\src\main\java\com\facebook\imagepipeline\nativecode\NativeJpegTranscoder.java
Starting at line 205 of C:\Users\anaca\Documents\Projetos\fresco\native-imagetranscoder\src\main\java\com\facebook\imagepipeline\nativecode\NativeJpegTranscoder.java

      final int rotationAngle,
      final int scaleNumerator,
      final int quality)
      throws IOException {
    NativeJpegTranscoderSoLoader.ensure();
    Preconditions.checkArgument(scaleNumerator >= MIN_SCALE_NUMERATOR);
    Preconditions.checkArgument(scaleNumerator <= MAX_SCALE_NUMERATOR);
    Preconditions.checkArgument(quality >= MIN_QUALITY);
    Preconditions.checkArgument(quality <= MAX_QUALITY);
    Preconditions.checkArgument(JpegTranscoderUtils.isRotationAngleAllowed(rotationAngle));
=====================================================================
Found a 7 line (54 tokens) duplication in the following files: 
Starting at line 169 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java

            eq(byteBuffer.getNativePtr()), eq(byteBuffer.size()), any(ImageDecodeOptions.class)))
        .thenReturn(mockGifImage);
    when(mockGifImage.getWidth()).thenReturn(50);
    when(mockGifImage.getHeight()).thenReturn(50);

    testCreateWithDecodeAlFrames(mockGifImage, mockBitmap1, mockBitmap2, byteBuffer);
  }
=====================================================================
Found a 7 line (54 tokens) duplication in the following files: 
Starting at line 169 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

            eq(byteBuffer.getNativePtr()), eq(byteBuffer.size()), any(ImageDecodeOptions.class)))
        .thenReturn(mockWebPImage);
    when(mockWebPImage.getWidth()).thenReturn(50);
    when(mockWebPImage.getHeight()).thenReturn(50);

    testCreateWithDecodeAlFrames(mockWebPImage, byteBuffer, mockBitmap1, mockBitmap2);
  }
=====================================================================
Found a 6 line (54 tokens) duplication in the following files: 
Starting at line 285 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 930 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    GenericDraweeHierarchy dh = mBuilder.setRoundingParams(roundingParams).build();
    RootDrawable rootDrawable = (RootDrawable) dh.getTopLevelDrawable();
    RoundedCornersDrawable roundedDrawable = (RoundedCornersDrawable) rootDrawable.getCurrent();
    assertRoundingParams(roundingParams, roundedDrawable);
    assertEquals(roundingParams.getOverlayColor(), roundedDrawable.getOverlayColor());
    FadeDrawable fadeDrawable = (FadeDrawable) roundedDrawable.getCurrent();
=====================================================================
Found a 7 line (54 tokens) duplication in the following files: 
Starting at line 30 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 377 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

  public void testLifecycle_F2_F3_F1_C() {
    DataSource<Object> dataSource = getAndSubscribe();
    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribeM(mDataSourceSupplier1, mSrc1);
    DataSubscriber<Object> subscriber2 = verifyGetAndSubscribeM(mDataSourceSupplier2, mSrc2);
    DataSubscriber<Object> subscriber3 = verifyGetAndSubscribe(mDataSourceSupplier3, mSrc3);

    setState(mSrc2, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, mock(Throwable.class));
=====================================================================
Found a 12 line (54 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 12 line (54 tokens) duplication in the following files: 
Starting at line 337 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 555 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0xf1,
        (byte) 0xf2,
        (byte) 0xf3,
        (byte) 0xf4,
        (byte) 0xf5,
        (byte) 0xf6,
        (byte) 0xf7,
        (byte) 0xf8,
        (byte) 0xf9,
        (byte) 0xfa,
        (byte) 0xff,
        (byte) 0xc4,
=====================================================================
Found a 14 line (54 tokens) duplication in the following files: 
Starting at line 426 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DefaultDiskStorageTest.java
Starting at line 460 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DefaultDiskStorageTest.java

    Assert.assertTrue(new File(mDirectory, "something-arbitrary").createNewFile());

    long lastModified = mDirectory.lastModified() - 1000;
    // some previous date to the "now" used for file creation
    Assert.assertTrue(mDirectory.setLastModified(lastModified));
    // check it was changed
    Assert.assertEquals(lastModified, mDirectory.lastModified());

    getStorageSupplier(1).get();

    // mDirectory exists...
    Assert.assertTrue(mDirectory.exists());
    // but it was created now
    Assert.assertTrue(lastModified < mDirectory.lastModified());
=====================================================================
Found a 6 line (54 tokens) duplication in the following files: 
Starting at line 836 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 854 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    cachedRefs[8].close();
    assertSharedWithCount(KEYS[0], 100, 1);
    assertSharedWithCount(KEYS[1], 101, 1);
    assertSharedWithCount(KEYS[5], 105, 1);
    assertSharedWithCount(KEYS[9], 109, 1);
    assertExclusivelyOwned(KEYS[8], 108);
=====================================================================
Found a 10 line (54 tokens) duplication in the following files: 
Starting at line 163 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 185 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 163 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 185 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 163 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 185 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java

      Assert.assertEquals(expected[i], actual[i], i);
    }
  }

  private static byte[] getBytes(MemoryPooledByteBuffer bb) {
    byte[] bytes = new byte[bb.size()];
    bb.getCloseableReference().get().read(0, bytes, 0, bytes.length);
    return bytes;
  }
}
=====================================================================
Found a 13 line (54 tokens) duplication in the following files: 
Starting at line 23 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\FrescoVitoLithoGalleryFragment.java
Starting at line 22 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\FrescoVitoLithoSectionsFragment.java

public class FrescoVitoLithoGalleryFragment extends BaseShowcaseFragment {

  @Nullable
  @Override
  public View onCreateView(
      @Nullable LayoutInflater inflater,
      @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    final ComponentContext c = new ComponentContext(getContext());
    return LithoView.create(
        c,
        RecyclerCollectionComponent.create(c)
            .section(SimpleGallerySection.create(new SectionContext(c)).build())
=====================================================================
Found a 8 line (53 tokens) duplication in the following files: 
Starting at line 121 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 115 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedSingleUsePostprocessorProducerTest.java

    mInOrder.verify(mConsumer).onNewResult(any(CloseableReference.class), eq(Consumer.NO_FLAGS));
    mInOrder.verifyNoMoreInteractions();

    assertEquals(1, mResults.size());
    CloseableReference<CloseableImage> res0 = mResults.get(0);
    assertTrue(CloseableReference.isValid(res0));
    assertSame(sourceCloseableAnimatedImage, res0.get());
    res0.close();
=====================================================================
Found a 8 line (53 tokens) duplication in the following files: 
Starting at line 154 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\preparation\DefaultBitmapFramePreparerTest.java
Starting at line 179 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\preparation\DefaultBitmapFramePreparerTest.java

  public void testPrepareFrame_whenReusedAndPlatformBitmapAvailable_thenCacheReusedBitmap() {
    when(mBitmapFrameCache.getBitmapToReuseForFrame(
            1, BACKEND_INTRINSIC_WIDTH, BACKEND_INTRINSIC_HEIGHT))
        .thenReturn(mBitmapReference);
    when(mPlatformBitmapFactory.createBitmap(
            BACKEND_INTRINSIC_WIDTH, BACKEND_INTRINSIC_HEIGHT, BITMAP_CONFIG))
        .thenReturn(mBitmapReference);
    when(mBitmapFrameRenderer.renderFrame(1, mBitmap)).thenReturn(true);
=====================================================================
Found a 16 line (53 tokens) duplication in the following files: 
Starting at line 367 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 401 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java

    public static final ScaleType INSTANCE = new ScaleTypeCenterCrop();

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float scale, dx, dy;
      if (scaleY > scaleX) {
        scale = scaleY;
        dx = parentRect.left + (parentRect.width() - childWidth * scale) * 0.5f;
=====================================================================
Found a 13 line (53 tokens) duplication in the following files: 
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java
Starting at line 169 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java

    mFadeDrawable.fadeInLayer(ACTUAL_LAYER_INDEX);
    mFadeDrawable.draw(mCanvas);
    verify(mOnFadeListener, times(1)).onFadeStarted();

    mFadeDrawable.finishTransitionImmediately();
    mFadeDrawable.draw(mCanvas);
    verify(mOnFadeListener, times(1)).onFadeFinished();

    verifyNoMoreInteractions(mOnFadeListener);
  }

  @Test
  public void testFadeInAll() {
=====================================================================
Found a 9 line (53 tokens) duplication in the following files: 
Starting at line 174 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 242 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

  public void testHierarchy_WithAllBranches() throws Exception {
    GenericDraweeHierarchy dh =
        mBuilder
            .setPlaceholderImage(mPlaceholderImage, ScaleType.CENTER)
            .setRetryImage(mRetryImage, ScaleType.FIT_CENTER)
            .setFailureImage(mFailureImage, ScaleType.FIT_CENTER)
            .setProgressBarImage(mProgressBarImage, ScaleType.CENTER)
            .setActualImageScaleType(ScaleType.CENTER_CROP)
            .build();
=====================================================================
Found a 10 line (53 tokens) duplication in the following files: 
Starting at line 339 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 371 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 386 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

        (ForwardingDrawable) fadeDrawable.getDrawable(actualImageIndex);

    // initial state -> final image (non-immediate)
    // initial state
    assertEquals(ColorDrawable.class, actualImageSettableDrawable.getCurrent().getClass());
    assertEquals(true, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
    // set final image (non-immediate)
    dh.setImage(mActualImage1, 1f, false);
=====================================================================
Found a 6 line (53 tokens) duplication in the following files: 
Starting at line 442 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 468 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 479 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 495 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 506 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 517 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 533 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 556 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 572 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 583 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 610 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 621 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(true, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
=====================================================================
Found a 6 line (53 tokens) duplication in the following files: 
Starting at line 453 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 544 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(false, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
=====================================================================
Found a 8 line (53 tokens) duplication in the following files: 
Starting at line 54 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListenerTest.java
Starting at line 89 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListenerTest.java
Starting at line 117 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListenerTest.java
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListenerTest.java

    int expectedNumOfTimestamps = 0;

    when(mMonotonicClock.now()).thenReturn(startTime);
    mListener.onSubmit(CONTROLLER_ID, CALLER_CONTEXT);
    expectedNumOfTimestamps++;
    when(mImagePerfState.getImageLoadStatus()).thenReturn(ImageLoadStatus.REQUESTED);

    when(mMonotonicClock.now()).thenReturn(imageLoadTime);
=====================================================================
Found a 5 line (53 tokens) duplication in the following files: 
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java

    map.put(k4, v4);
    return Collections.unmodifiableMap(map);
  }

  public static <K, V> Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5) {
=====================================================================
Found a 7 line (53 tokens) duplication in the following files: 
Starting at line 170 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 198 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 460 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    subscriber1.onNewResult(mSrc1);
    verifySubscriber(dataSource, mSrc1, ON_NEW_RESULT);
    verifyState(dataSource, mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);

    testClose(dataSource, mSrc1);
    verifyState(dataSource, null, CLOSED, FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
  }
=====================================================================
Found a 7 line (53 tokens) duplication in the following files: 
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java

  public void onProducerFinishWithSuccess(
      String requestId, String producerName, @Nullable Map<String, String> extraMap) {
    final int numberOfListeners = mRequestListeners.size();
    for (int i = 0; i < numberOfListeners; ++i) {
      RequestListener listener = mRequestListeners.get(i);
      try {
        listener.onProducerFinishWithSuccess(requestId, producerName, extraMap);
=====================================================================
Found a 13 line (53 tokens) duplication in the following files: 
Starting at line 37 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducer.java
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PostprocessedBitmapMemoryCacheProducer.java

  public BitmapMemoryCacheProducer(
      MemoryCache<CacheKey, CloseableImage> memoryCache,
      CacheKeyFactory cacheKeyFactory,
      Producer<CloseableReference<CloseableImage>> inputProducer) {
    mMemoryCache = memoryCache;
    mCacheKeyFactory = cacheKeyFactory;
    mInputProducer = inputProducer;
  }

  @Override
  public void produceResults(
      final Consumer<CloseableReference<CloseableImage>> consumer,
      final ProducerContext producerContext) {
=====================================================================
Found a 17 line (53 tokens) duplication in the following files: 
Starting at line 118 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcher.java
Starting at line 157 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcher.java

  public PriorityNetworkFetcher(
      NetworkFetcher<FETCH_STATE> delegate,
      boolean isHiPriFifo,
      int maxOutstandingHiPri,
      int maxOutstandingLowPri,
      boolean inflightFetchesCanBeCancelled,
      int maxNumberOfRequeue,
      boolean doNotCancelRequests,
      int immediateRequeueCount,
      int requeueDelayTimeInMillis,
      boolean multipleDequeue,
      boolean nonRecoverableExceptionPreventsRequeue,
      int maxConnectAttemptCount,
      int maxAttemptCount,
      boolean retryLowPriAll,
      boolean retryLowPriUnknownHostException,
      boolean retryLowPriConnectionException) {
=====================================================================
Found a 5 line (53 tokens) duplication in the following files: 
Starting at line 314 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener).onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, null);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
=====================================================================
Found a 10 line (53 tokens) duplication in the following files: 
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 113 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ResizeAndRotateProducerTest.java

    mFakeClockForTime.incrementBy(1000);
    mFakeClockForWorker.incrementBy(1000);
    mFakeClockForScheduled.incrementBy(1000);
    PowerMockito.mockStatic(SystemClock.class);
    when(SystemClock.uptimeMillis())
        .thenAnswer(
            new Answer<Long>() {
              @Override
              public Long answer(InvocationOnMock invocation) throws Throwable {
                return mFakeClockForTime.now();
=====================================================================
Found a 6 line (53 tokens) duplication in the following files: 
Starting at line 93 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java
Starting at line 106 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

    doReturn(mResult).when(mResultSupplier).get();
    mStatefulProducerRunnable.run();
    verify(mConsumer).onNewResult(mResult, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, mSuccessMap);
=====================================================================
Found a 13 line (53 tokens) duplication in the following files: 
Starting at line 248 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 181 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

    return (newValueSize <= mMemoryCacheParams.maxCacheEntrySize)
        && (getInUseCount() <= mMemoryCacheParams.maxCacheEntries - 1)
        && (getInUseSizeInBytes() <= mMemoryCacheParams.maxCacheSize - newValueSize);
  }

  /**
   * Gets the item with the given key, or null if there is no such item.
   *
   * <p>It is the caller's responsibility to close the returned reference once not needed anymore.
   */
  @Nullable
  public CloseableReference<V> get(final K key) {
    Preconditions.checkNotNull(key);
=====================================================================
Found a 11 line (53 tokens) duplication in the following files: 
Starting at line 609 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 460 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

  }

  private void maybeClose(@Nullable ArrayList<Entry<K, V>> oldEntries) {
    if (oldEntries != null) {
      for (Entry<K, V> oldEntry : oldEntries) {
        CloseableReference.closeSafely(referenceToClose(oldEntry));
      }
    }
  }

  private void maybeNotifyExclusiveEntriesRemoval(
=====================================================================
Found a 12 line (53 tokens) duplication in the following files: 
Starting at line 288 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 320 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 203 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 226 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> newItem = mCache.cache(KEY, cachedRef);
    cachedRef.close();
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(0, 0);
    newItem.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(1, 100);
  }

  @Test
  public void testReuseExclusive_CacheSameItemWithDifferentKey() {
=====================================================================
Found a 14 line (53 tokens) duplication in the following files: 
Starting at line 506 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 599 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1472 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  public void testEviction_ByTotalCount() {
    mCache =
        createDummyAdaptiveCountingMemoryCache(
            mParamsSupplier,
            mCacheTrimStrategy,
            mValueDescriptor,
            100,
            1,
            2,
            initialLFUCacheFractionPromil);
    // value 5 cannot fit the cache
    CloseableReference<Integer> originalRef1 = newReference(10);
    CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);
    originalRef1.close();
=====================================================================
Found a 8 line (53 tokens) duplication in the following files: 
Starting at line 128 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\test\java\com\facebook\imagepipeline\platform\KitKatPurgeableDecoderTest.java
Starting at line 146 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\test\java\com\facebook\imagepipeline\platform\KitKatPurgeableDecoderTest.java

    setUpJpegDecode();
    CloseableReference<Bitmap> result =
        mKitKatPurgeableDecoder.decodeJPEGFromEncodedImage(
            mEncodedImage, DEFAULT_BITMAP_CONFIG, null, IMAGE_SIZE);
    verify(mFlexByteArrayPool).get(IMAGE_SIZE + 2);
    verifyStatic(BitmapFactory.class);
    BitmapFactory.decodeByteArray(
        same(mDecodeBuf), eq(0), eq(IMAGE_SIZE), argThat(new BitmapFactoryOptionsMatcher()));
=====================================================================
Found a 12 line (53 tokens) duplication in the following files: 
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\main\java\com\facebook\imagepipeline\memory\NativeMemoryChunk.java
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\main\java\com\facebook\imagepipeline\memory\BufferMemoryChunk.java

  }

  @Override
  public int getSize() {
    return mSize;
  }

  @Override
  public synchronized int write(
      final int memoryOffset, final byte[] byteArray, final int byteArrayOffset, final int count) {
    Preconditions.checkNotNull(byteArray);
    Preconditions.checkState(!isClosed());
=====================================================================
Found a 15 line (53 tokens) duplication in the following files: 
Starting at line 62 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\bitmap\BitmapAnimationFragment.java
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\color\SimpleColorFragment.java

    imageView.setOnClickListener(
        new View.OnClickListener() {
          @Override
          public void onClick(View v) {
            if (animatedDrawable.isRunning()) {
              animatedDrawable.stop();
            } else {
              animatedDrawable.start();
            }
          }
        });

    animatedDrawable.start();
  }
}
=====================================================================
Found a 10 line (53 tokens) duplication in the following files: 
Starting at line 168 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\HierarcherImplTest.java
Starting at line 206 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\HierarcherImplTest.java

    ImageOptions options = ImageOptions.create().errorRes(RES_ID).build();

    Drawable errorDrawable = mHierarcher.buildErrorDrawable(mResources, options);

    assertThat(errorDrawable).isNotNull();
    assertThat(errorDrawable).isInstanceOf(ScaleTypeDrawable.class);

    ScaleTypeDrawable scaleTypeDrawable = (ScaleTypeDrawable) errorDrawable;
    assertThat(scaleTypeDrawable.getScaleType())
        .isEqualTo(ImageOptions.defaults().getErrorScaleType());
=====================================================================
Found a 8 line (53 tokens) duplication in the following files: 
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\ImagePipelineUtilsImplTest.java
Starting at line 95 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\ImagePipelineUtilsImplTest.java

        ImageOptions.create().round(RoundingOptions.asCircle()).build();

    ImageRequest imageRequest = mImagePipelineUtils.buildImageRequest(URI, imageOptions);

    assertThat(imageRequest).isNotNull();
    assertThat(imageRequest.getSourceUri()).isEqualTo(URI);
    ImageDecodeOptions imageDecodeOptions = imageRequest.getImageDecodeOptions();
    assertThat(imageDecodeOptions).isEqualTo(mRoundingDecodeOptions);
=====================================================================
Found a 3 line (52 tokens) duplication in the following files: 
Starting at line 268 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 292 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    when(mPlatformBitmapFactory.createBitmap(anyInt(), anyInt(), any(Bitmap.Config.class)))
        .thenReturn(mBitmapRefererence);
    when(mBitmapFrameRenderer.renderFrame(anyInt(), any(Bitmap.class))).thenReturn(true);
=====================================================================
Found a 32 line (52 tokens) duplication in the following files: 
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedCornersDrawable.java
Starting at line 200 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedDrawable.java

  }

  /** Gets whether image should be scaled down inside borders. */
  @Override
  public boolean getScaleDownInsideBorders() {
    return mScaleDownInsideBorders;
  }

  /**
   * Sets FILTER_BITMAP_FLAG flag to Paint. {@link android.graphics.Paint#FILTER_BITMAP_FLAG}
   *
   * <p>This should generally be on when drawing bitmaps, unless performance-bound (rendering to
   * software canvas) or preferring pixelation artifacts to blurriness when scaling significantly.
   *
   * @param paintFilterBitmap whether to set FILTER_BITMAP_FLAG flag to Paint.
   */
  @Override
  public void setPaintFilterBitmap(boolean paintFilterBitmap) {
    if (mPaintFilterBitmap != paintFilterBitmap) {
      mPaintFilterBitmap = paintFilterBitmap;
      invalidateSelf();
    }
  }

  /** Gets whether to set FILTER_BITMAP_FLAG flag to Paint. */
  @Override
  public boolean getPaintFilterBitmap() {
    return mPaintFilterBitmap;
  }

  @Override
  public void setRepeatEdgePixels(boolean repeatEdgePixels) {
=====================================================================
Found a 4 line (52 tokens) duplication in the following files: 
Starting at line 274 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java
Starting at line 281 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java
Starting at line 288 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java

    inOrder.verify(draweeHierarchy1, times(1)).setControllerOverlay(controllerOverlay1);
    inOrder.verify(draweeHierarchy1, times(0)).reset();
    inOrder.verify(draweeHierarchy2, times(0)).setControllerOverlay(any(Drawable.class));
    inOrder.verify(draweeHierarchy2, times(0)).reset();
=====================================================================
Found a 5 line (52 tokens) duplication in the following files: 
Starting at line 114 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java
Starting at line 168 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java

    mMultiHolder.add(1, mHolder2);
    assertEquals(3, mMultiHolder.mHolders.size());
    assertEquals(mHolder1, mMultiHolder.mHolders.get(0));
    assertEquals(mHolder2, mMultiHolder.mHolders.get(1));
    assertEquals(mHolder3, mMultiHolder.mHolders.get(2));
=====================================================================
Found a 7 line (52 tokens) duplication in the following files: 
Starting at line 314 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\Preconditions.java
Starting at line 357 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\Preconditions.java

  private static String badElementIndex(int index, int size, @Nullable String desc) {
    if (index < 0) {
      return format("%s (%s) must not be negative", desc, index);
    } else if (size < 0) {
      throw new IllegalArgumentException("negative size: " + size);
    } else { // index >= size
      return format("%s (%s) must be less than size (%s)", desc, index, size);
=====================================================================
Found a 6 line (52 tokens) duplication in the following files: 
Starting at line 47 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\HashCodeUtil.java
Starting at line 60 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\HashCodeUtil.java
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\HashCodeUtil.java

      @Nullable Object o1, @Nullable Object o2, @Nullable Object o3, @Nullable Object o4) {
    return hashCode(
        o1 == null ? 0 : o1.hashCode(),
        o2 == null ? 0 : o2.hashCode(),
        o3 == null ? 0 : o3.hashCode(),
        o4 == null ? 0 : o4.hashCode());
=====================================================================
Found a 10 line (52 tokens) duplication in the following files: 
Starting at line 166 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java
Starting at line 209 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java

    doThrow(new IllegalArgumentException()).when(mMockStatFsExternal).restat(EXTERNAL_PATH);

    StatFsHelper statFsHelper = new StatFsHelper();
    statFsHelper.resetStats();

    long freeBytes = statFsHelper.getAvailableStorageSpace(StatFsHelper.StorageType.INTERNAL);
    assertEquals(INTERNAL_BLOCK_SIZE * INTERNAL_BLOCKS_FREE, freeBytes);

    freeBytes = statFsHelper.getAvailableStorageSpace(StatFsHelper.StorageType.EXTERNAL);
    assertEquals(0, freeBytes);
=====================================================================
Found a 7 line (52 tokens) duplication in the following files: 
Starting at line 411 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 444 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 460 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    mInOrder.verify(mSrc3).close();
    verifySubscriber(dataSource, mSrc1, ON_NEW_RESULT);
    verifyState(dataSource, mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);

    testClose(dataSource, mSrc1);
    verifyState(dataSource, null, CLOSED, FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
  }
=====================================================================
Found a 15 line (52 tokens) duplication in the following files: 
Starting at line 408 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 323 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

            result, iterator.hasNext() ? mStatusFlags : Consumer.IS_LAST | mStatusFlags);
      }
      return null;
    }
  }

  private class ProduceResultsFailureAnswer implements Answer<Void> {
    @Override
    public Void answer(InvocationOnMock invocation) throws Throwable {
      Consumer consumer = (Consumer) invocation.getArguments()[0];
      consumer.onFailure(mException);
      return null;
    }
  }
}
=====================================================================
Found a 7 line (52 tokens) duplication in the following files: 
Starting at line 140 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BranchOnSeparateImagesProducerTest.java
Starting at line 213 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BranchOnSeparateImagesProducerTest.java

        new EncodedImage(mSecondProducerFinalResult.getByteBufferRef());
    secondProducerEncodedImage.setRotationAngle(-1);
    secondProducerEncodedImage.setWidth(WIDTH / 2);
    secondProducerEncodedImage.setHeight(HEIGHT / 2);
    mSecondProducerConsumer.onNewResult(secondProducerEncodedImage, Consumer.IS_LAST);
    verify(mConsumer).onNewResult(secondProducerEncodedImage, Consumer.IS_LAST);
  }
=====================================================================
Found a 9 line (52 tokens) duplication in the following files: 
Starting at line 163 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 186 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java

    assertReferencesEqual(encodedImage, mJobScheduler.mEncodedImage);
    assertEquals(Consumer.IS_LAST, mJobScheduler.mStatus);
    assertEquals(0, mTestScheduledExecutorService.getPendingCount());
    assertEquals(0, mTestExecutorService.getPendingCount());
    assertEquals(0, mTestJobRunnable.jobs.size());
  }

  @Test
  public void testUpdate_Placeholder() {
=====================================================================
Found a 6 line (52 tokens) duplication in the following files: 
Starting at line 99 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\QualifiedResourceFetchProducerTest.java

  public void testFetchLocalContentUri() throws Exception {
    PooledByteBuffer pooledByteBuffer = mock(PooledByteBuffer.class);
    when(mPooledByteBufferFactory.newByteBuffer(any(InputStream.class)))
        .thenReturn(pooledByteBuffer);

    when(mContentResolver.openInputStream(mContentUri)).thenReturn(mock(InputStream.class));
=====================================================================
Found a 13 line (52 tokens) duplication in the following files: 
Starting at line 156 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java

    produceResults();

    mProducerContext.cancel();
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithCancellation(mProducerContext, PRODUCER_NAME, null);
    verify(mConsumer).onCancellation();
    mExecutor.runUntilIdle();
    verifyZeroInteractions(mPooledByteBufferFactory);
  }

  @Test
  public void testFetchLocalContentUri() throws Exception {
=====================================================================
Found a 5 line (52 tokens) duplication in the following files: 
Starting at line 242 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 250 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    ((SettableProducerContext) two.getContext()).setPriority(HIGH);
    assertThat(toTestEntry(fetcher.getHiPriQueue()))
        .containsExactlyElementsIn(toTestEntry(two, three, one))
        .inOrder();
    assertThat(toTestEntry(fetcher.getLowPriQueue())).isEmpty();
=====================================================================
Found a 7 line (52 tokens) duplication in the following files: 
Starting at line 339 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 374 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

        newFetcher(delegate, false, 2, 1, true, 0, false, false);

    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, false);
    PriorityFetchState<FetchState> two = fetch(fetcher, "2", callback, false);

    // 'one' was requested from the delegate, 'two' is waiting for a free slot.
    assertThat(fetcher.getCurrentlyFetching()).containsExactly(one);
=====================================================================
Found a 10 line (52 tokens) duplication in the following files: 
Starting at line 333 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

    mInOrder
        .verify(mProducerListener)
        .onProducerStart(mProducerContext, PostprocessorProducer.NAME);
    mInOrder.verify(mPostprocessor).process(mSourceBitmap, mPlatformBitmapFactory);
    mInOrder
        .verify(mProducerListener)
        .requiresExtraMap(mProducerContext, PostprocessorProducer.NAME);
    mInOrder
        .verify(mProducerListener)
        .onProducerFinishWithSuccess(
=====================================================================
Found a 10 line (52 tokens) duplication in the following files: 
Starting at line 1608 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 700 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    assertEquals(initialLFUCacheFractionPromil, mCache.mLFUFractionPromil);
  }

  private CloseableReference<Integer> newReference(int size) {
    return CloseableReference.of(size, mReleaser);
  }

  private void assertSharedWithCount(String key, Integer value, int count) {
    assertTrue("key not found in the cache", mCache.mCachedEntries.contains(key));
    assertFalse(
=====================================================================
Found a 10 line (52 tokens) duplication in the following files: 
Starting at line 84 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java

    mSizeSpinner.setOnItemSelectedListener(
        new AdapterView.OnItemSelectedListener() {
          @Override
          public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
            reloadImage();
          }

          @Override
          public void onNothingSelected(AdapterView<?> parent) {}
        });
=====================================================================
Found a 12 line (51 tokens) duplication in the following files: 
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\fresco\animation\bitmap\cache\FrescoFrameCacheTest.java
Starting at line 72 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\fresco\animation\bitmap\cache\FrescoFrameCacheTest.java

    CloseableReference<Bitmap> extractedReference =
        FrescoFrameCache.convertToBitmapReferenceAndClose(mImageReference);

    assertThat(extractedReference).isNotNull();
    assertThat(extractedReference.get()).isEqualTo(mUnderlyingBitmap);
    verify(mImageReference).close();

    extractedReference.close();
  }

  @Test
  public void testExtractAndClose_whenBitmapRecycled_thenReturnReference() throws Exception {
=====================================================================
Found a 6 line (51 tokens) duplication in the following files: 
Starting at line 324 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedColorDrawable.java
Starting at line 259 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedCornersDrawable.java

      mBorderPath.addCircle(mTempRect.centerX(), mTempRect.centerY(), radius, Path.Direction.CW);
    } else {
      for (int i = 0; i < mBorderRadii.length; i++) {
        mBorderRadii[i] = mRadii[i] + mPadding - mBorderWidth / 2;
      }
      mBorderPath.addRoundRect(mTempRect, mBorderRadii, Path.Direction.CW);
=====================================================================
Found a 6 line (51 tokens) duplication in the following files: 
Starting at line 590 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 628 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    dh.setRetry(new RuntimeException());
    assertEquals(mActualImage1, finalImageSettableDrawable.getCurrent());
    assertEquals(false, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(retryImageIndex));
=====================================================================
Found a 4 line (51 tokens) duplication in the following files: 
Starting at line 115 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java
Starting at line 138 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java

    assertEquals(3, mMultiHolder.mHolders.size());
    assertEquals(mHolder1, mMultiHolder.mHolders.get(0));
    assertEquals(mHolder2, mMultiHolder.mHolders.get(1));
    assertEquals(mHolder3, mMultiHolder.mHolders.get(2));
=====================================================================
Found a 6 line (51 tokens) duplication in the following files: 
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\ImagePerfMonitorTest.java
Starting at line 63 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\ImagePerfMonitorTest.java

    mImagePerfMonitor.setEnabled(true);

    verify(mController).addImageOriginListener(any(ImagePerfImageOriginListener.class));
    verify(mController).addControllerListener2(any(ImagePerfControllerListener2.class));
    verify(mController).addRequestListener(any(RequestListener.class));
    verify(mController).getId();
=====================================================================
Found a 5 line (51 tokens) duplication in the following files: 
Starting at line 106 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 253 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
    mInOrder.verify(mSrc3).close();
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2, NOT_FAILED, null);
=====================================================================
Found a 13 line (51 tokens) duplication in the following files: 
Starting at line 140 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\cache\StagingArea.java
Starting at line 167 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\cache\StagingArea.java

      synchronized (storedEncodedImage) {
        if (!EncodedImage.isValid(storedEncodedImage)) {
          // Reference is not valid, this means that someone cleared reference while it was still in
          // use. Log error
          // TODO: 3697790
          mMap.remove(key);
          FLog.w(
              TAG,
              "Found closed reference %d for key %s (%d)",
              System.identityHashCode(storedEncodedImage),
              key.getUriString(),
              System.identityHashCode(key));
          return null;
=====================================================================
Found a 11 line (51 tokens) duplication in the following files: 
Starting at line 409 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\CloseableProducerToDataSourceAdapterTest.java
Starting at line 377 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

    testNewResult(mResultRef1, INTERMEDIATE, 1);

    mInternalConsumer.onNewResult(null, Consumer.IS_LAST);
    verify(mRequestListener).onRequestSuccess(mSettableProducerContext);
    verify(mDataSubscriber1).onNewResult(mDataSource);
    verifyWithResult(null, LAST);

    testSubscribe(ON_NEW_RESULT);
    testClose(FINISHED, 2);
  }
}
=====================================================================
Found a 14 line (51 tokens) duplication in the following files: 
Starting at line 408 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 323 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SwallowResultProducerTest.java

            result, iterator.hasNext() ? mStatusFlags : Consumer.IS_LAST | mStatusFlags);
      }
      return null;
    }
  }

  private class ProduceResultsFailureAnswer implements Answer<Void> {
    @Override
    public Void answer(InvocationOnMock invocation) throws Throwable {
      Consumer consumer = (Consumer) invocation.getArguments()[0];
      consumer.onFailure(mException);
      return null;
    }
  }
=====================================================================
Found a 5 line (51 tokens) duplication in the following files: 
Starting at line 245 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 260 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 275 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java

    inOrder.verify(mJobScheduler).updateJob(encodedImage2, Consumer.NO_FLAGS);
    inOrder.verify(mProgressiveJpegParser).parseMoreData(argumentCaptor.capture());
    inOrder.verify(mJobScheduler, never()).scheduleJob();
    assertSame(
        ((EncodedImage) argumentCaptor.getValue()).getUnderlyingReferenceTestOnly(),
=====================================================================
Found a 9 line (51 tokens) duplication in the following files: 
Starting at line 140 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java

    assertReferencesEqual(encodedImage, mJobScheduler.mEncodedImage);
    assertEquals(Consumer.NO_FLAGS, mJobScheduler.mStatus);
    assertEquals(0, mTestScheduledExecutorService.getPendingCount());
    assertEquals(0, mTestExecutorService.getPendingCount());
    assertEquals(0, mTestJobRunnable.jobs.size());
  }

  @Test
  public void testUpdate_Intermediate_Invalid() {
=====================================================================
Found a 12 line (51 tokens) duplication in the following files: 
Starting at line 46 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 45 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java

  @Mock public AssetFileDescriptor mAssetFileDescriptor;
  @Mock public PooledByteBufferFactory mPooledByteBufferFactory;
  @Mock public Consumer<EncodedImage> mConsumer;
  @Mock public ImageRequest mImageRequest;
  @Mock public ProducerListener2 mProducerListener;
  @Mock public Exception mException;
  @Mock public ImagePipelineConfig mConfig;

  private TestExecutorService mExecutor;
  private SettableProducerContext mProducerContext;
  private final String mRequestId = "mRequestId";
  private LocalAssetFetchProducer mLocalAssetFetchProducer;
=====================================================================
Found a 9 line (51 tokens) duplication in the following files: 
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java

    mExecutor.runUntilIdle();

    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, false);
  }
}
=====================================================================
Found a 12 line (51 tokens) duplication in the following files: 
Starting at line 176 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

    performFailure(repeatedPostprocessorRunner);

    mInOrder
        .verify(mProducerListener)
        .onProducerStart(mProducerContext, PostprocessorProducer.NAME);
    mInOrder.verify(mPostprocessor).process(mSourceBitmap, mPlatformBitmapFactory);
    mInOrder
        .verify(mProducerListener)
        .requiresExtraMap(mProducerContext, PostprocessorProducer.NAME);
    mInOrder
        .verify(mProducerListener)
        .onProducerFinishWithFailure(
=====================================================================
Found a 6 line (51 tokens) duplication in the following files: 
Starting at line 142 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java
Starting at line 154 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

    doThrow(mException).when(mResultSupplier).get();
    mStatefulProducerRunnable.run();
    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, mFailureMap);
=====================================================================
Found a 6 line (51 tokens) duplication in the following files: 
Starting at line 53 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java
Starting at line 63 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java
Starting at line 100 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java

    mGestureDetector.onTouchEvent(event2);
    assertTrue(mGestureDetector.isGestureInProgress());
    assertEquals(1, mGestureDetector.getPointerCount());
    assertEquals(100f, mGestureDetector.getStartX()[0], 0);
    assertEquals(300f, mGestureDetector.getStartY()[0], 0);
    assertEquals(150f, mGestureDetector.getCurrentX()[0], 0);
=====================================================================
Found a 6 line (51 tokens) duplication in the following files: 
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java
Starting at line 124 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java

    mGestureDetector.onTouchEvent(event3);
    assertTrue(mGestureDetector.isGestureInProgress());
    assertEquals(2, mGestureDetector.getPointerCount());
    assertEquals(150f, mGestureDetector.getStartX()[0], 0);
    assertEquals(350f, mGestureDetector.getStartY()[0], 0);
    assertEquals(150f, mGestureDetector.getCurrentX()[0], 0);
=====================================================================
Found a 6 line (51 tokens) duplication in the following files: 
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java

    mGestureDetector.onTouchEvent(event5);
    assertTrue(mGestureDetector.isGestureInProgress());
    assertEquals(1, mGestureDetector.getPointerCount());
    assertEquals(550f, mGestureDetector.getStartX()[0], 0);
    assertEquals(650f, mGestureDetector.getStartY()[0], 0);
    assertEquals(550f, mGestureDetector.getCurrentX()[0], 0);
=====================================================================
Found a 10 line (50 tokens) duplication in the following files: 
Starting at line 229 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 178 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java
Starting at line 333 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java
Starting at line 160 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

    mInOrder
        .verify(mProducerListener)
        .onProducerStart(mProducerContext, PostprocessorProducer.NAME);
    mInOrder.verify(mPostprocessor).process(mSourceBitmap, mPlatformBitmapFactory);
    mInOrder
        .verify(mProducerListener)
        .requiresExtraMap(mProducerContext, PostprocessorProducer.NAME);
    mInOrder
        .verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PostprocessorProducer.NAME, mExtraMap);
=====================================================================
Found a 14 line (50 tokens) duplication in the following files: 
Starting at line 207 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 234 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 261 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 288 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java

    public static final ScaleType INSTANCE = new ScaleTypeFitStart();

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float scale = Math.min(scaleX, scaleY);
      float dx = parentRect.left;
=====================================================================
Found a 4 line (50 tokens) duplication in the following files: 
Starting at line 275 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 354 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java

      float dy = parentRect.top + (parentRect.height() - childHeight * scale) * 0.5f;
      outTransform.setScale(scale, scale);
      outTransform.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
    }
=====================================================================
Found a 8 line (50 tokens) duplication in the following files: 
Starting at line 66 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java
Starting at line 80 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java

    expectedMatrix.setRotate(90, drawable.getBounds().centerX(), drawable.getBounds().centerY());
    assertFalse(drawable.mRotationMatrix.isIdentity());
    AndroidGraphicsTestUtils.assertEquals(expectedMatrix, drawable.mRotationMatrix);
    verifySetBounds(expectedMatrix);
  }

  @Test
  public void testCreation_hundredAndEightyDegrees() {
=====================================================================
Found a 7 line (50 tokens) duplication in the following files: 
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java
Starting at line 146 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java

        new OrientedDrawable(mDrawable, 0, ExifInterface.ORIENTATION_TRANSPOSE);
    drawable.setBounds(mBounds);
    drawable.draw(mCanvas);

    Matrix expectedMatrix = new Matrix();
    expectedMatrix.setRotate(270, drawable.getBounds().centerX(), drawable.getBounds().centerY());
    expectedMatrix.postScale(1, -1);
=====================================================================
Found a 11 line (50 tokens) duplication in the following files: 
Starting at line 84 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ScaleTypeDrawableTest.java
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ScaleTypeDrawableTest.java

    when(mUnderlyingDrawable.getIntrinsicHeight()).thenReturn(-1);
    mScaleTypeDrawable.configureBounds();
    verify(mUnderlyingDrawable).getIntrinsicWidth();
    verify(mUnderlyingDrawable).getIntrinsicHeight();
    verify(mUnderlyingDrawable).setBounds(viewBounds);
    Assert.assertEquals(null, mScaleTypeDrawable.mDrawMatrix);
    verifyNoMoreInteractions(mUnderlyingDrawable);
  }

  @Test
  public void testConfigureBounds_SameAsView() {
=====================================================================
Found a 5 line (50 tokens) duplication in the following files: 
Starting at line 208 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 251 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    GenericDraweeHierarchy dh = mBuilder.setOverlays(Arrays.asList(mOverlay1, mOverlay2)).build();
    RootDrawable rootDrawable = (RootDrawable) dh.getTopLevelDrawable();
    FadeDrawable fadeDrawable = (FadeDrawable) rootDrawable.getCurrent();
    assertEquals(8, fadeDrawable.getNumberOfLayers());
    assertSame(mOverlay1, fadeDrawable.getDrawable(6));
=====================================================================
Found a 8 line (50 tokens) duplication in the following files: 
Starting at line 260 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 286 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 304 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 385 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 405 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

    verify(encodedSequence)
        .produceResults(any(Consumer.class), producerContextArgumentCaptor.capture());
    assertTrue(producerContextArgumentCaptor.getValue().isIntermediateResultExpected());
    assertEquals(producerContextArgumentCaptor.getValue().getPriority(), Priority.HIGH);
  }

  @Test
  public void testFetchNetworkEncodedImage() {
=====================================================================
Found a 7 line (50 tokens) duplication in the following files: 
Starting at line 410 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java
Starting at line 422 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java

    Assert.assertEquals(6, mStats.mFreeBytes);
    Assert.assertEquals(2, mStats.mUsedBytes);
    Assert.assertEquals(
        ImmutableMap.of(
            2, new IntPair(1, 0),
            4, new IntPair(0, 0),
            6, new IntPair(0, 1)),
=====================================================================
Found a 5 line (50 tokens) duplication in the following files: 
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\GenericByteArrayPoolTest.java
Starting at line 56 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\AshmemMemoryChunkPoolTest.java
Starting at line 55 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\BufferMemoryChunkPoolTest.java

  public void testGetBucketedSize() throws Exception {
    Assert.assertEquals(32, mPool.getBucketedSize(1));
    Assert.assertEquals(32, mPool.getBucketedSize(32));
    Assert.assertEquals(64, mPool.getBucketedSize(33));
    Assert.assertEquals(64, mPool.getBucketedSize(64));
=====================================================================
Found a 7 line (50 tokens) duplication in the following files: 
Starting at line 102 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 148 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 302 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 319 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    verify(mConsumer).onNewResult(mFinalImageReference, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
=====================================================================
Found a 13 line (50 tokens) duplication in the following files: 
Starting at line 195 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 410 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 325 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

      return null;
    }
  }

  private class ProduceResultsFailureAnswer implements Answer<Void> {
    @Override
    public Void answer(InvocationOnMock invocation) throws Throwable {
      Consumer consumer = (Consumer) invocation.getArguments()[0];
      consumer.onFailure(mException);
      return null;
    }
  }
}
=====================================================================
Found a 14 line (50 tokens) duplication in the following files: 
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java

        new LocalAssetFetchProducer(mExecutor, mPooledByteBufferFactory, mAssetManager);

    mProducerContext =
        new SettableProducerContext(
            mImageRequest,
            mRequestId,
            mProducerListener,
            mock(Object.class),
            ImageRequest.RequestLevel.FULL_FETCH,
            false,
            true,
            Priority.MEDIUM,
            mConfig);
    when(mImageRequest.getSourceUri()).thenReturn(Uri.parse("asset:///" + TEST_FILENAME));
=====================================================================
Found a 8 line (50 tokens) duplication in the following files: 
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 177 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 113 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java
Starting at line 117 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java

    assertSame(pooledByteBuffer, mCapturedEncodedImage.getByteBufferRef().get());
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener).onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, true);
  }

  @Test(expected = RuntimeException.class)
  public void testFetchLocalResourceFailsByThrowing() throws Exception {
=====================================================================
Found a 8 line (50 tokens) duplication in the following files: 
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java
Starting at line 190 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java

    mExecutor.runUntilIdle();

    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, false);
  }
=====================================================================
Found a 6 line (50 tokens) duplication in the following files: 
Starting at line 101 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

    mProducerContext.cancel();
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithCancellation(mProducerContext, PRODUCER_NAME, null);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
=====================================================================
Found a 7 line (50 tokens) duplication in the following files: 
Starting at line 527 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 539 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    assertThat(fetcher.getExtraMap(two, 123)).containsEntry("priority_changed_count", "0");

    // change priority from low to low (nothing should be changed)
    ((SettableProducerContext) one.getContext()).setPriority(LOW);
    assertThat(fetcher.getExtraMap(one, 123))
        .containsEntry("request_initial_priority_is_high", "false");
    assertThat(fetcher.getExtraMap(one, 123)).containsEntry("priority_changed_count", "0");
=====================================================================
Found a 9 line (50 tokens) duplication in the following files: 
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 88 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

    mMostFrequentlyUsedExclusiveEntries =
        new CountingLruMap<>(wrapValueDescriptor(valueDescriptor));
    mCachedEntries = new CountingLruMap<>(wrapValueDescriptor(valueDescriptor));
    mCacheTrimStrategy = cacheTrimStrategy;
    mMemoryCacheParamsSupplier = memoryCacheParamsSupplier;
    mMemoryCacheParams =
        Preconditions.checkNotNull(
            mMemoryCacheParamsSupplier.get(), "mMemoryCacheParamsSupplier returned null");
    mLastCacheParamsCheck = SystemClock.uptimeMillis();
=====================================================================
Found a 7 line (50 tokens) duplication in the following files: 
Starting at line 172 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 99 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

  }

  private ValueDescriptor<Entry<K, V>> wrapValueDescriptor(
      final ValueDescriptor<V> evictableValueDescriptor) {
    return new ValueDescriptor<Entry<K, V>>() {
      @Override
      public int getSizeInBytes(Entry<K, V> entry) {
=====================================================================
Found a 5 line (50 tokens) duplication in the following files: 
Starting at line 33 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferTest.java
Starting at line 33 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferTest.java
Starting at line 32 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferTest.java

public class MemoryPooledByteBufferTest {
  private static final byte[] BYTES = new byte[] {1, 4, 5, 0, 100, 34, 0, 1, -1, -1};
  private static final int BUFFER_LENGTH = BYTES.length - 2;

  @Mock private AshmemMemoryChunkPool mAshmemPool;
=====================================================================
Found a 9 line (50 tokens) duplication in the following files: 
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\main\java\com\facebook\imagepipeline\memory\NativeMemoryChunk.java
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\main\java\com\facebook\imagepipeline\memory\BufferMemoryChunk.java

    nativeCopyFromByteArray(mNativePtr + memoryOffset, byteArray, byteArrayOffset, actualCount);
    return actualCount;
  }

  @Override
  public synchronized int read(
      final int memoryOffset, final byte[] byteArray, final int byteArrayOffset, final int count) {
    Preconditions.checkNotNull(byteArray);
    Preconditions.checkState(!isClosed());
=====================================================================
Found a 9 line (50 tokens) duplication in the following files: 
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\SimpleScaleTypeAdapter.java
Starting at line 106 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRotationFragment.java
Starting at line 224 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 204 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\pjpeg\ImageFormatProgressiveJpegFragment.java
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java
Starting at line 203 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java
Starting at line 259 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java

    final LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());

    final View view =
        convertView != null
            ? convertView
            : layoutInflater.inflate(android.R.layout.simple_spinner_dropdown_item, parent, false);

    final TextView textView = (TextView) view.findViewById(android.R.id.text1);
    textView.setText(mEntries.get(position).description);
=====================================================================
Found a 16 line (50 tokens) duplication in the following files: 
Starting at line 121 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\keyframes\KeyframesDecoderExample.java
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\ninepatch\NinePatchExample.java

      mClosed = true;
    }

    @Override
    public boolean isClosed() {
      return mClosed;
    }

    @Override
    public void setImageExtras(@Nullable Map<String, Object> extras) {}

    @Override
    public void setImageExtra(String extra, Object value) {}

    @Override
    public int getWidth() {
=====================================================================
Found a 10 line (49 tokens) duplication in the following files: 
Starting at line 112 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\preparation\DefaultBitmapFramePreparerTest.java
Starting at line 161 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\preparation\DefaultBitmapFramePreparerTest.java
Starting at line 186 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\preparation\DefaultBitmapFramePreparerTest.java

    when(mBitmapFrameRenderer.renderFrame(1, mBitmap)).thenReturn(true);

    mDefaultBitmapFramePreparer.prepareFrame(mBitmapFrameCache, mAnimationBackend, 1);

    mExecutorService.getScheduledQueue().runNextPendingCommand();

    verify(mBitmapFrameCache, times(2)).contains(1);
    verify(mBitmapFrameCache)
        .getBitmapToReuseForFrame(1, BACKEND_INTRINSIC_WIDTH, BACKEND_INTRINSIC_HEIGHT);
    verify(mBitmapFrameRenderer).renderFrame(1, mBitmap);
=====================================================================
Found a 7 line (49 tokens) duplication in the following files: 
Starting at line 69 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\ForwardingControllerListener.java
Starting at line 86 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\ForwardingControllerListener.java
Starting at line 102 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\ForwardingControllerListener.java
Starting at line 118 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\ForwardingControllerListener.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\ForwardingControllerListener.java
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\ForwardingControllerListener.java

  public synchronized void onSubmit(String id, Object callerContext) {
    final int numberOfListeners = mListeners.size();
    for (int i = 0; i < numberOfListeners; ++i) {
      try {
        ControllerListener<? super INFO> listener = mListeners.get(i);
        if (listener != null) {
          listener.onSubmit(id, callerContext);
=====================================================================
Found a 6 line (49 tokens) duplication in the following files: 
Starting at line 286 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 309 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 295 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

        verify(mLayers[0]).setAlpha(255 - 51 * i);
        verify(mLayers[0]).draw(mCanvas);
      }
      verify(mLayers[1]).mutate();
      verify(mLayers[1]).setAlpha(255);
      verify(mLayers[1]).draw(mCanvas);
=====================================================================
Found a 5 line (49 tokens) duplication in the following files: 
Starting at line 481 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 519 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 546 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 558 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 596 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 634 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_STARTING, fadeDrawable.getTransitionState());
    assertEquals(250, fadeDrawable.getTransitionDuration());
=====================================================================
Found a 7 line (49 tokens) duplication in the following files: 
Starting at line 87 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\streams\TailAppendingInputStreamTest.java
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\streams\TailAppendingInputStreamTest.java

        Arrays.copyOfRange(mBytes, 0, 128), Arrays.copyOfRange(mOutputBuffer, 256, 384));
    Arrays.fill(mOutputBuffer, 256, 384, (byte) 0);
    for (byte b : mOutputBuffer) {
      assertEquals(0, b);
    }

    assertEquals(BYTES_LENGTH - 128, mTailAppendingInputStream.read(mOutputBuffer));
=====================================================================
Found a 7 line (49 tokens) duplication in the following files: 
Starting at line 99 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 246 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 272 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 298 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 318 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 351 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

  public void testLifecycle_I2_F2_F1_S3_C() {
    DataSource<Object> dataSource = getAndSubscribe();
    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribeM(mDataSourceSupplier1, mSrc1);
    DataSubscriber<Object> subscriber2 = verifyGetAndSubscribeM(mDataSourceSupplier2, mSrc2);
    DataSubscriber<Object> subscriber3 = verifyGetAndSubscribe(mDataSourceSupplier3, mSrc3);

    Object val2 = mock(Object.class);
=====================================================================
Found a 11 line (49 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 95 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 11 line (49 tokens) duplication in the following files: 
Starting at line 327 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 546 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0xe1,
        (byte) 0xe2,
        (byte) 0xe3,
        (byte) 0xe4,
        (byte) 0xe5,
        (byte) 0xe6,
        (byte) 0xe7,
        (byte) 0xe8,
        (byte) 0xe9,
        (byte) 0xea,
        (byte) 0xf1,
=====================================================================
Found a 9 line (49 tokens) duplication in the following files: 
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapProbeProducer.java
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedProbeProducer.java

              && !mDiskCacheHistory.contains(cacheKey)) {
            final boolean isSmallRequest =
                (imageRequest.getCacheChoice() == ImageRequest.CacheChoice.SMALL);
            final BufferedDiskCache preferredCache =
                isSmallRequest ? mSmallImageBufferedDiskCache : mDefaultBufferedDiskCache;
            preferredCache.addKeyForAsyncProbing(cacheKey);
            mDiskCacheHistory.add(cacheKey);
          }
        }
=====================================================================
Found a 6 line (49 tokens) duplication in the following files: 
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 100 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java

        .thenReturn(ImageRequest.RequestLevel.BITMAP_MEMORY_CACHE);
    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(mFinalImageReference, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "true");
=====================================================================
Found a 12 line (49 tokens) duplication in the following files: 
Starting at line 195 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SwallowResultProducerTest.java

      return null;
    }
  }

  private class ProduceResultsFailureAnswer implements Answer<Void> {
    @Override
    public Void answer(InvocationOnMock invocation) throws Throwable {
      Consumer consumer = (Consumer) invocation.getArguments()[0];
      consumer.onFailure(mException);
      return null;
    }
  }
=====================================================================
Found a 5 line (49 tokens) duplication in the following files: 
Starting at line 594 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 748 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

            clock);

    PriorityFetchState<FetchState> hipri1 = fetch(fetcher, "hipri1", callback, true);
    PriorityFetchState<FetchState> hipri2 = fetch(fetcher, "hipri2", callback, true);
    PriorityFetchState<FetchState> hipri3 = fetch(fetcher, "hipri3", callback, true);
=====================================================================
Found a 9 line (49 tokens) duplication in the following files: 
Starting at line 55 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\request\ImageRequestTest.java
Starting at line 64 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\request\ImageRequestTest.java

    final File file = new File("/foo/photos/penguin.jpg");
    final ImageRequest imageRequest = ImageRequest.fromFile(file);

    assertThat(imageRequest.getSourceFile()).isNotNull();
    assertThat(imageRequest.getSourceFile().getAbsolutePath()).isEqualTo(file.getAbsolutePath());
  }

  @Test
  public void testImageRequestForLocalFile_withSpaces() {
=====================================================================
Found a 6 line (49 tokens) duplication in the following files: 
Starting at line 1623 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 721 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    AbstractAdaptiveCountingMemoryCache.Entry<String, Integer> entry =
        mCache.mCachedEntries.get(key);
    assertNotNull("entry not found in the cache", entry);
    assertEquals("key mismatch", key, entry.key);
    assertEquals("value mismatch", value, entry.valueRef.get());
    assertEquals("client count mismatch", count, entry.clientCount);
=====================================================================
Found a 6 line (49 tokens) duplication in the following files: 
Starting at line 1634 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1649 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1663 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1718 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 710 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    AbstractAdaptiveCountingMemoryCache.Entry<String, Integer> entry =
        mCache.mCachedEntries.get(key);
    assertNotNull("entry not found in the cache", entry);
    assertEquals("key mismatch", key, entry.key);
    assertEquals("value mismatch", value, entry.valueRef.get());
    assertEquals("access count mismatch", count, entry.accessCount);
=====================================================================
Found a 18 line (49 tokens) duplication in the following files: 
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\main\java\com\facebook\imagepipeline\memory\AshmemMemoryChunk.java
Starting at line 123 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\main\java\com\facebook\imagepipeline\memory\NativeMemoryChunk.java
Starting at line 93 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\main\java\com\facebook\imagepipeline\memory\BufferMemoryChunk.java

  }

  @Override
  public void copy(
      final int offset, final MemoryChunk other, final int otherOffset, final int count) {
    Preconditions.checkNotNull(other);
    // This implementation acquires locks on this and other objects and then delegates to
    // doCopy which does actual copy. In order to avoid deadlocks we have to establish some linear
    // order on all AshmemMemoryChunks and acquire locks according to this order. In order
    // to do that, we use unique ids.
    // So we have to address 3 cases:

    // Case 1: other buffer equals this buffer, id comparison
    if (other.getUniqueId() == getUniqueId()) {
      // we do not allow copying to the same address
      // lets log warning and not copy
      Log.w(
          TAG,
=====================================================================
Found a 8 line (49 tokens) duplication in the following files: 
Starting at line 38 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 38 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java

    mBufferStats = new PoolStats(mAshmemPool);

    ByteArrayPool byteArrayPool = mock(ByteArrayPool.class);
    byte[] pooledByteArray = new byte[8];
    when(byteArrayPool.get(8)).thenReturn(pooledByteArray);
    PooledByteStreams pooledByteStreams = new PooledByteStreams(byteArrayPool, 8);

    mBufferFactory = new MemoryPooledByteBufferFactory(mAshmemPool, pooledByteStreams);
=====================================================================
Found a 8 line (49 tokens) duplication in the following files: 
Starting at line 33 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 33 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 33 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java

    mAshmemStats = new PoolStats(mAshmemPool);

    mData = new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
  }

  @Test
  public void testBasic_1() throws Exception {
    testBasic_1(mAshmemPool, mAshmemStats);
=====================================================================
Found a 6 line (49 tokens) duplication in the following files: 
Starting at line 50 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\bitmap\BitmapAnimationCacheSelectorConfigurator.java
Starting at line 40 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\utils\SampleAnimationBackendConfigurator.java

    mContext = mSpinner.getContext();
    mArrayAdapter = new ArrayAdapter<>(spinner.getContext(), android.R.layout.simple_spinner_item);
    mArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    mSpinner.setAdapter(mArrayAdapter);

    addSampleBackends();
=====================================================================
Found a 7 line (48 tokens) duplication in the following files: 
Starting at line 247 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java
Starting at line 269 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java

    mController.setControllerOverlay(controllerOverlay1);

    // set drawee hierarchy
    mController.setHierarchy(draweeHierarchy1);
    assertSame(draweeHierarchy1, mController.getHierarchy());
    inOrder.verify(draweeHierarchy1, times(1)).setControllerOverlay(controllerOverlay1);
    inOrder.verify(draweeHierarchy1, times(0)).reset();
=====================================================================
Found a 5 line (48 tokens) duplication in the following files: 
Starting at line 198 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 231 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    GenericDraweeHierarchy dh = mBuilder.setBackground(mBackground).build();
    RootDrawable rootDrawable = (RootDrawable) dh.getTopLevelDrawable();
    FadeDrawable fadeDrawable = (FadeDrawable) rootDrawable.getCurrent();
    assertEquals(7, fadeDrawable.getNumberOfLayers());
    assertSame(mBackground, fadeDrawable.getDrawable(0));
=====================================================================
Found a 4 line (48 tokens) duplication in the following files: 
Starting at line 71 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourceTestUtils.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

    assertEquals("isFinished", isFinished, dataSource.isFinished());
    assertEquals("hasResult", hasResult, dataSource.hasResult());
    assertSame("getResult", result, dataSource.getResult());
    assertEquals("hasFailed", hasFailed, dataSource.hasFailed());
=====================================================================
Found a 10 line (48 tokens) duplication in the following files: 
Starting at line 50 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifySubscriber(dataSource, mSrc3, ON_FAILURE);
    verifyState(dataSource, null, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, throwable);

    testClose(dataSource);
    verifyState(dataSource, null, CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, throwable);
  }

  /** All data sources failed, second data source produced multiple intermediate results. */
  @Test
  public void testLifecycle_F1_I2_I2_F2_F3_C() {
=====================================================================
Found a 6 line (48 tokens) duplication in the following files: 
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 366 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);

    Object val = mock(Object.class);
    setState(mSrc2, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
=====================================================================
Found a 5 line (48 tokens) duplication in the following files: 
Starting at line 30 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 99 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 246 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 272 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 298 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 318 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 338 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 351 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 377 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

  public void testLifecycle_F2_F3_F1_C() {
    DataSource<Object> dataSource = getAndSubscribe();
    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribeM(mDataSourceSupplier1, mSrc1);
    DataSubscriber<Object> subscriber2 = verifyGetAndSubscribeM(mDataSourceSupplier2, mSrc2);
    DataSubscriber<Object> subscriber3 = verifyGetAndSubscribe(mDataSourceSupplier3, mSrc3);
=====================================================================
Found a 12 line (48 tokens) duplication in the following files: 
Starting at line 46 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\HttpUrlConnectionNetworkFetcher.java
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-backends\imagepipeline-volley\src\main\java\com\facebook\imagepipeline\backends\volley\VolleyNetworkFetcher.java

    public HttpUrlConnectionNetworkFetchState(
        Consumer<EncodedImage> consumer, ProducerContext producerContext) {
      super(consumer, producerContext);
    }
  }

  private static final String QUEUE_TIME = "queue_time";
  private static final String FETCH_TIME = "fetch_time";
  private static final String TOTAL_TIME = "total_time";
  private static final String IMAGE_SIZE = "image_size";

  private static final int NUM_NETWORK_THREADS = 3;
=====================================================================
Found a 6 line (48 tokens) duplication in the following files: 
Starting at line 293 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 311 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

  public void testFetchDecodedImage() {
    Producer<CloseableReference<CloseableImage>> decodedSequence = mock(Producer.class);
    when(mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest))
        .thenReturn(decodedSequence);
    DataSource<CloseableReference<CloseableImage>> dataSource =
        mImagePipeline.fetchDecodedImage(mImageRequest, mCallerContext);
=====================================================================
Found a 7 line (48 tokens) duplication in the following files: 
Starting at line 124 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BranchOnSeparateImagesProducerTest.java
Starting at line 197 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BranchOnSeparateImagesProducerTest.java

    EncodedImage firstProducerEncodedImage =
        new EncodedImage(mFirstProducerFinalResult.getByteBufferRef());
    firstProducerEncodedImage.setRotationAngle(-1);
    firstProducerEncodedImage.setWidth(WIDTH / 2);
    firstProducerEncodedImage.setHeight(HEIGHT / 2);
    mFirstProducerConsumer.onNewResult(firstProducerEncodedImage, Consumer.IS_LAST);
    verify(mConsumer).onNewResult(firstProducerEncodedImage, Consumer.NO_FLAGS);
=====================================================================
Found a 14 line (48 tokens) duplication in the following files: 
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 82 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java

    mContentUri = Uri.fromFile(mock(File.class));

    mProducerContext =
        new SettableProducerContext(
            mImageRequest,
            mRequestId,
            mProducerListener,
            mock(Object.class),
            ImageRequest.RequestLevel.FULL_FETCH,
            false,
            true,
            Priority.MEDIUM,
            mConfig);
    when(mImageRequest.getSourceUri()).thenReturn(mContentUri);
=====================================================================
Found a 7 line (48 tokens) duplication in the following files: 
Starting at line 339 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 410 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

        newFetcher(delegate, false, 2, 1, true, 0, false, false);

    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, false);
    PriorityFetchState<FetchState> two = fetch(fetcher, "2", callback, false);

    // 'one' was requested from the delegate, 'two' is waiting for a free slot.
    assertThat(fetcher.getCurrentlyFetching()).containsExactly(one);
=====================================================================
Found a 6 line (48 tokens) duplication in the following files: 
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DefaultEntryEvictionComparatorSupplierTest.java
Starting at line 53 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\ScoreBasedEvictionComparatorSupplierTest.java

    Collections.sort(entries, new DefaultEntryEvictionComparatorSupplier().get());

    for (int i = 0; i < entries.size() - 1; i++) {
      assertTrue(entries.get(i).getTimestamp() < entries.get(i + 1).getTimestamp());
    }
  }
=====================================================================
Found a 13 line (48 tokens) duplication in the following files: 
Starting at line 506 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 599 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 693 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 990 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1023 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1472 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  public void testEviction_ByTotalCount() {
    mCache =
        createDummyAdaptiveCountingMemoryCache(
            mParamsSupplier,
            mCacheTrimStrategy,
            mValueDescriptor,
            100,
            1,
            2,
            initialLFUCacheFractionPromil);
    // value 5 cannot fit the cache
    CloseableReference<Integer> originalRef1 = newReference(10);
    CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);
=====================================================================
Found a 16 line (48 tokens) duplication in the following files: 
Starting at line 1074 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1134 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1230 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1279 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1388 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  public void testFrequentlyUsedEvictionWhithoutChangingLFU() {
    // Cache has 4 entries; 2 for LFU and 2 for MFU
    // key is considered as MFU, if its accessCount > 1
    mCache =
        createDummyAdaptiveCountingMemoryCache(
            mParamsSupplier,
            mCacheTrimStrategy,
            mValueDescriptor,
            100,
            1,
            2,
            initialLFUCacheFractionPromil);

    // insert item1 to MFU
    CloseableReference<Integer> originalRef1 = newReference(10);
    CloseableReference<Integer> valueRef1a = mCache.cache(KEYS[1], originalRef1);
=====================================================================
Found a 5 line (48 tokens) duplication in the following files: 
Starting at line 31 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 31 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 31 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java

  private byte[] mData;

  @Before
  public void setup() {
    mData = new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
=====================================================================
Found a 8 line (48 tokens) duplication in the following files: 
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\HierarcherImplTest.java
Starting at line 170 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\HierarcherImplTest.java

    Drawable errorDrawable = mHierarcher.buildPlaceholderDrawable(mResources, options);

    assertThat(errorDrawable).isNotNull();
    assertThat(errorDrawable).isInstanceOf(ScaleTypeDrawable.class);

    ScaleTypeDrawable scaleTypeDrawable = (ScaleTypeDrawable) errorDrawable;
    assertThat(scaleTypeDrawable.getScaleType())
        .isEqualTo(ImageOptions.defaults().getPlaceholderScaleType());
=====================================================================
Found a 11 line (47 tokens) duplication in the following files: 
Starting at line 170 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 185 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 200 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    setupBoundsAndRendererDimensions(
        boundsWidth, boundsHeight, backendIntrinsicWidth, backendIntrinsicHeight);

    mBitmapAnimationBackend.setBounds(null);

    assertThat(mBitmapAnimationBackend.getIntrinsicWidth()).isEqualTo(backendIntrinsicWidth);
    assertThat(mBitmapAnimationBackend.getIntrinsicHeight()).isEqualTo(backendIntrinsicHeight);
  }

  @Test
  public void testSetBoundsUpdatesIntrinsicDimensionsWhenBackendWidthSetAndNullBounds() {
=====================================================================
Found a 6 line (47 tokens) duplication in the following files: 
Starting at line 220 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 261 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 220 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 262 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

        createAnimatedDrawableBackendMock(1);
    when(mMockAnimatedDrawableBackendProvider.get(
            any(AnimatedImageResult.class), isNull(Rect.class)))
        .thenReturn(mockAnimatedDrawableBackend);
    when(mMockBitmapFactory.createBitmapInternal(50, 50, DEFAULT_BITMAP_CONFIG))
        .thenReturn(CloseableReference.of(mockBitmap, FAKE_BITMAP_RESOURCE_RELEASER));
=====================================================================
Found a 16 line (47 tokens) duplication in the following files: 
Starting at line 307 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 307 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

  private TrivialPooledByteBuffer createByteBuffer() {
    byte[] buf = new byte[16];
    return new TrivialPooledByteBuffer(buf);
  }

  private static TrivialBufferPooledByteBuffer createDirectByteBuffer() {
    byte[] buf = new byte[16];
    return new TrivialBufferPooledByteBuffer(buf);
  }

  /**
   * Creates the mock for the AnimatedDrawableBackend with the number of frame
   *
   * @param frameCount The number of frame to mock
   */
  private AnimatedDrawableBackend createAnimatedDrawableBackendMock(final int frameCount) {
=====================================================================
Found a 20 line (47 tokens) duplication in the following files: 
Starting at line 195 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedColorDrawable.java
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedDrawable.java

      invalidateSelf();
    }
  }

  /** Gets the border color. */
  @Override
  public int getBorderColor() {
    return mBorderColor;
  }

  /** Gets the border width. */
  @Override
  public float getBorderWidth() {
    return mBorderWidth;
  }

  @Override
  public void setPadding(float padding) {
    if (mPadding != padding) {
      mPadding = padding;
=====================================================================
Found a 7 line (47 tokens) duplication in the following files: 
Starting at line 34 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java
Starting at line 80 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java

    AspectRatioMeasure.updateMeasureSpec(mSpec, 1.5f, layoutParams1, 10, 10);
    assertEquals(makeMeasureSpec(460, EXACTLY), mSpec.width);
    assertEquals(makeMeasureSpec(310, EXACTLY), mSpec.height);

    // height
    mSpec.width = makeMeasureSpec(410, EXACTLY);
    mSpec.height = makeMeasureSpec(310, UNSPECIFIED);
=====================================================================
Found a 5 line (47 tokens) duplication in the following files: 
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java

    map.put(k3, v3);
    return Collections.unmodifiableMap(map);
  }

  public static <K, V> Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4) {
=====================================================================
Found a 11 line (47 tokens) duplication in the following files: 
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\datasource\FirstAvailableDataSourceSupplier.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\datasource\IncreasingQualityDataSourceSupplier.java

    FirstAvailableDataSourceSupplier that = (FirstAvailableDataSourceSupplier) other;
    return Objects.equal(this.mDataSourceSuppliers, that.mDataSourceSuppliers);
  }

  @Override
  public String toString() {
    return Objects.toStringHelper(this).add("list", mDataSourceSuppliers).toString();
  }

  @ThreadSafe
  private class FirstAvailableDataSource extends AbstractDataSource<T> {
=====================================================================
Found a 11 line (47 tokens) duplication in the following files: 
Starting at line 24 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\file\FileUtilsTest.java
Starting at line 37 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\file\FileUtilsTest.java

    when(directory.exists()).thenReturn(true);
    when(directory.isDirectory()).thenReturn(true);
    try {
      FileUtils.mkdirs(directory);
    } catch (FileUtils.CreateDirectoryException cde) {
      fail();
    }
  }

  @Test
  public void testMkDirsSuccessfulCreate() {
=====================================================================
Found a 8 line (47 tokens) duplication in the following files: 
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java

    PowerMockito.when(Environment.getExternalStorageDirectory()).thenReturn(null);
    StatFsHelper statFsHelper = new StatFsHelper();

    long freeBytes = statFsHelper.getAvailableStorageSpace(StatFsHelper.StorageType.INTERNAL);
    assertEquals(INTERNAL_BLOCK_SIZE * INTERNAL_BLOCKS_FREE, freeBytes);

    freeBytes = statFsHelper.getAvailableStorageSpace(StatFsHelper.StorageType.EXTERNAL);
    assertEquals(0, freeBytes);
=====================================================================
Found a 6 line (47 tokens) duplication in the following files: 
Starting at line 279 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 305 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    setState(mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1a, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
    mInOrder.verify(mSrc3).close();
    mInOrder.verify(mSrc2).close();
    verifySubscriber(dataSource, mSrc1, ON_NEW_RESULT);
    verifyState(dataSource, mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1a, NOT_FAILED, null);
=====================================================================
Found a 13 line (47 tokens) duplication in the following files: 
Starting at line 911 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java
Starting at line 932 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java

              mConfig);
      return CloseableProducerToDataSourceAdapter.create(
          producerSequence, settableProducerContext, requestListener2);
    } catch (Exception exception) {
      return DataSources.immediateFailedDataSource(exception);
    } finally {
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.endSection();
      }
    }
  }

  public <T> DataSource<CloseableReference<T>> submitFetchRequest(
=====================================================================
Found a 6 line (47 tokens) duplication in the following files: 
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java
Starting at line 93 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java

      String requestId, String producerName, @Nullable Map<String, String> extraMap) {
    final int numberOfListeners = mRequestListeners.size();
    for (int i = 0; i < numberOfListeners; ++i) {
      RequestListener listener = mRequestListeners.get(i);
      try {
        listener.onProducerFinishWithSuccess(requestId, producerName, extraMap);
=====================================================================
Found a 10 line (47 tokens) duplication in the following files: 
Starting at line 60 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\DiskCacheReadProducer.java
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PartialDiskCacheProducer.java

    mInputProducer = inputProducer;
  }

  public void produceResults(
      final Consumer<EncodedImage> consumer, final ProducerContext producerContext) {
    final ImageRequest imageRequest = producerContext.getImageRequest();
    final boolean isDiskCacheEnabledForRead =
        producerContext
            .getImageRequest()
            .isCacheEnabled(ImageRequest.CachesLocationsMasks.DISK_READ);
=====================================================================
Found a 5 line (47 tokens) duplication in the following files: 
Starting at line 241 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 267 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

  public void testFetchLocalEncodedImage() {
    Producer<CloseableReference<PooledByteBuffer>> encodedSequence = mock(Producer.class);
    when(mProducerSequenceFactory.getEncodedImageProducerSequence(mImageRequest))
        .thenReturn(encodedSequence);
    when(mImageRequest.getSourceUri()).thenReturn(Uri.parse("file:///local/file"));
=====================================================================
Found a 6 line (47 tokens) duplication in the following files: 
Starting at line 299 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 318 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 337 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 358 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 380 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 400 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

    assertFalse(dataSource.isFinished());
    verify(mRequestListener1).onRequestStart(mImageRequest, mCallerContext, "0", false);
    verify(mRequestListener2).onRequestStart(mImageRequest, mCallerContext, "0", false);
    ArgumentCaptor<ProducerContext> producerContextArgumentCaptor =
        ArgumentCaptor.forClass(ProducerContext.class);
    verify(decodedSequence)
=====================================================================
Found a 13 line (47 tokens) duplication in the following files: 
Starting at line 362 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ProducerSequenceFactoryTest.java
Starting at line 386 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ProducerSequenceFactoryTest.java

  private void internalUseSequenceFactoryWithBitmapPrepare() {
    ProducerFactory producerFactory = mock(ProducerFactory.class, RETURNS_MOCKS);
    ImageTranscoderFactory imageTranscoderFactory = mock(ImageTranscoderFactory.class);

    mProducerSequenceFactory =
        new ProducerSequenceFactory(
            RuntimeEnvironment.application.getContentResolver(),
            producerFactory,
            mNetworkFetcher,
            true,
            false,
            mThreadHandoffProducerQueue,
            false,
=====================================================================
Found a 4 line (47 tokens) duplication in the following files: 
Starting at line 88 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 167 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 190 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 215 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java

    mAddMetaDataConsumer.onNewResult(mFinalResult, Consumer.IS_LAST);
    ArgumentCaptor<EncodedImage> argumentCaptor = ArgumentCaptor.forClass(EncodedImage.class);
    verify(mConsumer).onNewResult(argumentCaptor.capture(), eq(Consumer.IS_LAST));
    EncodedImage encodedImage = argumentCaptor.getValue();
=====================================================================
Found a 5 line (47 tokens) duplication in the following files: 
Starting at line 101 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 123 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(mFinalImageReference, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
=====================================================================
Found a 9 line (47 tokens) duplication in the following files: 
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 135 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 198 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 224 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 274 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 289 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 169 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 215 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 230 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 245 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testBitmapMemoryCacheGetNotFoundInputProducerNotFound() {
=====================================================================
Found a 5 line (47 tokens) duplication in the following files: 
Starting at line 230 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 290 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java

    inOrder.verify(mJobScheduler).updateJob(mEncodedImage, Consumer.NO_FLAGS);
    inOrder.verify(mProgressiveJpegParser).parseMoreData(argumentCaptor.capture());
    inOrder.verify(mJobScheduler).scheduleJob();
    assertSame(
        ((EncodedImage) argumentCaptor.getValue()).getUnderlyingReferenceTestOnly(),
=====================================================================
Found a 5 line (47 tokens) duplication in the following files: 
Starting at line 196 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 313 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

    mDiskCacheReadProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener).onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, true);
=====================================================================
Found a 7 line (47 tokens) duplication in the following files: 
Starting at line 428 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 268 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java

  private void setupInputProducerSuccess() {
    doAnswer(
            new Answer<Object>() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                Consumer consumer = (Consumer) invocation.getArguments()[0];
                consumer.onNewResult(mIntermediateEncodedImage, Consumer.NO_FLAGS);
=====================================================================
Found a 6 line (47 tokens) duplication in the following files: 
Starting at line 575 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 586 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

  public void testCancelHighestPriorityLowersPriority() {
    mProducerContext1.setPriority(Priority.MEDIUM);
    mProducerContext2.setPriority(Priority.HIGH);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext1);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext2);
    assertEquals(Priority.HIGH, mMultiplexedContext1.getPriority());
=====================================================================
Found a 8 line (47 tokens) duplication in the following files: 
Starting at line 812 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 872 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 601 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 661 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    inOrder.verify(mReleaser, never()).release(anyInt());

    // trimming cannot evict shared entries
    when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);
    mCache.trim(memoryTrimType);
    assertSharedWithCount(KEYS[0], 100, 1);
    assertSharedWithCount(KEYS[1], 101, 1);
    assertSharedWithCount(KEYS[2], 102, 1);
=====================================================================
Found a 10 line (47 tokens) duplication in the following files: 
Starting at line 848 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 638 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    assertExclusivelyOwnedSize(6, 630);

    // Trim cache by 45%. This means that out of total of 1045 bytes cached, 574 should remain.
    // 415 bytes ars used by the clients, which leaves 159 for the exclusively owned items.
    // Only the the most recent exclusively owned item fits, and it occupies 108 bytes.
    when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(0.45);
    mCache.trim(memoryTrimType);
    assertSharedWithCount(KEYS[0], 100, 1);
    assertSharedWithCount(KEYS[1], 101, 1);
    assertSharedWithCount(KEYS[5], 105, 1);
=====================================================================
Found a 8 line (47 tokens) duplication in the following files: 
Starting at line 1337 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1399 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

            initialLFUFractionPromil);

    // insert item1 to LFU
    CloseableReference<Integer> originalRef1 = newReference(10);
    CloseableReference<Integer> valueRef1a = mCache.cache(KEYS[1], originalRef1);
    originalRef1.close();
    valueRef1a.close();
    assertLFUExclusivelyOwned(KEYS[1], 10);
=====================================================================
Found a 7 line (47 tokens) duplication in the following files: 
Starting at line 1674 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1703 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

        "Key not found in LFU Ghost List", mCache.mLeastFrequentlyUsedKeysGhostList.contains(key));
    assertFalse("Key found in cache", mCache.mCachedEntries.contains(key));
    assertFalse(
        "Key found in exclusive",
        mCache.mLeastFrequentlyUsedExclusiveEntries.contains(key)
            || mCache.mMostFrequentlyUsedExclusiveEntries.contains(key));
    assertTrue(
=====================================================================
Found a 7 line (47 tokens) duplication in the following files: 
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\main\java\com\facebook\imagepipeline\nativecode\DalvikPurgeableDecoder.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\main\java\com\facebook\imagepipeline\nativecode\DalvikPurgeableDecoder.java

      @Nullable Rect regionToDecode,
      @Nullable final ColorSpace colorSpace) {
    BitmapFactory.Options options =
        getBitmapFactoryOptions(encodedImage.getSampleSize(), bitmapConfig);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
      OreoUtils.setColorSpace(options, colorSpace);
    }
=====================================================================
Found a 9 line (47 tokens) duplication in the following files: 
Starting at line 98 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\main\java\com\facebook\imagepipeline\memory\AshmemMemoryChunk.java
Starting at line 82 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\main\java\com\facebook\imagepipeline\memory\BufferMemoryChunk.java

    mByteBuffer.get(byteArray, byteArrayOffset, actualCount);
    return actualCount;
  }

  @Override
  public synchronized byte read(final int offset) {
    Preconditions.checkState(!isClosed());
    Preconditions.checkArgument(offset >= 0);
    Preconditions.checkArgument(offset < getSize());
=====================================================================
Found a 5 line (46 tokens) duplication in the following files: 
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedSingleUsePostprocessorProducerTest.java
Starting at line 254 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java
Starting at line 181 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

  private RepeatedPostprocessorConsumer produceResults() {
    mPostprocessorProducer.produceResults(mConsumer, mProducerContext);
    ArgumentCaptor<Consumer> consumerCaptor = ArgumentCaptor.forClass(Consumer.class);
    verify(mInputProducer).produceResults(consumerCaptor.capture(), eq(mProducerContext));
    return (RepeatedPostprocessorConsumer) consumerCaptor.getValue();
=====================================================================
Found a 5 line (46 tokens) duplication in the following files: 
Starting at line 298 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java
Starting at line 319 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java

    InOrder inOrder = inOrder(listener1, listener2);

    mController.getControllerListener().onRelease("id");
    inOrder.verify(listener1, never()).onRelease(anyString());
    inOrder.verify(listener2, never()).onRelease(anyString());
=====================================================================
Found a 10 line (46 tokens) duplication in the following files: 
Starting at line 114 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(255, mFadeDrawable.mAlphas[2]);
  }

  @Test
  public void testFadeInLayer() {
    // start fade in
    mFadeDrawable.setTransitionDuration(100);
    mFadeDrawable.fadeInLayer(2);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
=====================================================================
Found a 10 line (46 tokens) duplication in the following files: 
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 124 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(255, mFadeDrawable.mAlphas[2]);
  }

  @Test
  public void testFadeOutLayer() {
    // start fade out
    mFadeDrawable.setTransitionDuration(100);
    mFadeDrawable.fadeOutLayer(0);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
=====================================================================
Found a 6 line (46 tokens) duplication in the following files: 
Starting at line 279 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 306 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 268 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 292 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

      Assert.assertEquals(FadeDrawable.TRANSITION_RUNNING, mFadeDrawable.mTransitionState);
      if (fadeUpToLayer) {
        verify(mLayers[0]).mutate();
        verify(mLayers[0]).setAlpha(255);
        verify(mLayers[0]).draw(mCanvas);
      } else {
=====================================================================
Found a 6 line (46 tokens) duplication in the following files: 
Starting at line 89 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java
Starting at line 146 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java

        new OrientedDrawable(mDrawable, 270, ExifInterface.ORIENTATION_ROTATE_270);
    drawable.setBounds(mBounds);
    drawable.draw(mCanvas);

    Matrix expectedMatrix = new Matrix();
    expectedMatrix.setRotate(270, drawable.getBounds().centerX(), drawable.getBounds().centerY());
=====================================================================
Found a 6 line (46 tokens) duplication in the following files: 
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 181 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

            .setActualImageFocusPoint(mFocusPoint)
            .build();
    RootDrawable rootDrawable = (RootDrawable) dh.getTopLevelDrawable();
    FadeDrawable fadeDrawable = (FadeDrawable) rootDrawable.getCurrent();
    assertEquals(7, fadeDrawable.getNumberOfLayers());
    assertNull(fadeDrawable.getDrawable(0));
=====================================================================
Found a 14 line (46 tokens) duplication in the following files: 
Starting at line 42 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\datasource\FirstAvailableDataSourceSupplier.java
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\datasource\IncreasingQualityDataSourceSupplier.java

    return new FirstAvailableDataSource();
  }

  @Override
  public int hashCode() {
    return mDataSourceSuppliers.hashCode();
  }

  @Override
  public boolean equals(@Nullable Object other) {
    if (other == this) {
      return true;
    }
    if (!(other instanceof FirstAvailableDataSourceSupplier)) {
=====================================================================
Found a 9 line (46 tokens) duplication in the following files: 
Starting at line 109 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java
Starting at line 212 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java

    StatFsHelper statFsHelper = new StatFsHelper();

    long freeBytes = statFsHelper.getAvailableStorageSpace(StatFsHelper.StorageType.INTERNAL);
    assertEquals(INTERNAL_BLOCK_SIZE * INTERNAL_BLOCKS_FREE, freeBytes);

    freeBytes = statFsHelper.getAvailableStorageSpace(StatFsHelper.StorageType.EXTERNAL);
    assertEquals(0, freeBytes);

    statFsHelper.resetStats();
=====================================================================
Found a 9 line (46 tokens) duplication in the following files: 
Starting at line 69 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java
Starting at line 142 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java

    when(mDataSource.getResult()).thenReturn(mFinalResult);

    doAnswer(
            new Answer<Void>() {
              @Override
              public Void answer(InvocationOnMock invocation) throws Throwable {
                final Object[] args = invocation.getArguments();
                DataSubscriber dataSubscriber = (DataSubscriber) args[0];
                dataSubscriber.onNewResult(mDataSource);
=====================================================================
Found a 5 line (46 tokens) duplication in the following files: 
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 166 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);

    setState(mSrc2, NOT_CLOSED, FINISHED, WITH_RESULT, val2b, FAILED, mock(Throwable.class));
    subscriber2.onFailure(mSrc2);
=====================================================================
Found a 7 line (46 tokens) duplication in the following files: 
Starting at line 71 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 115 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);

    // src1 is closed and failure cause stored, but dataSource is not failed
    Throwable throwable = mock(Throwable.class);
    setState(mSrc1, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, throwable);
    subscriber1.onFailure(mSrc1);
    mInOrder.verify(mSrc1).close();
=====================================================================
Found a 10 line (46 tokens) duplication in the following files: 
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducer.java
Starting at line 61 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PostprocessedBitmapMemoryCacheProducer.java

      final CacheKey cacheKey = mCacheKeyFactory.getBitmapCacheKey(imageRequest, callerContext);
      final boolean isBitmapCacheEnabledForRead =
          producerContext
              .getImageRequest()
              .isCacheEnabled(ImageRequest.CachesLocationsMasks.BITMAP_READ);

      CloseableReference<CloseableImage> cachedReference =
          isBitmapCacheEnabledForRead ? mMemoryCache.get(cacheKey) : null;

      if (cachedReference != null) {
=====================================================================
Found a 13 line (46 tokens) duplication in the following files: 
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\DiskCacheReadProducer.java
Starting at line 42 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducer.java

  public DiskCacheReadProducer(
      BufferedDiskCache defaultBufferedDiskCache,
      BufferedDiskCache smallImageBufferedDiskCache,
      CacheKeyFactory cacheKeyFactory,
      Producer<EncodedImage> inputProducer) {
    mDefaultBufferedDiskCache = defaultBufferedDiskCache;
    mSmallImageBufferedDiskCache = smallImageBufferedDiskCache;
    mCacheKeyFactory = cacheKeyFactory;
    mInputProducer = inputProducer;
  }

  public void produceResults(
      final Consumer<EncodedImage> consumer, final ProducerContext producerContext) {
=====================================================================
Found a 6 line (46 tokens) duplication in the following files: 
Starting at line 333 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java
Starting at line 341 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java

    mPool.release(b1);
    mStats.refresh();
    Assert.assertEquals(2, mStats.mUsedBytes);
    Assert.assertEquals(1, mStats.mUsedCount);
    Assert.assertEquals(0, mStats.mFreeBytes);
    Assert.assertEquals(0, mStats.mFreeCount);
=====================================================================
Found a 7 line (46 tokens) duplication in the following files: 
Starting at line 132 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 148 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 195 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 221 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 246 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 271 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 302 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 319 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 335 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
=====================================================================
Found a 7 line (46 tokens) duplication in the following files: 
Starting at line 166 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 212 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 242 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 258 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    Assert.assertTrue(EncodedImage.isValid(mFinalEncodedImageClone));
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(EncodedMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
=====================================================================
Found a 11 line (46 tokens) duplication in the following files: 
Starting at line 47 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 40 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java
Starting at line 46 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java

  @Mock public PooledByteBufferFactory mPooledByteBufferFactory;
  @Mock public Consumer<EncodedImage> mConsumer;
  @Mock public ImageRequest mImageRequest;
  @Mock public ProducerListener2 mProducerListener;
  @Mock public Exception mException;
  @Mock public ImagePipelineConfig mConfig;

  private TestExecutorService mExecutor;
  private SettableProducerContext mProducerContext;
  private final String mRequestId = "mRequestId";
  private LocalAssetFetchProducer mLocalAssetFetchProducer;
=====================================================================
Found a 14 line (46 tokens) duplication in the following files: 
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 82 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java

        new LocalAssetFetchProducer(mExecutor, mPooledByteBufferFactory, mAssetManager);

    mProducerContext =
        new SettableProducerContext(
            mImageRequest,
            mRequestId,
            mProducerListener,
            mock(Object.class),
            ImageRequest.RequestLevel.FULL_FETCH,
            false,
            true,
            Priority.MEDIUM,
            mConfig);
    when(mImageRequest.getSourceUri()).thenReturn(Uri.parse("asset:///" + TEST_FILENAME));
=====================================================================
Found a 9 line (46 tokens) duplication in the following files: 
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java
Starting at line 38 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

public class RepeatedPostprocessorProducerTest {

  private static final String PRODUCER_NAME = PostprocessorProducer.NAME;
  private static final String POSTPROCESSOR_NAME = "postprocessor_name";
  private static final Map<String, String> mExtraMap =
      ImmutableMap.of(PostprocessorProducer.POSTPROCESSOR, POSTPROCESSOR_NAME);

  @Mock public PlatformBitmapFactory mPlatformBitmapFactory;
  @Mock public ProducerListener2 mProducerListener;
=====================================================================
Found a 8 line (46 tokens) duplication in the following files: 
Starting at line 390 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 278 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

  @Nullable
  public CloseableReference<V> reuse(K key) {
    Preconditions.checkNotNull(key);
    CloseableReference<V> clientRef = null;
    boolean removed = false;
    Entry<K, V> oldExclusive = null;
    synchronized (this) {
      oldExclusive = mLeastFrequentlyUsedExclusiveEntries.remove(key);
=====================================================================
Found a 5 line (46 tokens) duplication in the following files: 
Starting at line 866 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 657 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    assertExclusivelyOwnedSize(1, 108);
    inOrder.verify(mReleaser).release(102);
    inOrder.verify(mReleaser).release(107);
    inOrder.verify(mReleaser).release(103);
    inOrder.verify(mReleaser).release(106);
=====================================================================
Found a 6 line (46 tokens) duplication in the following files: 
Starting at line 878 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 649 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 668 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    assertSharedWithCount(KEYS[9], 109, 1);
    assertNotCached(KEYS[8], 108);
    assertNotCached(KEYS[2], 102);
    assertNotCached(KEYS[7], 107);
    assertNotCached(KEYS[3], 103);
    assertNotCached(KEYS[6], 106);
=====================================================================
Found a 9 line (46 tokens) duplication in the following files: 
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\main\java\com\facebook\imagepipeline\memory\AshmemMemoryChunk.java
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\main\java\com\facebook\imagepipeline\memory\BufferMemoryChunk.java

    mByteBuffer.put(byteArray, byteArrayOffset, actualCount);
    return actualCount;
  }

  @Override
  public synchronized int read(
      final int memoryOffset, final byte[] byteArray, final int byteArrayOffset, final int count) {
    Preconditions.checkNotNull(byteArray);
    Preconditions.checkNotNull(mByteBuffer);
=====================================================================
Found a 7 line (46 tokens) duplication in the following files: 
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 92 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 92 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 92 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java

    assertArrayEquals(mData, getBytes(sb1), mData.length);
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(1, 0),
            8, new IntPair(0, 1),
=====================================================================
Found a 9 line (46 tokens) duplication in the following files: 
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\main\java\com\facebook\imagepipeline\memory\NativeMemoryChunk.java
Starting at line 82 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\main\java\com\facebook\imagepipeline\memory\BufferMemoryChunk.java

    nativeCopyToByteArray(mNativePtr + memoryOffset, byteArray, byteArrayOffset, actualCount);
    return actualCount;
  }

  @Override
  public synchronized byte read(final int offset) {
    Preconditions.checkState(!isClosed());
    Preconditions.checkArgument(offset >= 0);
    Preconditions.checkArgument(offset < mSize);
=====================================================================
Found a 14 line (46 tokens) duplication in the following files: 
Starting at line 34 of C:\Users\anaca\Documents\Projetos\fresco\samples\comparison\src\main\java\com\facebook\samples\comparison\instrumentation\InstrumentedImageView.java
Starting at line 30 of C:\Users\anaca\Documents\Projetos\fresco\samples\comparison\src\main\java\com\facebook\samples\comparison\instrumentation\InstrumentedNetworkImageView.java

  public void initInstrumentation(final String tag, PerfListener perfListener) {
    mInstrumentation.init(tag, perfListener);
    // we don't have a better estimate on when to call onStart, so do it here.
    mInstrumentation.onStart();
  }

  @Override
  public void onDraw(final Canvas canvas) {
    super.onDraw(canvas);
    mInstrumentation.onDraw(canvas);
  }

  @Override
  public void setImageDrawable(final Drawable drawable) {
=====================================================================
Found a 5 line (46 tokens) duplication in the following files: 
Starting at line 38 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\androidTest\java\com\facebook\samples\scrollperf\data\impl\InfiniteSimpleAdapterTest.java
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\androidTest\java\com\facebook\samples\scrollperf\data\impl\InfiniteSimpleAdapterTest.java

  public void testInfiniteAdapter() {
    final Context context = getContext();
    final Resources res = context.getResources();
    final String[] uris = res.getStringArray(R.array.local_uri_test);
    when(mSimpleAdapter.getSize()).thenReturn(10);
=====================================================================
Found a 8 line (45 tokens) duplication in the following files: 
Starting at line 221 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 480 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java

      float dy = parentRect.top;
      outTransform.setScale(scale, scale);
      outTransform.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
    }

    @Override
    public String toString() {
      return "fit_start";
=====================================================================
Found a 9 line (45 tokens) duplication in the following files: 
Starting at line 93 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 144 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 161 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java

    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[2]);
  }

  @Test
  public void testFadeUpToLayer() {
=====================================================================
Found a 9 line (45 tokens) duplication in the following files: 
Starting at line 86 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 103 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 156 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
  }

  @Test
  public void testFadeUpToLayer() {
=====================================================================
Found a 5 line (45 tokens) duplication in the following files: 
Starting at line 82 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 121 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 182 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

            .build();
    RootDrawable rootDrawable = (RootDrawable) dh.getTopLevelDrawable();
    FadeDrawable fadeDrawable = (FadeDrawable) rootDrawable.getCurrent();
    assertEquals(7, fadeDrawable.getNumberOfLayers());
    assertNull(fadeDrawable.getDrawable(0));
=====================================================================
Found a 9 line (45 tokens) duplication in the following files: 
Starting at line 113 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\AbstractDataSourceTest.java
Starting at line 179 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\AbstractDataSourceTest.java

  public void testLifeCycle_LastResult_Close() {
    subscribe();
    // last result
    Value value = mock(Value.class);
    mDataSource.setResult(value, LAST);
    verifySubscribers(ON_NEW_RESULT);
    verifyState(mDataSource, NOT_CLOSED, FINISHED, WITH_RESULT, value, NOT_FAILED, null);
    // close
    mDataSource.close();
=====================================================================
Found a 7 line (45 tokens) duplication in the following files: 
Starting at line 71 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java
Starting at line 96 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java
Starting at line 119 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java
Starting at line 144 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java

    doAnswer(
            new Answer<Void>() {
              @Override
              public Void answer(InvocationOnMock invocation) throws Throwable {
                final Object[] args = invocation.getArguments();
                DataSubscriber dataSubscriber = (DataSubscriber) args[0];
                dataSubscriber.onNewResult(mDataSource);
=====================================================================
Found a 11 line (45 tokens) duplication in the following files: 
Starting at line 148 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducer.java
Starting at line 113 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedProbeProducer.java

          FrescoSystrace.beginSection("EncodedMemoryCacheProducer#onNewResultImpl");
        }
        // intermediate, null or uncacheable results are not cached, so we just forward them
        // as well as the images with unknown format which could be html response from the server
        if (isNotLast(status)
            || newResult == null
            || statusHasAnyFlag(status, DO_NOT_CACHE_ENCODED | IS_PARTIAL_RESULT)
            || newResult.getImageFormat() == ImageFormat.UNKNOWN) {
          getConsumer().onNewResult(newResult, status);
          return;
        }
=====================================================================
Found a 4 line (45 tokens) duplication in the following files: 
Starting at line 260 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 286 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 304 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 323 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 342 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 363 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 385 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 405 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

    verify(encodedSequence)
        .produceResults(any(Consumer.class), producerContextArgumentCaptor.capture());
    assertTrue(producerContextArgumentCaptor.getValue().isIntermediateResultExpected());
    assertEquals(producerContextArgumentCaptor.getValue().getPriority(), Priority.HIGH);
=====================================================================
Found a 8 line (45 tokens) duplication in the following files: 
Starting at line 338 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 197 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  private void setupBitmapMemoryCacheGetSuccess() {
=====================================================================
Found a 7 line (45 tokens) duplication in the following files: 
Starting at line 370 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 86 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SwallowResultProducerTest.java

                statusFlags, Arrays.asList(mIntermediateImageReference, mFinalImageReference)))
        .when(mInputProducer)
        .produceResults(any(Consumer.class), eq(mProducerContext));
  }

  private void setupInputProducerNotFound() {
    final List<CloseableReference<CloseableImage>> nullArray =
=====================================================================
Found a 9 line (45 tokens) duplication in the following files: 
Starting at line 224 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 247 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testDiskCacheGetFailureInputProducerNotFound() {
=====================================================================
Found a 4 line (45 tokens) duplication in the following files: 
Starting at line 291 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DownsampleUtilTest.java
Starting at line 300 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DownsampleUtilTest.java

      int width, int height, int rotationAngle) {
    when(mImageRequest.getPreferredWidth()).thenReturn(width);
    when(mImageRequest.getPreferredHeight()).thenReturn(height);
    when(mImageRequest.getResizeOptions()).thenReturn(new ResizeOptions(width, height));
=====================================================================
Found a 10 line (45 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\QualifiedResourceFetchProducerTest.java

  @Mock public PooledByteBufferFactory mPooledByteBufferFactory;
  @Mock public ContentResolver mContentResolver;
  @Mock public Consumer<EncodedImage> mConsumer;
  @Mock public ImageRequest mImageRequest;
  @Mock public ProducerListener2 mProducerListener;
  @Mock public Exception mException;
  @Mock public ImagePipelineConfig mConfig;
  private TestExecutorService mExecutor;
  private SettableProducerContext mProducerContext;
  private final String mRequestId = "mRequestId";
=====================================================================
Found a 6 line (45 tokens) duplication in the following files: 
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PostprocessedBitmapMemoryCacheProducerTest.java
Starting at line 189 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PostprocessedBitmapMemoryCacheProducerTest.java

    when(mMemoryCache.cache(mPostprocessedBitmapCacheKey, mImageRef2)).thenReturn(mImageRef2Clone);

    Consumer consumer = performCacheMiss();
    consumer.onNewResult(mImageRef1, Consumer.NO_FLAGS);
    mImageRef1.close();
    consumer.onNewResult(mImageRef2, Consumer.IS_LAST);
=====================================================================
Found a 8 line (45 tokens) duplication in the following files: 
Starting at line 114 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java
Starting at line 106 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

    setupNewSourceImage();
    postprocessorConsumer.onNewResult(mSourceCloseableImageRef, Consumer.NO_FLAGS);
    mSourceCloseableImageRef.close();
    mTestExecutorService.runUntilIdle();

    mInOrder.verifyNoMoreInteractions();
    assertEquals(0, mResults.size());
    verify(mSourceCloseableStaticBitmap).close();
=====================================================================
Found a 6 line (45 tokens) duplication in the following files: 
Starting at line 55 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\request\ImageRequestTest.java
Starting at line 64 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\request\ImageRequestTest.java
Starting at line 73 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\request\ImageRequestTest.java

    final File file = new File("/foo/photos/penguin.jpg");
    final ImageRequest imageRequest = ImageRequest.fromFile(file);

    assertThat(imageRequest.getSourceFile()).isNotNull();
    assertThat(imageRequest.getSourceFile().getAbsolutePath()).isEqualTo(file.getAbsolutePath());
  }
=====================================================================
Found a 8 line (45 tokens) duplication in the following files: 
Starting at line 204 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 135 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

  public @Nullable CloseableReference<V> cache(
      final K key,
      final CloseableReference<V> valueRef,
      final @Nullable EntryStateObserver<K> observer) {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(valueRef);

    maybeUpdateCacheParams();
=====================================================================
Found a 6 line (45 tokens) duplication in the following files: 
Starting at line 552 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 624 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    assertTotalSize(3, 120);
    assertExclusivelyOwnedSize(1, 30);
    assertNotCached(KEYS[1], 10);
    assertNotCached(KEYS[2], 20);
    assertExclusivelyOwned(KEYS[3], 30);
    assertSharedWithCount(KEYS[4], 40, 1);
=====================================================================
Found a 7 line (45 tokens) duplication in the following files: 
Starting at line 1094 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1207 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1490 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1558 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    assertMFUExclusivelyOwned(KEYS[1], 10);

    // insert item2 to LFU
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
    valueRef2.close();
=====================================================================
Found a 7 line (45 tokens) duplication in the following files: 
Starting at line 1154 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1344 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    assertMFUExclusivelyOwned(KEYS[1], 10);

    // insert item2 to LFU
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2a = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
    valueRef2a.close();
=====================================================================
Found a 9 line (45 tokens) duplication in the following files: 
Starting at line 103 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 135 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java

    assertEquals(130, (Object) mCountingLruMap.get("key3"));
    assertEquals(3, mCountingLruMap.getCount());
    assertEquals(360, mCountingLruMap.getSizeInBytes());
    assertKeyOrder("key1", "key2", "key3");
    assertValueOrder(110, 120, 130);
  }

  @Test
  public void testContains() {
=====================================================================
Found a 4 line (44 tokens) duplication in the following files: 
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\fresco\animation\bitmap\wrapper\AnimatedDrawableBackendFrameRendererTest.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\fresco\animation\bitmap\wrapper\AnimatedDrawableBackendFrameRendererTest.java

    when(mAnimatedDrawableBackend.getHeight()).thenReturn(1200);
    Bitmap bitmap = mockBitmap();
    AnimatedDrawableFrameInfo animatedDrawableFrameInfo = mock(AnimatedDrawableFrameInfo.class);
    when(mAnimatedDrawableBackend.getFrameInfo(anyInt())).thenReturn(animatedDrawableFrameInfo);
=====================================================================
Found a 7 line (44 tokens) duplication in the following files: 
Starting at line 103 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 130 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 164 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java

    GifImage mockGifImage = mock(GifImage.class);

    // Expect a call to GifImage.createFromByteBuffer
    TrivialPooledByteBuffer byteBuffer = createByteBuffer();
    when(mGifImageMock.decodeFromNativeMemory(
            eq(byteBuffer.getNativePtr()), eq(byteBuffer.size()), any(ImageDecodeOptions.class)))
        .thenReturn(mockGifImage);
=====================================================================
Found a 8 line (44 tokens) duplication in the following files: 
Starting at line 225 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 269 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 226 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 269 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

        .thenReturn(CloseableReference.of(mockBitmap, FAKE_BITMAP_RESOURCE_RELEASER));
    AnimatedImageCompositor mockCompositor = mock(AnimatedImageCompositor.class);
    PowerMockito.whenNew(AnimatedImageCompositor.class)
        .withAnyArguments()
        .thenReturn(mockCompositor);

    ImageDecodeOptions imageDecodeOptions =
        ImageDecodeOptions.newBuilder().setDecodePreviewFrame(true).build();
=====================================================================
Found a 7 line (44 tokens) duplication in the following files: 
Starting at line 103 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 130 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 164 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

    WebPImage mockWebPImage = mock(WebPImage.class);

    // Expect a call to WebPImage.createFromByteBuffer
    TrivialPooledByteBuffer byteBuffer = createByteBuffer();
    when(mWebPImageMock.decodeFromNativeMemory(
            eq(byteBuffer.getNativePtr()), eq(byteBuffer.size()), any(ImageDecodeOptions.class)))
        .thenReturn(mockWebPImage);
=====================================================================
Found a 5 line (44 tokens) duplication in the following files: 
Starting at line 74 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 254 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 364 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java

    Assert.assertEquals(FadeDrawable.TRANSITION_NONE, mFadeDrawable.mTransitionState);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[0]);
=====================================================================
Found a 5 line (44 tokens) duplication in the following files: 
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 352 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(FadeDrawable.TRANSITION_NONE, mFadeDrawable.mTransitionState);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[0]);
=====================================================================
Found a 4 line (44 tokens) duplication in the following files: 
Starting at line 88 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 188 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 258 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertActualImageScaleType(ScaleType.FOCUS_CROP, mFocusPoint, fadeDrawable.getDrawable(2));
    assertScaleTypeAndDrawable(mProgressBarImage, ScaleType.CENTER, fadeDrawable.getDrawable(3));
    assertScaleTypeAndDrawable(mRetryImage, ScaleType.FIT_CENTER, fadeDrawable.getDrawable(4));
    assertScaleTypeAndDrawable(mFailureImage, ScaleType.CENTER_INSIDE, fadeDrawable.getDrawable(5));
=====================================================================
Found a 6 line (44 tokens) duplication in the following files: 
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 322 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

    subscriber1.onFailure(mSrc1);
    mInOrder.verify(mSrc1).close();
    DataSubscriber<Object> subscriber2 = verifyGetAndSubscribe(mDataSourceSupplier2, mSrc2);
    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);

    Object val = mock(Object.class);
=====================================================================
Found a 10 line (44 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 96 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 7 line (44 tokens) duplication in the following files: 
Starting at line 296 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcher.java
Starting at line 313 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcher.java

      fetchState.delegatedState =
          mDelegate.createFetchState(fetchState.getConsumer(), fetchState.getContext());

      mCurrentlyFetching.remove(fetchState);
      if (!mHiPriQueue.remove(fetchState)) {
        mLowPriQueue.remove(fetchState);
      }
=====================================================================
Found a 10 line (44 tokens) duplication in the following files: 
Starting at line 23 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\GenericByteArrayPoolTest.java
Starting at line 24 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\AshmemMemoryChunkPoolTest.java
Starting at line 24 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\NativeMemoryChunkPoolTest.java
Starting at line 23 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\BufferMemoryChunkPoolTest.java

  private GenericByteArrayPool mPool;

  @Before
  public void setup() {
    final SparseIntArray bucketSizes = new SparseIntArray();
    bucketSizes.put(32, 2);
    bucketSizes.put(64, 1);
    bucketSizes.put(128, 1);
    mPool =
        new GenericByteArrayPool(
=====================================================================
Found a 8 line (44 tokens) duplication in the following files: 
Starting at line 145 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapPrepareProducerTest.java
Starting at line 161 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapPrepareProducerTest.java

      testProduceResults_whenNotPrefetchButBitmapTooSmall_thenBitmapPrepareToDrawNotCalled() {
    createBitmapPrepareProducer(false);

    when(mProducerContext.isPrefetch()).thenReturn(false);

    // 100 * 9 = 900 (< MIN_BITMAP_SIZE_BYTES)
    when(mBitmap.getRowBytes()).thenReturn(100);
    when(mBitmap.getHeight()).thenReturn(9);
=====================================================================
Found a 5 line (44 tokens) duplication in the following files: 
Starting at line 272 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 311 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

    setupInputProducerSuccess();
    mDiskCacheReadProducer.produceResults(mConsumer, mProducerContext);
    verify(mInputProducer).produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
=====================================================================
Found a 8 line (44 tokens) duplication in the following files: 
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java
Starting at line 166 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java
Starting at line 180 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java

    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener, times(2)).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener, times(2))
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, null);
  }

  @Test
  public void testSmallImageDiskCacheInputProducerSuccess() {
=====================================================================
Found a 5 line (44 tokens) duplication in the following files: 
Starting at line 336 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 375 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java

    assertEquals(JobScheduler.JobState.IDLE, mJobScheduler.mJobState);
    assertEquals(0, mTestScheduledExecutorService.getPendingCount());
    assertEquals(0, mTestExecutorService.getPendingCount());
    assertEquals(2, mTestJobRunnable.jobs.size());
    assertJobsEqual(mTestJobRunnable.jobs.get(1), encodedImage3, Consumer.IS_LAST);
=====================================================================
Found a 9 line (44 tokens) duplication in the following files: 
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PostprocessedBitmapMemoryCacheProducerTest.java
Starting at line 165 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PostprocessedBitmapMemoryCacheProducerTest.java

    when(mMemoryCache.cache(mPostprocessedBitmapCacheKey, mImageRef2)).thenReturn(mImageRef2Clone);

    Consumer consumer = performCacheMiss();
    consumer.onNewResult(mImageRef1, Consumer.NO_FLAGS);
    mImageRef1.close();
    consumer.onNewResult(mImageRef2, Consumer.IS_LAST);
    mImageRef2.close();

    verify(mConsumer).onNewResult(mImageRef2Clone, Consumer.IS_LAST);
=====================================================================
Found a 6 line (44 tokens) duplication in the following files: 
Starting at line 822 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 880 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 954 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

        .onFailure(new Exception());
    getOnlyElement(recordingNetworkFetcher.callbacks.get(hipri1.delegatedState))
        .onFailure(new Exception());

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
    assertThat(fetcher.getHiPriQueue()).containsExactly(hipri2);
=====================================================================
Found a 12 line (44 tokens) duplication in the following files: 
Starting at line 381 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ResizeAndRotateProducerTest.java
Starting at line 411 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ResizeAndRotateProducerTest.java

    whenResizingEnabled();
    final int preferredWidth = 300;
    final int preferredHeight = 600;
    whenRequestWidthAndHeight(preferredWidth, preferredHeight);
    whenRequestSpecificRotation(RotationOptions.NO_ROTATION);

    provideIntermediateResult(
        DefaultImageFormats.JPEG,
        preferredWidth * 2,
        preferredHeight * 2,
        0,
        ExifInterface.ORIENTATION_NORMAL);
=====================================================================
Found a 6 line (44 tokens) duplication in the following files: 
Starting at line 584 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\disk\DiskStorageCache.java
Starting at line 603 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\disk\DiskStorageCache.java

    synchronized (mLock) {
      String resourceId = null;
      List<String> resourceIds = CacheKeyUtil.getResourceIds(key);
      for (int i = 0; i < resourceIds.size(); i++) {
        resourceId = resourceIds.get(i);
        if (mResourceIndex.contains(resourceId)) {
=====================================================================
Found a 15 line (44 tokens) duplication in the following files: 
Starting at line 179 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 109 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

        return evictableValueDescriptor.getSizeInBytes(entry.valueRef.get());
      }
    };
  }

  /**
   * Caches the given key-value pair.
   *
   * <p>Important: the client should use the returned reference instead of the original one. It is
   * the caller's responsibility to close the returned reference once not needed anymore.
   *
   * @return the new reference to be used, null if the value cannot be cached
   */
  public @Nullable CloseableReference<V> cache(final K key, final CloseableReference<V> valueRef) {
    return cache(key, valueRef, null);
=====================================================================
Found a 8 line (44 tokens) duplication in the following files: 
Starting at line 605 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1548 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

            100,
            1,
            2,
            initialLFUCacheFractionPromil);
    CloseableReference<Integer> originalRef1 = newReference(10);
    CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);
    originalRef1.close();
    valueRef1.close();
=====================================================================
Found a 7 line (44 tokens) duplication in the following files: 
Starting at line 906 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 584 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    mParams = new MemoryCacheParams(2200, 16, 2200, 16, 110, PARAMS_CHECK_INTERVAL_MS);
    when(mParamsSupplier.get()).thenReturn(mParams);
    PowerMockito.when(SystemClock.uptimeMillis()).thenReturn(PARAMS_CHECK_INTERVAL_MS);
    InOrder inOrder = inOrder(mReleaser);

    // insert item1 to MFU
    CloseableReference<Integer> originalRef1 = newReference(10);
=====================================================================
Found a 6 line (44 tokens) duplication in the following files: 
Starting at line 1101 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1351 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    assertMFUExclusivelyOwned(KEYS[1], 10);
    assertLFUExclusivelyOwned(KEYS[2], 20);

    // insert item3 to MFU
    CloseableReference<Integer> originalRef3 = newReference(30);
    CloseableReference<Integer> valueRef3a = mCache.cache(KEYS[3], originalRef3);
=====================================================================
Found a 7 line (44 tokens) duplication in the following files: 
Starting at line 117 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 129 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java

    assertTrue(mCountingLruMap.contains("key2"));
    assertEquals(3, mCountingLruMap.getCount());
    assertEquals(360, mCountingLruMap.getSizeInBytes());
    assertKeyOrder("key1", "key2", "key3");
    assertValueOrder(110, 120, 130);

    assertTrue(mCountingLruMap.contains("key1"));
=====================================================================
Found a 9 line (44 tokens) duplication in the following files: 
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\image\CloseableStaticBitmapTest.java
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\image\CloseableStaticBitmapTest.java

  public void testWidthAndHeightWithRotatedImage() {
    // Reverse width and height as the rotation angle should put them back again
    mBitmap = Bitmap.createBitmap(HEIGHT, WIDTH, Bitmap.Config.ARGB_8888);
    ResourceReleaser<Bitmap> releaser = SimpleBitmapReleaser.getInstance();
    mCloseableStaticBitmap =
        CloseableStaticBitmap.of(
            mBitmap,
            releaser,
            ImmutableQualityInfo.FULL_QUALITY,
=====================================================================
Found a 9 line (44 tokens) duplication in the following files: 
Starting at line 98 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\main\java\com\facebook\imagepipeline\memory\AshmemMemoryChunk.java
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\main\java\com\facebook\imagepipeline\memory\NativeMemoryChunk.java

    mByteBuffer.get(byteArray, byteArrayOffset, actualCount);
    return actualCount;
  }

  @Override
  public synchronized byte read(final int offset) {
    Preconditions.checkState(!isClosed());
    Preconditions.checkArgument(offset >= 0);
    Preconditions.checkArgument(offset < getSize());
=====================================================================
Found a 6 line (44 tokens) duplication in the following files: 
Starting at line 38 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 38 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 38 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java

    mBufferStats = new PoolStats(mAshmemPool);

    ByteArrayPool byteArrayPool = mock(ByteArrayPool.class);
    byte[] pooledByteArray = new byte[8];
    when(byteArrayPool.get(8)).thenReturn(pooledByteArray);
    PooledByteStreams pooledByteStreams = new PooledByteStreams(byteArrayPool, 8);
=====================================================================
Found a 7 line (44 tokens) duplication in the following files: 
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 139 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 139 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 139 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java

    sb5.close();
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(0, 0),
            8, new IntPair(0, 1),
=====================================================================
Found a 4 line (44 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java
Starting at line 130 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java

    assertEquals(350f, mGestureDetector.getCurrentY()[0], 0);
    assertEquals(500f, mGestureDetector.getStartX()[1], 0);
    assertEquals(600f, mGestureDetector.getStartY()[1], 0);
    assertEquals(500f, mGestureDetector.getCurrentX()[1], 0);
=====================================================================
Found a 7 line (44 tokens) duplication in the following files: 
Starting at line 56 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\main\java\com\facebook\samples\scrollperf\fragments\recycler\DraweeViewHolder.java
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\main\java\com\facebook\samples\scrollperf\fragments\recycler\DraweeViewListAdapter.java

                    mDraweeView.getLayoutParams().width, mDraweeView.getLayoutParams().height));
    PipelineUtil.addOptionalFeatures(imageRequestBuilder, mConfig);
    // Create the Builder
    PipelineDraweeControllerBuilder builder =
        Fresco.newDraweeControllerBuilder().setImageRequest(imageRequestBuilder.build());
    if (mConfig.reuseOldController) {
      builder.setOldController(mDraweeView.getController());
=====================================================================
Found a 14 line (44 tokens) duplication in the following files: 
Starting at line 20 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java

  private static class ScaleTypeFitX extends ScalingUtils.AbstractScaleType {

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float scale, dx, dy;
      scale = scaleX;
=====================================================================
Found a 8 line (44 tokens) duplication in the following files: 
Starting at line 60 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\color\ImageFormatColorFragment.java
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\svg\ImageFormatSvgFragment.java

                .getHierarchy()
                .setBackgroundImage(isChecked ? new CheckerBoardDrawable(getResources()) : null);
          }
        });

    SwitchCompat switchCompat = (SwitchCompat) view.findViewById(R.id.decoder_switch);
    switchCompat.setChecked(
        CustomImageFormatConfigurator.isGlobalColorDecoderEnabled(getContext()));
=====================================================================
Found a 7 line (44 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineNotificationFragment.java
Starting at line 124 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineNotificationFragment.java

          new Notification.Builder(getContext(), NOTIFICATION_CHANNEL_ID)
              .setSmallIcon(R.drawable.ic_done)
              .setLargeIcon(bitmap)
              .setContentTitle(getString(R.string.imagepipeline_notification_content_title))
              .setContentText(getString(R.string.imagepipeline_notification_content_text))
              .build();
    } else {
=====================================================================
Found a 7 line (44 tokens) duplication in the following files: 
Starting at line 112 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\HierarcherImplTest.java
Starting at line 135 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\HierarcherImplTest.java
Starting at line 154 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\HierarcherImplTest.java

    when(options.getRoundingOptions()).thenReturn(RoundingOptions.asCircle());
    when(options.getPlaceholderDrawable()).thenReturn(drawable);
    when(options.getPlaceholderApplyRoundingOptions()).thenReturn(true);

    Drawable result = mHierarcher.buildPlaceholderDrawable(mResources, options);

    assertThat(result).isExactlyInstanceOf(RoundedColorDrawable.class);
=====================================================================
Found a 4 line (43 tokens) duplication in the following files: 
Starting at line 135 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java

            eq(byteBuffer.getNativePtr()), eq(byteBuffer.size()), any(ImageDecodeOptions.class)))
        .thenReturn(mockGifImage);
    when(mockGifImage.getWidth()).thenReturn(50);
    when(mockGifImage.getHeight()).thenReturn(50);
=====================================================================
Found a 4 line (43 tokens) duplication in the following files: 
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 169 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java

            eq(byteBuffer.getByteBuffer()), any(ImageDecodeOptions.class)))
        .thenReturn(mockGifImage);
    when(mockGifImage.getWidth()).thenReturn(50);
    when(mockGifImage.getHeight()).thenReturn(50);
=====================================================================
Found a 4 line (43 tokens) duplication in the following files: 
Starting at line 135 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

            eq(byteBuffer.getNativePtr()), eq(byteBuffer.size()), any(ImageDecodeOptions.class)))
        .thenReturn(mockWebPImage);
    when(mockWebPImage.getWidth()).thenReturn(50);
    when(mockWebPImage.getHeight()).thenReturn(50);
=====================================================================
Found a 4 line (43 tokens) duplication in the following files: 
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 169 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

            eq(byteBuffer.getByteBuffer()), any(ImageDecodeOptions.class)))
        .thenReturn(mockWebPImage);
    when(mockWebPImage.getWidth()).thenReturn(50);
    when(mockWebPImage.getHeight()).thenReturn(50);
=====================================================================
Found a 6 line (43 tokens) duplication in the following files: 
Starting at line 69 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\ForwardingControllerListener.java
Starting at line 86 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\ForwardingControllerListener.java
Starting at line 102 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\ForwardingControllerListener.java
Starting at line 118 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\ForwardingControllerListener.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\ForwardingControllerListener.java
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\ForwardingControllerListener.java
Starting at line 166 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\ForwardingControllerListener.java

  public synchronized void onSubmit(String id, Object callerContext) {
    final int numberOfListeners = mListeners.size();
    for (int i = 0; i < numberOfListeners; ++i) {
      try {
        ControllerListener<? super INFO> listener = mListeners.get(i);
        if (listener != null) {
=====================================================================
Found a 12 line (43 tokens) duplication in the following files: 
Starting at line 96 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java

    verify(mOnFadeListener, never()).onFadeFinished();

    SystemClock.setCurrentTimeMillis((long) (DURATION * 1.1));
    //    mFadeDrawable.fadeInAllLayers();
    mFadeDrawable.draw(mCanvas);
    verify(mOnFadeListener, times(1)).onFadeFinished();

    verifyNoMoreInteractions(mOnFadeListener);
  }

  @Test
  public void testFinishImmediately() {
=====================================================================
Found a 8 line (43 tokens) duplication in the following files: 
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java
Starting at line 181 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java

  public void testFinishImmediately() {
    SystemClock.setCurrentTimeMillis((long) (DURATION * 0.1));

    mFadeDrawable.fadeInLayer(ACTUAL_LAYER_INDEX);
    mFadeDrawable.draw(mCanvas);
    verify(mOnFadeListener, times(1)).onFadeStarted();

    mFadeDrawable.finishTransitionImmediately();
=====================================================================
Found a 8 line (43 tokens) duplication in the following files: 
Starting at line 339 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 357 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 371 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 377 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 386 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 392 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

        (ForwardingDrawable) fadeDrawable.getDrawable(actualImageIndex);

    // initial state -> final image (non-immediate)
    // initial state
    assertEquals(ColorDrawable.class, actualImageSettableDrawable.getCurrent().getClass());
    assertEquals(true, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
=====================================================================
Found a 10 line (43 tokens) duplication in the following files: 
Starting at line 25 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\references\DefaultCloseableReference.java
Starting at line 19 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\references\FinalizerCloseableReference.java

  /*package*/ DefaultCloseableReference(
      T t,
      ResourceReleaser<T> resourceReleaser,
      LeakHandler leakHandler,
      @Nullable Throwable stacktrace) {
    super(t, resourceReleaser, leakHandler, stacktrace, true);
  }

  @Override
  public CloseableReference<T> clone() {
=====================================================================
Found a 10 line (43 tokens) duplication in the following files: 
Starting at line 16 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\references\NoOpCloseableReference.java
Starting at line 22 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\references\RefCountCloseableReference.java

  /*package*/ NoOpCloseableReference(
      T t,
      ResourceReleaser<T> resourceReleaser,
      LeakHandler leakHandler,
      @Nullable Throwable stacktrace) {
    super(t, resourceReleaser, leakHandler, stacktrace, false);
  }

  @Override
  public CloseableReference<T> clone() {
=====================================================================
Found a 8 line (43 tokens) duplication in the following files: 
Starting at line 86 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\SecureHashUtil.java
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\SecureHashUtil.java

      byte[] hash = md.digest();
      return convertToHex(hash);
    } catch (NoSuchAlgorithmException e) {
      throw new RuntimeException(e);
    } catch (UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
  }
=====================================================================
Found a 9 line (43 tokens) duplication in the following files: 
Starting at line 87 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java

    expectExternalSetup();

    StatFsHelper statFsHelper = new StatFsHelper();

    long freeBytes = statFsHelper.getAvailableStorageSpace(StatFsHelper.StorageType.INTERNAL);
    assertEquals(INTERNAL_BLOCK_SIZE * INTERNAL_BLOCKS_FREE, freeBytes);

    freeBytes = statFsHelper.getAvailableStorageSpace(StatFsHelper.StorageType.EXTERNAL);
    assertEquals(EXTERNAL_BLOCK_SIZE * EXTERNAL_BLOCKS_FREE, freeBytes);
=====================================================================
Found a 9 line (43 tokens) duplication in the following files: 
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\AbstractDataSourceTest.java
Starting at line 201 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\AbstractDataSourceTest.java

  public void testLifeCycle_Failure_Close() {
    subscribe();
    // failure
    Throwable throwable = mock(Throwable.class);
    mDataSource.setFailure(throwable);
    verifySubscribers(ON_FAILURE);
    verifyState(mDataSource, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, throwable);
    // close
    mDataSource.close();
=====================================================================
Found a 7 line (43 tokens) duplication in the following files: 
Starting at line 141 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\AbstractDataSourceTest.java
Starting at line 160 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\AbstractDataSourceTest.java

  public void testLifeCycle_IntermediateResult_LastResult_Close() {
    subscribe();
    // intermediate result
    Value value1 = mock(Value.class);
    mDataSource.setResult(value1, INTERMEDIATE);
    verifySubscribers(ON_NEW_RESULT);
    verifyState(mDataSource, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, value1, NOT_FAILED, null);
=====================================================================
Found a 4 line (43 tokens) duplication in the following files: 
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 322 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

    subscriber1.onFailure(mSrc1);
    mInOrder.verify(mSrc1).close();
    DataSubscriber<Object> subscriber2 = verifyGetAndSubscribe(mDataSourceSupplier2, mSrc2);
    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
=====================================================================
Found a 6 line (43 tokens) duplication in the following files: 
Starting at line 71 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 430 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    subscriber2.onNewResult(mSrc2);
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2a, NOT_FAILED, null);

    Object val2b = mock(Object.class);
    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);
=====================================================================
Found a 9 line (43 tokens) duplication in the following files: 
Starting at line 158 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 292 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    testClose(dataSource, mSrc2);
    verifyState(dataSource, null, CLOSED, FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
  }

  /** First data source succeeded, no intermediate results. */
  @Test
  public void testLifecycle_S1_C() {
    DataSource<Object> dataSource = getAndSubscribe();
    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribe(mDataSourceSupplier1, mSrc1);
=====================================================================
Found a 6 line (43 tokens) duplication in the following files: 
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java

      ImageRequest request, Object callerContext, String requestId, boolean isPrefetch) {
    final int numberOfListeners = mRequestListeners.size();
    for (int i = 0; i < numberOfListeners; ++i) {
      RequestListener listener = mRequestListeners.get(i);
      try {
        listener.onRequestStart(request, callerContext, requestId, isPrefetch);
=====================================================================
Found a 10 line (43 tokens) duplication in the following files: 
Starting at line 82 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalExifThumbnailProducer.java
Starting at line 32 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalFetchProducer.java

  }

  @Override
  public void produceResults(
      final Consumer<EncodedImage> consumer, final ProducerContext producerContext) {

    final ProducerListener2 listener = producerContext.getProducerListener();
    final ImageRequest imageRequest = producerContext.getImageRequest();

    producerContext.putOriginExtra("local", "exif");
=====================================================================
Found a 14 line (43 tokens) duplication in the following files: 
Starting at line 61 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\GenericByteArrayPoolTest.java
Starting at line 65 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\AshmemMemoryChunkPoolTest.java
Starting at line 64 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\BufferMemoryChunkPoolTest.java

    int[] invalidSizes = new int[] {-1, 0};
    for (int size : invalidSizes) {
      try {
        mPool.getBucketedSize(size);
        Assert.fail();
      } catch (BasePool.InvalidSizeException e) {
        // do nothing
      }
    }
  }

  // tests out the getBucketedSizeForValue method
  @Test
  public void testGetBucketedSizeForValue() throws Exception {
=====================================================================
Found a 4 line (43 tokens) duplication in the following files: 
Starting at line 88 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 167 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 190 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 215 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    mAddMetaDataConsumer.onNewResult(mFinalResult, Consumer.IS_LAST);
    ArgumentCaptor<EncodedImage> argumentCaptor = ArgumentCaptor.forClass(EncodedImage.class);
    verify(mConsumer).onNewResult(argumentCaptor.capture(), eq(Consumer.IS_LAST));
    EncodedImage encodedImage = argumentCaptor.getValue();
=====================================================================
Found a 6 line (43 tokens) duplication in the following files: 
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 135 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 198 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 224 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 274 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 289 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 197 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }
=====================================================================
Found a 5 line (43 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 285 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 301 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 226 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 257 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
=====================================================================
Found a 6 line (43 tokens) duplication in the following files: 
Starting at line 338 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 169 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 215 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 230 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 245 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }
=====================================================================
Found a 8 line (43 tokens) duplication in the following files: 
Starting at line 262 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 357 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

        .onProducerFinishWithFailure(mLowestLevelProducerContext, PRODUCER_NAME, mException, null);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mLowestLevelProducerContext), anyString(), anyBoolean());
    verify(mInputProducer).produceResults(mConsumer, mLowestLevelProducerContext);
  }

  @Test
  public void testDefaultDiskCacheGetNotFoundInputProducerSuccess() {
=====================================================================
Found a 7 line (43 tokens) duplication in the following files: 
Starting at line 428 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 457 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 297 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java

  private void setupInputProducerSuccess() {
    doAnswer(
            new Answer<Object>() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                Consumer consumer = (Consumer) invocation.getArguments()[0];
                consumer.onNewResult(mIntermediateEncodedImage, Consumer.NO_FLAGS);
=====================================================================
Found a 4 line (43 tokens) duplication in the following files: 
Starting at line 189 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 206 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    setupInputProducerStreamingSuccessFormatUnknown();
    mEncodedMemoryCacheProducer.produceResults(mConsumer, mProducerContext);
    verify(mMemoryCache, never()).cache(any(CacheKey.class), any(CloseableReference.class));
    verify(mConsumer).onNewResult(mIntermediateEncodedImage, Consumer.NO_FLAGS);
=====================================================================
Found a 7 line (43 tokens) duplication in the following files: 
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 113 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java
Starting at line 117 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java
Starting at line 132 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java

    assertSame(pooledByteBuffer, mCapturedEncodedImage.getByteBufferRef().get());
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener).onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, true);
  }

  @Test(expected = RuntimeException.class)
=====================================================================
Found a 7 line (43 tokens) duplication in the following files: 
Starting at line 124 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 178 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

  public void hipriIsFifo() {
    // Hi-pri is FIFO, Max hi-pri: 2, max low-pri: 1
    PriorityNetworkFetcher<FetchState> fetcher =
        newFetcher(delegate, true, 2, 1, true, 0, false, false);

    // Fill the currently-fetching set, so additional requests are not sent to network.
    PriorityFetchState<FetchState> dontcare1 = fetch(fetcher, "dontcare1", callback, true);
=====================================================================
Found a 5 line (43 tokens) duplication in the following files: 
Starting at line 322 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 436 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 454 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

  public void contextCancellationIsCallCancellation() {
    // Hi-pri is LIFO, Max hi-pri: 2, max low-pri: 1
    PriorityNetworkFetcher<FetchState> fetcher =
        newFetcher(delegate, false, 2, 1, true, 0, false, false);
    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, true);
=====================================================================
Found a 6 line (43 tokens) duplication in the following files: 
Starting at line 336 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 549 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

  public void testCancellations() {
    // Hi-pri is LIFO, Max hi-pri: 2, max low-pri: 1
    PriorityNetworkFetcher<FetchState> fetcher =
        newFetcher(delegate, false, 2, 1, true, 0, false, false);

    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, false);
=====================================================================
Found a 5 line (43 tokens) duplication in the following files: 
Starting at line 1215 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 1222 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 1274 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

      assertThat(delegateFetcher.callbacks).hasSize(i + 1);
      FetchState lastFetched = getLast(delegateFetcher.callbacks.keys());
      assertThat(lastFetched.getUri().toString()).isEqualTo("uri1");
      getOnlyElement(delegateFetcher.callbacks.get(lastFetched))
          .onFailure(new IOException("Canceled"));
=====================================================================
Found a 8 line (43 tokens) duplication in the following files: 
Starting at line 653 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ResizeAndRotateProducerTest.java
Starting at line 663 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ResizeAndRotateProducerTest.java

      NativeJpegTranscoder.transcodeJpeg(
          any(InputStream.class), any(OutputStream.class), anyInt(), anyInt(), anyInt());
    } catch (IOException ioe) {
      throw new RuntimeException(ioe);
    }
  }

  private static void verifyZeroJpegTranscoderExifOrientationInteractions() {
=====================================================================
Found a 5 line (43 tokens) duplication in the following files: 
Starting at line 375 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\disk\DiskStorageCache.java
Starting at line 603 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\disk\DiskStorageCache.java

      try {
        String resourceId = null;
        List<String> resourceIds = CacheKeyUtil.getResourceIds(key);
        for (int i = 0; i < resourceIds.size(); i++) {
          resourceId = resourceIds.get(i);
=====================================================================
Found a 16 line (43 tokens) duplication in the following files: 
Starting at line 329 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 236 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

    increaseCounters(entry);
    return CloseableReference.of(
        entry.valueRef.get(),
        new ResourceReleaser<V>() {
          @Override
          public void release(V unused) {
            releaseClientReference(entry);
          }
        });
  }

  /**
   * Adds a key to the ghost list and removes the eldest elemenet if the size of the list is bigger
   * than mGhostListMaxSize
   */
  private synchronized void addElementToGhostList(
=====================================================================
Found a 9 line (43 tokens) duplication in the following files: 
Starting at line 543 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 412 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

    synchronized (this) {
      int maxCount =
          Math.min(
              mMemoryCacheParams.maxEvictionQueueEntries,
              mMemoryCacheParams.maxCacheEntries - getInUseCount());
      int maxSize =
          Math.min(
              mMemoryCacheParams.maxEvictionQueueSize,
              mMemoryCacheParams.maxCacheSize - getInUseSizeInBytes());
=====================================================================
Found a 4 line (43 tokens) duplication in the following files: 
Starting at line 69 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 72 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

  private static final String KEY = "KEY";
  private static final String[] KEYS =
      new String[] {"k0", "k1", "k2", "k3", "k4", "k5", "k6", "k7", "k8", "k9"};
  private static final int initialLFUCacheFractionPromil = 500;
=====================================================================
Found a 9 line (43 tokens) duplication in the following files: 
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\main\java\com\facebook\imagepipeline\memory\AshmemMemoryChunk.java
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\main\java\com\facebook\imagepipeline\memory\NativeMemoryChunk.java

    mByteBuffer.put(byteArray, byteArrayOffset, actualCount);
    return actualCount;
  }

  @Override
  public synchronized int read(
      final int memoryOffset, final byte[] byteArray, final int byteArrayOffset, final int count) {
    Preconditions.checkNotNull(byteArray);
    Preconditions.checkNotNull(mByteBuffer);
=====================================================================
Found a 6 line (43 tokens) duplication in the following files: 
Starting at line 79 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRoundedCornersFragment.java
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeScaleTypeFragment.java
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeSpanSimpleTextFragment.java

    scaleType.setOnItemSelectedListener(
        new AdapterView.OnItemSelectedListener() {
          @Override
          public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
            final SimpleScaleTypeAdapter.Entry spinnerEntry =
                (SimpleScaleTypeAdapter.Entry) scaleTypeAdapter.getItem(position);
=====================================================================
Found a 7 line (43 tokens) duplication in the following files: 
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\color\ImageFormatColorFragment.java
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\svg\ImageFormatSvgFragment.java

    mSimpleDraweeView2.setImageURI(UriUtil.getUriForResourceId(R.raw.custom_color2));

    final SwitchCompat switchBackground = (SwitchCompat) view.findViewById(R.id.switch_background);
    switchBackground.setOnCheckedChangeListener(
        new CompoundButton.OnCheckedChangeListener() {
          @Override
          public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
=====================================================================
Found a 6 line (43 tokens) duplication in the following files: 
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\ImagePipelineUtilsImplTest.java
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\ImagePipelineUtilsImplTest.java
Starting at line 111 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\ImagePipelineUtilsImplTest.java
Starting at line 126 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\ImagePipelineUtilsImplTest.java

    ImageRequest imageRequest = mImagePipelineUtils.buildImageRequest(URI, imageOptions);

    assertThat(imageRequest).isNotNull();
    assertThat(imageRequest.getSourceUri()).isEqualTo(URI);
    ImageDecodeOptions imageDecodeOptions = imageRequest.getImageDecodeOptions();
    assertThat(imageDecodeOptions).isEqualTo(mRoundingDecodeOptions);
=====================================================================
Found a 10 line (42 tokens) duplication in the following files: 
Starting at line 102 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\MatrixDrawable.java
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScaleTypeDrawable.java

    Rect bounds = getBounds();
    int underlyingWidth = mUnderlyingWidth = underlyingDrawable.getIntrinsicWidth();
    int underlyingHeight = mUnderlyingHeight = underlyingDrawable.getIntrinsicHeight();

    // In case underlying drawable doesn't have intrinsic dimensions, we cannot set its bounds to
    // -1 so we use our bounds and discard specified matrix. In normal case we use drawable's
    // intrinsic dimensions for its bounds and apply specified matrix to it.
    if (underlyingWidth <= 0 || underlyingHeight <= 0) {
      underlyingDrawable.setBounds(bounds);
      mDrawMatrix = null;
=====================================================================
Found a 8 line (42 tokens) duplication in the following files: 
Starting at line 34 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\MatrixDrawableTest.java
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ScaleTypeDrawableTest.java

    mMatrixDrawable = new MatrixDrawable(mUnderlyingDrawable, mMatrix1);
  }

  @Test
  public void testIntrinsicDimensions() {
    when(mUnderlyingDrawable.getIntrinsicWidth()).thenReturn(100);
    when(mUnderlyingDrawable.getIntrinsicHeight()).thenReturn(200);
    Assert.assertEquals(100, mMatrixDrawable.getIntrinsicWidth());
=====================================================================
Found a 5 line (42 tokens) duplication in the following files: 
Starting at line 443 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 454 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 469 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 496 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 507 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 534 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 573 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 584 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 595 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 611 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 622 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
=====================================================================
Found a 5 line (42 tokens) duplication in the following files: 
Starting at line 40 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java
Starting at line 113 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java

    mSpec.height = makeMeasureSpec(310, UNSPECIFIED);
    LayoutParams layoutParams2 = new LayoutParams(MATCH_PARENT, WRAP_CONTENT);
    AspectRatioMeasure.updateMeasureSpec(mSpec, 2f, layoutParams2, 10, 10);
    assertEquals(makeMeasureSpec(410, EXACTLY), mSpec.width);
    assertEquals(makeMeasureSpec(210, EXACTLY), mSpec.height);
=====================================================================
Found a 6 line (42 tokens) duplication in the following files: 
Starting at line 73 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListenerTest.java
Starting at line 170 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListenerTest.java

    verify(mImagePerfMonitor).notifyStatusUpdated(eq(mImagePerfState), eq(ImageLoadStatus.SUCCESS));
    verify(mImagePerfMonitor)
        .notifyListenersOfVisibilityStateUpdate(eq(mImagePerfState), eq(VisibilityState.VISIBLE));
    verify(mImagePerfMonitor)
        .notifyListenersOfVisibilityStateUpdate(eq(mImagePerfState), eq(VisibilityState.INVISIBLE));
    verify(mListener).reportViewVisible(anyLong());
=====================================================================
Found a 8 line (42 tokens) duplication in the following files: 
Starting at line 188 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\references\CloseableReference.java
Starting at line 201 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\references\CloseableReference.java

          (ResourceReleaser<T>) DEFAULT_CLOSEABLE_RELEASER,
          leakHandler,
          leakHandler.requiresStacktrace() ? new Throwable() : null);
    }
  }

  public static <T> CloseableReference<T> of(
      @PropagatesNullable T t, ResourceReleaser<T> resourceReleaser, LeakHandler leakHandler) {
=====================================================================
Found a 9 line (42 tokens) duplication in the following files: 
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java

                dataSubscriber.onNewResult(mDataSource);
                return null;
              }
            })
        .when(mDataSource)
        .subscribe(any(DataSubscriber.class), any(Executor.class));

    final Object actual = DataSources.waitForFinalResult(mDataSource);
    assertEquals(mFinalResult, actual);
=====================================================================
Found a 5 line (42 tokens) duplication in the following files: 
Starting at line 40 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 123 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

    setState(mSrc2, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, mock(Throwable.class));
    subscriber2.onFailure(mSrc2);
    mInOrder.verify(mSrc2).close();
    DataSubscriber<Object> subscriber3 = verifyGetAndSubscribe(mDataSourceSupplier3, mSrc3);
    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
=====================================================================
Found a 6 line (42 tokens) duplication in the following files: 
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 325 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 204 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);

    Object val2a = mock(Object.class);
    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2a, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
=====================================================================
Found a 6 line (42 tokens) duplication in the following files: 
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 299 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

    verifyState(dataSource, mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2, NOT_FAILED, null);

    Object val = mock(Object.class);
    setState(mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
    verifySubscriber(dataSource, mSrc1, ON_NEW_RESULT);
=====================================================================
Found a 6 line (42 tokens) duplication in the following files: 
Starting at line 329 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 430 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    subscriber2.onNewResult(mSrc2);
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2a, NOT_FAILED, null);

    Object val2b = mock(Object.class);
    setState(mSrc2, NOT_CLOSED, FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);
=====================================================================
Found a 5 line (42 tokens) duplication in the following files: 
Starting at line 30 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 61 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 99 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 246 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 272 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 298 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 318 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 338 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 351 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 377 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

  public void testLifecycle_F2_F3_F1_C() {
    DataSource<Object> dataSource = getAndSubscribe();
    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribeM(mDataSourceSupplier1, mSrc1);
    DataSubscriber<Object> subscriber2 = verifyGetAndSubscribeM(mDataSourceSupplier2, mSrc2);
    DataSubscriber<Object> subscriber3 = verifyGetAndSubscribe(mDataSourceSupplier3, mSrc3);
=====================================================================
Found a 7 line (42 tokens) duplication in the following files: 
Starting at line 157 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 436 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);

    // gets ignored because DS2 was first to produce result
    Object val1a = mock(Object.class);
=====================================================================
Found a 6 line (42 tokens) duplication in the following files: 
Starting at line 214 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 403 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    setState(mSrc3, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val3b, NOT_FAILED, null);
    subscriber3.onNewResult(mSrc3);
    verifySubscriber(dataSource, mSrc3, ON_NEW_RESULT);
    verifyState(dataSource, mSrc3, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val3b, NOT_FAILED, null);

    Object val2b = mock(Object.class);
=====================================================================
Found a 21 line (42 tokens) duplication in the following files: 
Starting at line 129 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java
Starting at line 157 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java
Starting at line 188 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java

        return fetchDecodedImage(imageRequest, callerContext, requestLevel);
      }

      @Override
      public String toString() {
        return Objects.toStringHelper(this).add("uri", imageRequest.getSourceUri()).toString();
      }
    };
  }

  /**
   * Returns a DataSource supplier that will on get submit the request for execution and return a
   * DataSource representing the pending results of the task.
   *
   * @param imageRequest the request to submit (what to execute).
   * @param callerContext the caller context of the caller of data source supplier
   * @param requestLevel which level to look down until for the image
   * @param requestListener additional image request listener independent of ImageRequest listeners
   * @return a DataSource representing pending results and completion of the request
   */
  public Supplier<DataSource<CloseableReference<CloseableImage>>> getDataSourceSupplier(
=====================================================================
Found a 16 line (42 tokens) duplication in the following files: 
Starting at line 159 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapProbeProducer.java
Starting at line 142 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedProbeProducer.java

        }

        getConsumer().onNewResult(newResult, status);

      } finally {
        if (FrescoSystrace.isTracing()) {
          FrescoSystrace.endSection();
        }
      }
    }
  }

  protected String getProducerName() {
    return PRODUCER_NAME;
  }
}
=====================================================================
Found a 8 line (42 tokens) duplication in the following files: 
Starting at line 102 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\DiskCacheReadProducer.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PartialDiskCacheProducer.java

          mInputProducer.produceResults(consumer, producerContext);
        } else {
          EncodedImage cachedReference = task.getResult();
          if (cachedReference != null) {
            listener.onProducerFinishWithSuccess(
                producerContext,
                PRODUCER_NAME,
                getExtraMap(listener, producerContext, true, cachedReference.getSize()));
=====================================================================
Found a 5 line (42 tokens) duplication in the following files: 
Starting at line 155 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 164 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

  public void testPrefetchToDiskCacheDefaultPriority() {
    Producer<Void> prefetchProducerSequence = mock(Producer.class);
    when(mProducerSequenceFactory.getEncodedImagePrefetchProducerSequence(mImageRequest))
        .thenReturn(prefetchProducerSequence);
    DataSource<Void> dataSource = mImagePipeline.prefetchToDiskCache(mImageRequest, mCallerContext);
=====================================================================
Found a 6 line (42 tokens) duplication in the following files: 
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 205 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

  public void testPrefetchToEncodedCacheDefaultPriority() {
    Producer<Void> prefetchProducerSequence = mock(Producer.class);
    when(mProducerSequenceFactory.getEncodedImagePrefetchProducerSequence(mImageRequest))
        .thenReturn(prefetchProducerSequence);
    DataSource<Void> dataSource =
        mImagePipeline.prefetchToEncodedCache(mImageRequest, mCallerContext);
=====================================================================
Found a 11 line (42 tokens) duplication in the following files: 
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\CloseableProducerToDataSourceAdapterTest.java
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

  }

  private void verifyNoMoreInteractionsAndReset() {
    verifyNoMoreInteractions(mRequestListener, mDataSubscriber1, mDataSubscriber2);
    reset(mRequestListener, mDataSubscriber1, mDataSubscriber2);
  }

  /* state verification methods */

  private void verifyInitial() {
    verifyState(NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
=====================================================================
Found a 8 line (42 tokens) duplication in the following files: 
Starting at line 30 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\filter\IterativeBoxBlurFilterTest.java
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\filter\IterativeBoxBlurFilterTest.java

    IterativeBoxBlurFilter.boxBlurBitmapInPlace(mBitmap, 1, 4);
    assertNotNull(mBitmap);
    assertEquals(mBitmap.getWidth(), BITMAP_SIZE);
    assertEquals(mBitmap.getHeight(), BITMAP_SIZE);
    assertEquals(mBitmap.getConfig(), Bitmap.Config.ARGB_8888);
  }

  @Test
=====================================================================
Found a 6 line (42 tokens) duplication in the following files: 
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RemoveImageTransformMetaDataProducerTest.java
Starting at line 159 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ResizeAndRotateProducerTest.java

                mAddMetaDataConsumer = (Consumer<EncodedImage>) invocation.getArguments()[0];
                return null;
              }
            })
        .when(mInputProducer)
        .produceResults(any(Consumer.class), any(ProducerContext.class));
=====================================================================
Found a 5 line (42 tokens) duplication in the following files: 
Starting at line 176 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 169 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 197 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 215 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 230 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 245 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
=====================================================================
Found a 7 line (42 tokens) duplication in the following files: 
Starting at line 457 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 268 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java
Starting at line 297 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java

  private void setupInputProducerNotFound() {
    doAnswer(
            new Answer<Object>() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                Consumer consumer = (Consumer) invocation.getArguments()[0];
                consumer.onNewResult(null, Consumer.IS_LAST);
=====================================================================
Found a 8 line (42 tokens) duplication in the following files: 
Starting at line 141 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 164 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 176 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java

    assertEquals(Consumer.NO_FLAGS, mJobScheduler.mStatus);
    assertEquals(0, mTestScheduledExecutorService.getPendingCount());
    assertEquals(0, mTestExecutorService.getPendingCount());
    assertEquals(0, mTestJobRunnable.jobs.size());
  }

  @Test
  public void testUpdate_Intermediate_Invalid() {
=====================================================================
Found a 5 line (42 tokens) duplication in the following files: 
Starting at line 375 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\disk\DiskStorageCache.java
Starting at line 584 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\disk\DiskStorageCache.java

      try {
        String resourceId = null;
        List<String> resourceIds = CacheKeyUtil.getResourceIds(key);
        for (int i = 0; i < resourceIds.size(); i++) {
          resourceId = resourceIds.get(i);
=====================================================================
Found a 8 line (42 tokens) duplication in the following files: 
Starting at line 343 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DiskStorageCacheTest.java
Starting at line 375 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DiskStorageCacheTest.java

    verifyListenerOnWriteException(key1, writeException);

    // 2. Test a read failure from DiskStorage
    CacheKey key2 = new SimpleCacheKey("bbb");
    int value2Size = 42;
    byte[] value2 = new byte[value2Size];
    value2[25] = 'b';
    mCache.insert(key2, WriterCallbacks.from(value2));
=====================================================================
Found a 8 line (42 tokens) duplication in the following files: 
Starting at line 1352 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1416 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    assertLFUExclusivelyOwned(KEYS[2], 20);

    // insert item3 to LFU
    CloseableReference<Integer> originalRef3 = newReference(30);
    CloseableReference<Integer> valueRef3a = mCache.cache(KEYS[3], originalRef3);
    originalRef3.close();
    valueRef3a.close();
    assertLFUExclusivelyOwned(KEYS[1], 10);
=====================================================================
Found a 9 line (42 tokens) duplication in the following files: 
Starting at line 57 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 103 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 135 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java

    mCountingLruMap.put("key3", 130);
    assertEquals(3, mCountingLruMap.getCount());
    assertEquals(360, mCountingLruMap.getSizeInBytes());
    assertKeyOrder("key1", "key2", "key3");
    assertValueOrder(110, 120, 130);
  }

  @Test
  public void testPut_SameKeyTwice() {
=====================================================================
Found a 3 line (42 tokens) duplication in the following files: 
Starting at line 57 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java
Starting at line 114 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java

    assertEquals(300f, mGestureDetector.getStartY()[0], 0);
    assertEquals(150f, mGestureDetector.getCurrentX()[0], 0);
    assertEquals(350f, mGestureDetector.getCurrentY()[0], 0);
=====================================================================
Found a 3 line (42 tokens) duplication in the following files: 
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java
Starting at line 128 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java

    assertEquals(300f, mGestureDetector.getStartY()[0], 0);
    assertEquals(200f, mGestureDetector.getCurrentX()[0], 0);
    assertEquals(400f, mGestureDetector.getCurrentY()[0], 0);
=====================================================================
Found a 7 line (42 tokens) duplication in the following files: 
Starting at line 74 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeScaleTypeFragment.java
Starting at line 82 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineBitmapFactoryFragment.java

    final SimpleScaleTypeAdapter adapter = SimpleScaleTypeAdapter.createForAllScaleTypes();
    mSpinner.setAdapter(adapter);
    mSpinner.setOnItemSelectedListener(
        new AdapterView.OnItemSelectedListener() {
          @Override
          public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
            final SimpleScaleTypeAdapter.Entry spinnerEntry =
=====================================================================
Found a 7 line (42 tokens) duplication in the following files: 
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\color\ImageFormatColorFragment.java
Starting at line 53 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\keyframes\ImageFormatKeyframesFragment.java

    mSimpleDraweeView2.setImageURI(UriUtil.getUriForResourceId(R.raw.custom_color2));

    final SwitchCompat switchBackground = (SwitchCompat) view.findViewById(R.id.switch_background);
    switchBackground.setOnCheckedChangeListener(
        new CompoundButton.OnCheckedChangeListener() {
          @Override
          public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
=====================================================================
Found a 8 line (42 tokens) duplication in the following files: 
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\HierarcherImplTest.java
Starting at line 209 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\HierarcherImplTest.java

    Drawable errorDrawable = mHierarcher.buildPlaceholderDrawable(mResources, options);

    assertThat(errorDrawable).isNotNull();
    assertThat(errorDrawable).isInstanceOf(ScaleTypeDrawable.class);

    ScaleTypeDrawable scaleTypeDrawable = (ScaleTypeDrawable) errorDrawable;
    assertThat(scaleTypeDrawable.getScaleType())
        .isEqualTo(ImageOptions.defaults().getPlaceholderScaleType());
=====================================================================
Found a 5 line (41 tokens) duplication in the following files: 
Starting at line 250 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 316 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    when(mBitmapFrameCache.getBitmapToReuseForFrame(anyInt(), anyInt(), anyInt()))
        .thenReturn(mBitmapRefererence);
    when(mBitmapFrameRenderer.renderFrame(anyInt(), any(Bitmap.class))).thenReturn(true);

    mBitmapAnimationBackend.drawFrame(mParentDrawable, mCanvas, 1);
=====================================================================
Found a 13 line (41 tokens) duplication in the following files: 
Starting at line 109 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif-lite\src\main\java\com\facebook\animated\giflite\drawable\GifAnimationBackend.java
Starting at line 106 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\local\LocalDrawableAnimationBackend.java

  }

  @Override
  public int getLoopDurationMs() {
    int total = 0;
    for (int i = 0; i < getFrameCount(); i++) {
      total += getFrameDurationMs(i);
    }
    return total;
  }

  @Override
  public int getFrameCount() {
=====================================================================
Found a 8 line (41 tokens) duplication in the following files: 
Starting at line 388 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 424 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java

      }
      outTransform.setScale(scale, scale);
      outTransform.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
    }

    @Override
    public String toString() {
      return "center_crop";
=====================================================================
Found a 14 line (41 tokens) duplication in the following files: 
Starting at line 437 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 465 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java

    public static final ScaleType INSTANCE = new ScaleTypeFitX();

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float scale, dx, dy;
      scale = scaleX;
=====================================================================
Found a 4 line (41 tokens) duplication in the following files: 
Starting at line 266 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 293 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java

    verify(mLayers[2]).setAlpha(255);
    verify(mLayers[2]).draw(mCanvas);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    verifyNoMoreInteractions(mCallback, mLayers[0], mLayers[1], mLayers[2]);
=====================================================================
Found a 6 line (41 tokens) duplication in the following files: 
Starting at line 60 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java
Starting at line 181 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java

  public void testSimple() {
    SystemClock.setCurrentTimeMillis((long) (DURATION * 0.1));

    mFadeDrawable.fadeInLayer(ACTUAL_LAYER_INDEX);
    mFadeDrawable.draw(mCanvas);
    verify(mOnFadeListener, times(1)).onFadeStarted();
=====================================================================
Found a 8 line (41 tokens) duplication in the following files: 
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\DraweeHolderTest.java
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\DraweeHolderTest.java

    mDraweeHolder.setController(mController);
    assertSame(mController, mDraweeHolder.getController());
    assertSame(mDraweeHierarchy, mDraweeHolder.getHierarchy());
    assertSame(mDraweeHierarchy, mController.getHierarchy());
  }

  @Test
  public void testSetControllerWithoutHierarchy() {
=====================================================================
Found a 9 line (41 tokens) duplication in the following files: 
Starting at line 135 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\DraweeHolderTest.java
Starting at line 162 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\DraweeHolderTest.java

  public void testSetNewControllerWithInvalidController() {
    final DraweeHierarchy draweeHierarchy2 = DraweeMocks.mockDraweeHierarchyOf(mTopLevelDrawable);
    final DraweeHolder draweeHolder2 = new DraweeHolder(draweeHierarchy2);

    mDraweeHolder.onAttach();
    mDraweeHolder.setController(mController);
    draweeHolder2.setController(mController);

    mDraweeHolder.setController(null);
=====================================================================
Found a 5 line (41 tokens) duplication in the following files: 
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java
Starting at line 154 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java
Starting at line 174 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java

    mMultiHolder.add(1, mHolder3);
    assertEquals(2, mMultiHolder.mHolders.size());
    assertEquals(mHolder1, mMultiHolder.mHolders.get(0));
    assertEquals(mHolder3, mMultiHolder.mHolders.get(1));
    mMultiHolder.add(1, mHolder2);
=====================================================================
Found a 5 line (41 tokens) duplication in the following files: 
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java

    map.put(k2, v2);
    return Collections.unmodifiableMap(map);
  }

  public static <K, V> Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3) {
=====================================================================
Found a 6 line (41 tokens) duplication in the following files: 
Starting at line 63 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java
Starting at line 74 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java

    Map<K, V> map = new HashMap<>(5);
    map.put(k1, v1);
    map.put(k2, v2);
    map.put(k3, v3);
    map.put(k4, v4);
    map.put(k5, v5);
=====================================================================
Found a 7 line (41 tokens) duplication in the following files: 
Starting at line 109 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java
Starting at line 169 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java
Starting at line 190 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java
Starting at line 212 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java

    StatFsHelper statFsHelper = new StatFsHelper();

    long freeBytes = statFsHelper.getAvailableStorageSpace(StatFsHelper.StorageType.INTERNAL);
    assertEquals(INTERNAL_BLOCK_SIZE * INTERNAL_BLOCKS_FREE, freeBytes);

    freeBytes = statFsHelper.getAvailableStorageSpace(StatFsHelper.StorageType.EXTERNAL);
    assertEquals(0, freeBytes);
=====================================================================
Found a 4 line (41 tokens) duplication in the following files: 
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 436 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);
=====================================================================
Found a 5 line (41 tokens) duplication in the following files: 
Starting at line 106 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 220 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 253 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 325 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 358 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
    mInOrder.verify(mSrc3).close();
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2, NOT_FAILED, null);
=====================================================================
Found a 5 line (41 tokens) duplication in the following files: 
Starting at line 182 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 234 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 260 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 442 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    setState(mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val1c, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
    mInOrder.verify(mSrc2).close();
    verifySubscriber(dataSource, mSrc1, ON_NEW_RESULT);
    verifyState(dataSource, mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val1c, NOT_FAILED, null);
=====================================================================
Found a 5 line (41 tokens) duplication in the following files: 
Starting at line 153 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java
Starting at line 183 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java

      final @Nullable RequestListener requestListener) {
    return new Supplier<DataSource<CloseableReference<CloseableImage>>>() {
      @Override
      public DataSource<CloseableReference<CloseableImage>> get() {
        return fetchDecodedImage(imageRequest, callerContext, requestLevel, requestListener);
=====================================================================
Found a 8 line (41 tokens) duplication in the following files: 
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BranchOnSeparateImagesProducerTest.java
Starting at line 160 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BranchOnSeparateImagesProducerTest.java

    verify(mConsumer, never()).onNewResult(isNull(EncodedImage.class), anyInt());
    EncodedImage finalEncodedImage = new EncodedImage(mIntermediateResult.getByteBufferRef());
    mSecondProducerConsumer.onNewResult(finalEncodedImage, Consumer.IS_LAST);
    verify(mConsumer).onNewResult(finalEncodedImage, Consumer.IS_LAST);
  }

  @Test
  public void testFirstProducerFails() {
=====================================================================
Found a 6 line (41 tokens) duplication in the following files: 
Starting at line 224 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 157 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }
=====================================================================
Found a 7 line (41 tokens) duplication in the following files: 
Starting at line 428 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 443 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 457 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 283 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java
Starting at line 297 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java

  private void setupInputProducerSuccess() {
    doAnswer(
            new Answer<Object>() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                Consumer consumer = (Consumer) invocation.getArguments()[0];
                consumer.onNewResult(mIntermediateEncodedImage, Consumer.NO_FLAGS);
=====================================================================
Found a 10 line (41 tokens) duplication in the following files: 
Starting at line 48 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java
Starting at line 47 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java

  @Mock public Consumer<EncodedImage> mConsumer;
  @Mock public ImageRequest mImageRequest;
  @Mock public ProducerListener2 mProducerListener;
  @Mock public Exception mException;
  @Mock public ImagePipelineConfig mConfig;

  private TestExecutorService mExecutor;
  private SettableProducerContext mProducerContext;
  private final String mRequestId = "mRequestId";
  private LocalAssetFetchProducer mLocalAssetFetchProducer;
=====================================================================
Found a 7 line (41 tokens) duplication in the following files: 
Starting at line 177 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 132 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java

    assertConsumerReceivesImage();
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener).onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, true);
  }

  @Test(expected = RuntimeException.class)
=====================================================================
Found a 7 line (41 tokens) duplication in the following files: 
Starting at line 346 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 423 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

  public void testCancelDoesNotChangeIsPrefetchIfOtherIsNotPrefetch() {
    mProducerContext1.setIsPrefetch(false);
    mProducerContext2.setIsPrefetch(false);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext1);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext2);
    assertFalse(mMultiplexedContext1.isPrefetch());
    mProducerContext2.cancel();
=====================================================================
Found a 7 line (41 tokens) duplication in the following files: 
Starting at line 472 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 538 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

  public void testCancelDoesNotChangeIsIntermediateResultExpectedIfNotNeeded2() {
    mProducerContext1.setIsIntermediateResultExpected(true);
    mProducerContext2.setIsIntermediateResultExpected(true);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext1);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext2);
    assertTrue(mMultiplexedContext1.isIntermediateResultExpected());
    mProducerContext2.cancel();
=====================================================================
Found a 4 line (41 tokens) duplication in the following files: 
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, true);
    assertThat(fetcher.getHiPriQueue()).isEmpty();
    assertThat(fetcher.getLowPriQueue()).isEmpty();
    assertThat(fetcher.getCurrentlyFetching()).containsExactly(one);
=====================================================================
Found a 5 line (41 tokens) duplication in the following files: 
Starting at line 322 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 336 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 436 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 454 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 549 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

  public void contextCancellationIsCallCancellation() {
    // Hi-pri is LIFO, Max hi-pri: 2, max low-pri: 1
    PriorityNetworkFetcher<FetchState> fetcher =
        newFetcher(delegate, false, 2, 1, true, 0, false, false);
    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, true);
=====================================================================
Found a 7 line (41 tokens) duplication in the following files: 
Starting at line 651 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 905 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

        .onFailure(new Exception());

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
    assertThat(fetcher.getHiPriQueue()).containsExactly(hipri2);
    assertThat(fetcher.getLowPriQueue()).isEmpty();

    assertThat(hipri1.requeueCount).isEqualTo(1);
=====================================================================
Found a 4 line (41 tokens) duplication in the following files: 
Starting at line 293 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\disk\DiskStorageCache.java
Starting at line 605 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\disk\DiskStorageCache.java

        List<String> resourceIds = CacheKeyUtil.getResourceIds(key);
        for (int i = 0; i < resourceIds.size(); i++) {
          resourceId = resourceIds.get(i);
          if (mStorage.touch(resourceId, key)) {
=====================================================================
Found a 6 line (41 tokens) duplication in the following files: 
Starting at line 423 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 441 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java

  public int removeAll(Predicate<K> predicate) {
    ArrayList<Entry<K, V>> oldLFUExclusives;
    ArrayList<Entry<K, V>> oldMFUExclusives;
    ArrayList<Entry<K, V>> oldEntries;
    synchronized (this) {
      oldLFUExclusives = mLeastFrequentlyUsedExclusiveEntries.removeAll(predicate);
=====================================================================
Found a 6 line (41 tokens) duplication in the following files: 
Starting at line 297 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DefaultDiskStorageTest.java
Starting at line 596 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DefaultDiskStorageTest.java

    List<DiskStorage.Entry> entries = new ArrayList<>(storage.getEntries());
    Collections.sort(
        entries,
        new Comparator<DiskStorage.Entry>() {
          @Override
          public int compare(DiskStorage.Entry lhs, DiskStorage.Entry rhs) {
=====================================================================
Found a 8 line (41 tokens) duplication in the following files: 
Starting at line 89 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DynamicDefaultDiskStorageTest.java
Starting at line 121 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DynamicDefaultDiskStorageTest.java

    Assert.assertNotSame(delegate, storage3);
    Assert.assertTrue(storage3 instanceof DefaultDiskStorage);
    Assert.assertTrue(baseDir.exists());
    Assert.assertTrue(getStorageSubdirectory(baseDir, 1).exists());
  }

  @Test
  public void testGet_InternalFilesDir() throws Exception {
=====================================================================
Found a 9 line (41 tokens) duplication in the following files: 
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 156 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 112 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    mCache.cache(KEY, newReference(100));
    assertTotalSize(1, 100);
    assertExclusivelyOwnedSize(0, 0);
    assertSharedWithCount(KEY, 100, 1);
    verify(mReleaser, never()).release(anyInt());
  }

  @Test
  public void testClosingOriginalReference() {
=====================================================================
Found a 12 line (41 tokens) duplication in the following files: 
Starting at line 387 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 752 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  public void testCachingSameKeyTwice() {
    mCache =
        createDummyAdaptiveCountingMemoryCache(
            mParamsSupplier,
            mCacheTrimStrategy,
            mValueDescriptor,
            100,
            1,
            2,
            initialLFUCacheFractionPromil);
    CloseableReference<Integer> originalRef1 = newReference(110);
    CloseableReference<Integer> cachedRef1 = mCache.cache(KEY, originalRef1);
=====================================================================
Found a 6 line (41 tokens) duplication in the following files: 
Starting at line 860 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 650 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    assertNotCached(KEYS[4], 104);
    assertNotCached(KEYS[2], 102);
    assertNotCached(KEYS[7], 107);
    assertNotCached(KEYS[3], 103);
    assertNotCached(KEYS[6], 106);
    assertTotalSize(5, 523);
=====================================================================
Found a 10 line (41 tokens) duplication in the following files: 
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\test\java\com\facebook\imagepipeline\platform\GingerbreadPurgeableDecoderTest.java
Starting at line 84 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\test\java\com\facebook\imagepipeline\platform\KitKatPurgeableDecoderTest.java

  protected CloseableReference<PooledByteBuffer> mByteBufferRef;
  protected EncodedImage mEncodedImage;
  protected byte[] mInputBuf;
  protected byte[] mDecodeBuf;
  protected CloseableReference<byte[]> mDecodeBufRef;
  protected Bitmap mBitmap;
  protected BitmapCounter mBitmapCounter;

  @Before
  public void setUp() {
=====================================================================
Found a 7 line (41 tokens) duplication in the following files: 
Starting at line 98 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\AshmemMemoryChunkPoolTest.java
Starting at line 102 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\NativeMemoryChunkPoolTest.java
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\BufferMemoryChunkPoolTest.java

  public void testisReusable() {
    MemoryChunk chunk = mPool.get(1);
    Assert.assertTrue(mPool.isReusable(chunk));
    chunk.close();
    Assert.assertFalse(mPool.isReusable(chunk));
  }
}
=====================================================================
Found a 11 line (41 tokens) duplication in the following files: 
Starting at line 18 of C:\Users\anaca\Documents\Projetos\fresco\native-imagetranscoder\src\main\java\com\facebook\imagepipeline\nativecode\NativeJpegTranscoderSoLoader.java
Starting at line 16 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\main\java\com\facebook\imagepipeline\nativecode\StaticWebpNativeLoader.java

public class NativeJpegTranscoderSoLoader {
  private static boolean sInitialized;

  public static synchronized void ensure() {
    if (!sInitialized) {
      // On Android 4.1.2 the loading of the native-imagetranscoder native library can fail because
      // of the dependency with fb_jpegturbo. In this case we have to explicitely load that
      // library
      if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN) {
        try {
          NativeLoader.loadLibrary("fb_jpegturbo", SKIP_MERGED_JNI_ONLOAD);
=====================================================================
Found a 10 line (41 tokens) duplication in the following files: 
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\samples\comparison\src\main\java\com\facebook\samples\comparison\instrumentation\InstrumentedDraweeView.java
Starting at line 80 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\main\java\com\facebook\samples\scrollperf\instrumentation\InstrumentedDraweeView.java

  }

  @Override
  public void setImageURI(Uri uri, @Nullable Object callerContext) {
    SimpleDraweeControllerBuilder controllerBuilder =
        getControllerBuilder()
            .setUri(uri)
            .setCallerContext(callerContext)
            .setOldController(getController());
    if (controllerBuilder instanceof AbstractDraweeControllerBuilder) {
=====================================================================
Found a 6 line (41 tokens) duplication in the following files: 
Starting at line 340 of C:\Users\anaca\Documents\Projetos\fresco\samples\comparison\src\main\java\com\facebook\samples\comparison\MainActivity.java
Starting at line 42 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\main\java\com\facebook\samples\scrollperf\util\SizeUtil.java

  }

  public static int calcDesiredSize(Context context, int parentWidth, int parentHeight) {
    int orientation = context.getResources().getConfiguration().orientation;
    int desiredSize =
        (orientation == Configuration.ORIENTATION_LANDSCAPE) ? parentHeight / 2 : parentHeight / 3;
=====================================================================
Found a 12 line (41 tokens) duplication in the following files: 
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java
Starting at line 172 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java

        ImageRequestBuilder.newBuilderWithSource(mUri).setPostprocessor(postprocessor).build();

    final DraweeController draweeController =
        Fresco.newDraweeControllerBuilder()
            .setOldController(mDraweeMain.getController())
            .setImageRequest(imageRequest)
            .build();

    mDraweeMain.setController(draweeController);
  }

  private class SimplePostprocessorAdapter extends BaseAdapter {
=====================================================================
Found a 7 line (41 tokens) duplication in the following files: 
Starting at line 231 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\main\java\com\facebook\fresco\vito\core\impl\FrescoController2Impl.java
Starting at line 242 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\main\java\com\facebook\fresco\vito\core\impl\FrescoController2Impl.java

  public void releaseDelayed(final FrescoDrawableInterface drawable) {
    if (!(drawable instanceof FrescoDrawable2Impl)) {
      FLog.e(TAG, "Drawable not supported " + drawable);
      return;
    }
    FrescoDrawable2Impl frescoDrawable = (FrescoDrawable2Impl) drawable;
    frescoDrawable.getImagePerfListener().onScheduleReleaseDelayed(frescoDrawable);
=====================================================================
Found a 5 line (41 tokens) duplication in the following files: 
Starting at line 238 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\HierarcherImplTest.java
Starting at line 254 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\HierarcherImplTest.java

    final Drawable actual = mHierarcher.buildProgressDrawable(mResources, imageOptions);
    assertThat(actual).isInstanceOf(ScaleTypeDrawable.class);
    final ScaleTypeDrawable scaleTypeActual = (ScaleTypeDrawable) actual;
    assertThat(scaleTypeActual.getScaleType()).isEqualTo(ScalingUtils.ScaleType.FIT_CENTER);
    assertThat(scaleTypeActual.getCurrent()).isEqualTo(drawable);
=====================================================================
Found a 7 line (41 tokens) duplication in the following files: 
Starting at line 69 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\ImagePipelineUtilsImplTest.java
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\ImagePipelineUtilsImplTest.java
Starting at line 149 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\ImagePipelineUtilsImplTest.java

    final ImageOptions imageOptions = ImageOptions.create().build();

    ImageRequest imageRequest = mImagePipelineUtils.buildImageRequest(URI, imageOptions);

    assertThat(imageRequest).isNotNull();
    assertThat(imageRequest.getSourceUri()).isEqualTo(URI);
    assertThat(imageRequest.getImageDecodeOptions()).isEqualTo(ImageDecodeOptions.defaults());
=====================================================================
Found a 7 line (40 tokens) duplication in the following files: 
Starting at line 121 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

    mInOrder.verify(mConsumer).onNewResult(any(CloseableReference.class), eq(Consumer.NO_FLAGS));
    mInOrder.verifyNoMoreInteractions();

    assertEquals(1, mResults.size());
    CloseableReference<CloseableImage> res0 = mResults.get(0);
    assertTrue(CloseableReference.isValid(res0));
    assertSame(sourceCloseableAnimatedImage, res0.get());
=====================================================================
Found a 4 line (40 tokens) duplication in the following files: 
Starting at line 135 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 96 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedSingleUsePostprocessorProducerTest.java
Starting at line 239 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java
Starting at line 95 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

    mSourceBitmap = mock(Bitmap.class);
    mSourceCloseableStaticBitmap = mock(CloseableStaticBitmap.class);
    when(mSourceCloseableStaticBitmap.getUnderlyingBitmap()).thenReturn(mSourceBitmap);
    mSourceCloseableImageRef = CloseableReference.<CloseableImage>of(mSourceCloseableStaticBitmap);
=====================================================================
Found a 4 line (40 tokens) duplication in the following files: 
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 128 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedSingleUsePostprocessorProducerTest.java
Starting at line 476 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 255 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java
Starting at line 182 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

    mPostprocessorProducer.produceResults(mConsumer, mProducerContext);
    ArgumentCaptor<Consumer> consumerCaptor = ArgumentCaptor.forClass(Consumer.class);
    verify(mInputProducer).produceResults(consumerCaptor.capture(), eq(mProducerContext));
    return (RepeatedPostprocessorConsumer) consumerCaptor.getValue();
=====================================================================
Found a 7 line (40 tokens) duplication in the following files: 
Starting at line 93 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 123 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    setupBoundsAndRendererDimensions(
        boundsWidth, boundsHeight, backendIntrinsicWidth, backendIntrinsicHeight);

    mBitmapAnimationBackend.setBounds(mBounds);

    assertThat(mBitmapAnimationBackend.getIntrinsicWidth()).isEqualTo(boundsWidth);
    assertThat(mBitmapAnimationBackend.getIntrinsicHeight()).isEqualTo(boundsHeight);
=====================================================================
Found a 7 line (40 tokens) duplication in the following files: 
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 138 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    setupBoundsAndRendererDimensions(
        boundsWidth, boundsHeight, backendIntrinsicWidth, backendIntrinsicHeight);

    mBitmapAnimationBackend.setBounds(mBounds);

    assertThat(mBitmapAnimationBackend.getIntrinsicWidth()).isEqualTo(backendIntrinsicWidth);
    assertThat(mBitmapAnimationBackend.getIntrinsicHeight()).isEqualTo(boundsHeight);
=====================================================================
Found a 4 line (40 tokens) duplication in the following files: 
Starting at line 241 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 259 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    verify(mBitmapFrameCache).getCachedFrame(1);
    verify(mCanvas).drawBitmap(eq(mBitmap), eq(0f), eq(0f), any(Paint.class));
    verifyFramePreparationStrategyCalled(1);
    verifyListenersAndCacheNotified(1, BitmapAnimationBackend.FRAME_TYPE_CACHED);
=====================================================================
Found a 7 line (40 tokens) duplication in the following files: 
Starting at line 270 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 300 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    when(mBitmapFrameRenderer.renderFrame(anyInt(), any(Bitmap.class))).thenReturn(true);

    mBitmapAnimationBackend.drawFrame(mParentDrawable, mCanvas, 2);

    verify(mFrameListener).onDrawFrameStart(mBitmapAnimationBackend, 2);
    verify(mBitmapFrameCache).getCachedFrame(2);
    verify(mBitmapFrameCache).getBitmapToReuseForFrame(2, 0, 0);
=====================================================================
Found a 5 line (40 tokens) duplication in the following files: 
Starting at line 160 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 178 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java

  public void testCreateWithDecodeAlFramesUsingPointer() throws Exception {
    GifImage mockGifImage = mock(GifImage.class);

    Bitmap mockBitmap1 = MockBitmapFactory.create(50, 50, DEFAULT_BITMAP_CONFIG);
    Bitmap mockBitmap2 = MockBitmapFactory.create(50, 50, DEFAULT_BITMAP_CONFIG);
=====================================================================
Found a 5 line (40 tokens) duplication in the following files: 
Starting at line 160 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 178 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

  public void testCreateWithDecodeAlFramesUsingPointer() throws Exception {
    WebPImage mockWebPImage = mock(WebPImage.class);

    Bitmap mockBitmap1 = MockBitmapFactory.create(50, 50, DEFAULT_BITMAP_CONFIG);
    Bitmap mockBitmap2 = MockBitmapFactory.create(50, 50, DEFAULT_BITMAP_CONFIG);
=====================================================================
Found a 13 line (40 tokens) duplication in the following files: 
Starting at line 207 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 234 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 261 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 288 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 340 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java

    public static final ScaleType INSTANCE = new ScaleTypeFitStart();

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float scale = Math.min(scaleX, scaleY);
=====================================================================
Found a 7 line (40 tokens) duplication in the following files: 
Starting at line 222 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 276 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 303 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 355 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 389 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 425 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 453 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 481 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java

      outTransform.setScale(scale, scale);
      outTransform.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
    }

    @Override
    public String toString() {
      return "fit_start";
=====================================================================
Found a 4 line (40 tokens) duplication in the following files: 
Starting at line 257 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java
Starting at line 287 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java

    assertSame(draweeHierarchy2, mController.getHierarchy());
    inOrder.verify(draweeHierarchy1, times(1)).setControllerOverlay(null);
    inOrder.verify(draweeHierarchy1, times(0)).reset();
    inOrder.verify(draweeHierarchy2, times(1)).setControllerOverlay(controllerOverlay1);
=====================================================================
Found a 4 line (40 tokens) duplication in the following files: 
Starting at line 74 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 93 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 144 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 161 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 254 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 364 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java

    Assert.assertEquals(FadeDrawable.TRANSITION_NONE, mFadeDrawable.mTransitionState);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[2]);
=====================================================================
Found a 4 line (40 tokens) duplication in the following files: 
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 121 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 367 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java

    Assert.assertEquals(255, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[2]);
=====================================================================
Found a 4 line (40 tokens) duplication in the following files: 
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 388 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 406 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 376 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 394 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    mFadeDrawable.fadeUpToLayer(1);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
=====================================================================
Found a 6 line (40 tokens) duplication in the following files: 
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java
Starting at line 167 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java

  public void testFadeInAll() {
    SystemClock.setCurrentTimeMillis((long) (DURATION * 0.1));

    mFadeDrawable.fadeInAllLayers();
    mFadeDrawable.draw(mCanvas);
    verify(mOnFadeListener, times(1)).onFadeStarted();
=====================================================================
Found a 4 line (40 tokens) duplication in the following files: 
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 86 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 103 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 156 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 352 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(FadeDrawable.TRANSITION_NONE, mFadeDrawable.mTransitionState);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
=====================================================================
Found a 5 line (40 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\HashCodeUtil.java
Starting at line 47 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\HashCodeUtil.java
Starting at line 60 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\HashCodeUtil.java
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\HashCodeUtil.java

  public static int hashCode(@Nullable Object o1, @Nullable Object o2, @Nullable Object o3) {
    return hashCode(
        o1 == null ? 0 : o1.hashCode(),
        o2 == null ? 0 : o2.hashCode(),
        o3 == null ? 0 : o3.hashCode());
=====================================================================
Found a 8 line (40 tokens) duplication in the following files: 
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\AbstractDataSourceTest.java
Starting at line 180 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\AbstractDataSourceTest.java

    verifyState(mDataSource, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, value1, NOT_FAILED, null);
    // last result
    Value value = mock(Value.class);
    mDataSource.setResult(value, LAST);
    verifySubscribers(ON_NEW_RESULT);
    verifyState(mDataSource, NOT_CLOSED, FINISHED, WITH_RESULT, value, NOT_FAILED, null);
    // close
    mDataSource.close();
=====================================================================
Found a 6 line (40 tokens) duplication in the following files: 
Starting at line 406 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 439 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, mSrc3, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val3b, NOT_FAILED, null);

    Object val = mock(Object.class);
    setState(mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
    mInOrder.verify(mSrc3).close();
=====================================================================
Found a 23 line (40 tokens) duplication in the following files: 
Starting at line 166 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\decoder\DefaultImageDecoder.java
Starting at line 204 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\decoder\DefaultImageDecoder.java

              ImmutableQualityInfo.FULL_QUALITY,
              encodedImage.getRotationAngle(),
              encodedImage.getExifOrientation());

      closeableStaticBitmap.setImageExtra(
          "is_rounded",
          didApplyTransformation && options.bitmapTransformation instanceof CircularTransformation);

      return closeableStaticBitmap;
    } finally {
      bitmapReference.close();
    }
  }

  /**
   * Decodes a partial jpeg.
   *
   * @param encodedImage input image (encoded bytes plus meta data)
   * @param length amount of currently available data in bytes
   * @param qualityInfo quality info for the image
   * @return a CloseableStaticBitmap
   */
  public CloseableStaticBitmap decodeJpeg(
=====================================================================
Found a 6 line (40 tokens) duplication in the following files: 
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java
Starting at line 165 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java

      ImageRequest request, Object callerContext, String requestId, boolean isPrefetch) {
    final int numberOfListeners = mRequestListeners.size();
    for (int i = 0; i < numberOfListeners; ++i) {
      RequestListener listener = mRequestListeners.get(i);
      try {
        listener.onRequestStart(request, callerContext, requestId, isPrefetch);
=====================================================================
Found a 10 line (40 tokens) duplication in the following files: 
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducer.java
Starting at line 53 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapProbeProducer.java

    mInputProducer = inputProducer;
  }

  @Override
  public void produceResults(
      final Consumer<CloseableReference<CloseableImage>> consumer,
      final ProducerContext producerContext) {
    try {
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.beginSection("BitmapMemoryCacheProducer#produceResults");
=====================================================================
Found a 9 line (40 tokens) duplication in the following files: 
Starting at line 54 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducer.java
Starting at line 42 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PostprocessedBitmapMemoryCacheProducer.java

  }

  @Override
  public void produceResults(
      final Consumer<CloseableReference<CloseableImage>> consumer,
      final ProducerContext producerContext) {

    final ProducerListener2 listener = producerContext.getProducerListener();
    final ImageRequest imageRequest = producerContext.getImageRequest();
=====================================================================
Found a 18 line (40 tokens) duplication in the following files: 
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ProducerSequenceFactoryTest.java
Starting at line 388 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ProducerSequenceFactoryTest.java

        .thenReturn(imageTranscoder);

    mProducerSequenceFactory =
        new ProducerSequenceFactory(
            RuntimeEnvironment.application.getContentResolver(),
            producerFactory,
            mNetworkFetcher,
            true,
            false,
            mThreadHandoffProducerQueue,
            false,
            false,
            false,
            true,
            imageTranscoderFactory,
            false,
            false,
            false,
=====================================================================
Found a 6 line (40 tokens) duplication in the following files: 
Starting at line 160 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ListDataSourceTest.java
Starting at line 170 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ListDataSourceTest.java

  private void assertDataSourceFailed() {
    verify(mDataSubscriber).onFailure(mListDataSource);
    verifyNoMoreInteractions(mDataSubscriber);
    assertFalse(mListDataSource.hasResult());
    assertTrue(mListDataSource.hasFailed());
    assertTrue(mListDataSource.isFinished());
=====================================================================
Found a 9 line (40 tokens) duplication in the following files: 
Starting at line 117 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java
Starting at line 155 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java

    Assert.assertEquals(2, mStats.mFreeBytes);
    Assert.assertEquals(4, mStats.mUsedBytes);
    Assert.assertEquals(1, mStats.mFreeCount);
    Assert.assertEquals(1, mStats.mUsedCount);
  }

  // Get via alloc+trim
  @Test
  public void testGet_AllocAndTrim() throws Exception {
=====================================================================
Found a 7 line (40 tokens) duplication in the following files: 
Starting at line 443 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 268 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java
Starting at line 283 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java

  private void setupInputProducerFailure() {
    doAnswer(
            new Answer<Object>() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                Consumer consumer = (Consumer) invocation.getArguments()[0];
                consumer.onFailure(mException);
=====================================================================
Found a 7 line (40 tokens) duplication in the following files: 
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java
Starting at line 155 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

    mExecutor.runUntilIdle();

    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, false);
=====================================================================
Found a 6 line (40 tokens) duplication in the following files: 
Starting at line 115 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\NetworkFetchProducerTest.java
Starting at line 154 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\NetworkFetchProducerTest.java

  public void testNoIntermediateResults() throws Exception {
    long currentTime = 86400l;
    mNetworkFetchProducer.setSystemUptime(currentTime);
    NetworkFetcher.Callback callback = performFetch();

    when(mNetworkFetcher.shouldPropagate(any(FetchState.class))).thenReturn(false);
=====================================================================
Found a 7 line (40 tokens) duplication in the following files: 
Starting at line 693 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 896 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 970 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

        .onFailure(new PriorityNetworkFetcher.NonrecoverableException("HTTP 403"));

    assertThat(fetcher.getCurrentlyFetching()).isEmpty();
    assertThat(fetcher.getHiPriQueue()).isEmpty();
    assertThat(fetcher.getLowPriQueue()).isEmpty();

    assertThat(hipri1.requeueCount).isEqualTo(0);
=====================================================================
Found a 5 line (40 tokens) duplication in the following files: 
Starting at line 897 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 971 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 983 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    assertThat(fetcher.getCurrentlyFetching()).isEmpty();
    assertThat(fetcher.getHiPriQueue()).isEmpty();
    assertThat(fetcher.getLowPriQueue()).isEmpty();
    assertThat(fetcher.getDelayedQeueue()).containsExactly(hipri1);
    assertThat(fetcher.getExtraMap(hipri1, 123)).containsEntry("delay_count", "1");
=====================================================================
Found a 6 line (40 tokens) duplication in the following files: 
Starting at line 1230 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 1282 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    verify(callback).onResponse(isA(InputStream.class), anyInt());

    // After we're done with uri1, 'fetcher' moves on to uti2 (but not before).
    assertThat(delegateFetcher.callbacks).hasSize(4);
    assertThat(getLast(delegateFetcher.callbacks.keys()).getUri().toString()).isEqualTo("uri2");
  }
=====================================================================
Found a 5 line (40 tokens) duplication in the following files: 
Starting at line 46 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 46 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

@RunWith(RobolectricTestRunner.class)
@PrepareForTest({SystemClock.class})
@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "androidx.*", "android.*"})
@Config(manifest = Config.NONE)
public class AbstractAdaptiveCountingMemoryCacheTest {
=====================================================================
Found a 12 line (40 tokens) duplication in the following files: 
Starting at line 199 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 218 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 241 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 267 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 299 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  public void testToggleExclusive() {
    mCache =
        createDummyAdaptiveCountingMemoryCache(
            mParamsSupplier,
            mCacheTrimStrategy,
            mValueDescriptor,
            100,
            1,
            2,
            initialLFUCacheFractionPromil);
    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
=====================================================================
Found a 5 line (40 tokens) duplication in the following files: 
Starting at line 874 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 643 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 664 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);
    mCache.trim(memoryTrimType);
    assertSharedWithCount(KEYS[0], 100, 1);
    assertSharedWithCount(KEYS[1], 101, 1);
    assertSharedWithCount(KEYS[9], 109, 1);
=====================================================================
Found a 9 line (40 tokens) duplication in the following files: 
Starting at line 1639 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 714 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    assertEquals("access count mismatch", count, entry.accessCount);
    assertFalse("entry is an orphan", entry.isOrphan);
  }

  private void assertExclusivelyOwned(String key, Integer value) {
    assertTrue("key not found in the cache", mCache.mCachedEntries.contains(key));
    assertTrue(
        "key not found in the exclusives",
        mCache.mLeastFrequentlyUsedExclusiveEntries.contains(key)
=====================================================================
Found a 5 line (40 tokens) duplication in the following files: 
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 117 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java

    assertEquals(120, (Object) mCountingLruMap.get("key2"));
    assertEquals(3, mCountingLruMap.getCount());
    assertEquals(360, mCountingLruMap.getSizeInBytes());
    assertKeyOrder("key1", "key2", "key3");
    assertValueOrder(110, 120, 130);
=====================================================================
Found a 7 line (40 tokens) duplication in the following files: 
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 91 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java

    assertEquals(120, (Object) mCountingLruMap.get("key2"));
    assertEquals(3, mCountingLruMap.getCount());
    assertEquals(360, mCountingLruMap.getSizeInBytes());
    assertKeyOrder("key1", "key2", "key3");
    assertValueOrder(110, 120, 130);

    assertEquals(110, (Object) mCountingLruMap.get("key1"));
=====================================================================
Found a 5 line (40 tokens) duplication in the following files: 
Starting at line 91 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 123 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java

    assertEquals(110, (Object) mCountingLruMap.get("key1"));
    assertEquals(3, mCountingLruMap.getCount());
    assertEquals(360, mCountingLruMap.getSizeInBytes());
    assertKeyOrder("key1", "key2", "key3");
    assertValueOrder(110, 120, 130);
=====================================================================
Found a 5 line (40 tokens) duplication in the following files: 
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 129 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java

    assertEquals(null, (Object) mCountingLruMap.get("key4"));
    assertEquals(3, mCountingLruMap.getCount());
    assertEquals(360, mCountingLruMap.getSizeInBytes());
    assertKeyOrder("key1", "key2", "key3");
    assertValueOrder(110, 120, 130);
=====================================================================
Found a 7 line (40 tokens) duplication in the following files: 
Starting at line 30 of C:\Users\anaca\Documents\Projetos\fresco\samples\comparison\src\main\java\com\facebook\samples\comparison\adapters\AQueryAdapter.java
Starting at line 31 of C:\Users\anaca\Documents\Projetos\fresco\samples\comparison\src\main\java\com\facebook\samples\comparison\adapters\PicassoAdapter.java

    return new AQueryHolder(getContext(), mAQuery, parent, instrImageView, getPerfListener());
  }

  @Override
  public void shutDown() {
    for (int i = 0; i < getItemCount(); i++) {
      String uri = getItem(i);
=====================================================================
Found a 13 line (39 tokens) duplication in the following files: 
Starting at line 79 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 82 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java
Starting at line 79 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java

        new PostprocessorProducer(mInputProducer, mPlatformBitmapFactory, mTestExecutorService);
    mProducerContext =
        new SettableProducerContext(
            mImageRequest,
            mRequestId,
            mProducerListener,
            mock(Object.class),
            ImageRequest.RequestLevel.FULL_FETCH,
            false /* isPrefetch */,
            false /* isIntermediateResultExpected */,
            Priority.MEDIUM,
            mConfig);
    when(mImageRequest.getPostprocessor()).thenReturn(mPostprocessor);
=====================================================================
Found a 13 line (39 tokens) duplication in the following files: 
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\main\java\com\facebook\fresco\animation\drawable\AnimatedDrawable2.java
Starting at line 29 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\main\java\com\facebook\fresco\animation\drawable\AnimatedDrawable2DebugDrawListener.java

    void onDraw(
        AnimatedDrawable2 animatedDrawable,
        FrameScheduler frameScheduler,
        int frameNumberToDraw,
        boolean frameDrawn,
        boolean isAnimationRunning,
        long animationStartTimeMs,
        long animationTimeMs,
        long lastFrameAnimationTimeMs,
        long actualRenderTimeStartMs,
        long actualRenderTimeEndMs,
        long startRenderTimeForNextFrameMs,
        long scheduledRenderTimeForNextFrameMs);
=====================================================================
Found a 5 line (39 tokens) duplication in the following files: 
Starting at line 250 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 268 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 316 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    when(mBitmapFrameCache.getBitmapToReuseForFrame(anyInt(), anyInt(), anyInt()))
        .thenReturn(mBitmapRefererence);
    when(mBitmapFrameRenderer.renderFrame(anyInt(), any(Bitmap.class))).thenReturn(true);

    mBitmapAnimationBackend.drawFrame(mParentDrawable, mCanvas, 1);
=====================================================================
Found a 11 line (39 tokens) duplication in the following files: 
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedBitmapDrawable.java
Starting at line 25 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedNinePatchDrawable.java

      FrescoSystrace.beginSection("RoundedBitmapDrawable#draw");
    }
    if (!shouldRound()) {
      super.draw(canvas);
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.endSection();
      }
      return;
    }
    updateTransform();
    updatePath();
=====================================================================
Found a 13 line (39 tokens) duplication in the following files: 
Starting at line 181 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 315 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java

    public static final ScaleType INSTANCE = new ScaleTypeFitXY();

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float dx = parentRect.left;
=====================================================================
Found a 13 line (39 tokens) duplication in the following files: 
Starting at line 367 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 401 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 437 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 465 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java

    public static final ScaleType INSTANCE = new ScaleTypeCenterCrop();

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float scale, dx, dy;
=====================================================================
Found a 12 line (39 tokens) duplication in the following files: 
Starting at line 439 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float scale, dx, dy;
      scale = scaleX;
=====================================================================
Found a 12 line (39 tokens) duplication in the following files: 
Starting at line 467 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 22 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float scale, dx, dy;
      scale = scaleY;
=====================================================================
Found a 7 line (39 tokens) duplication in the following files: 
Starting at line 377 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 396 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 365 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 384 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    mFadeDrawable.reset();
    mFadeDrawable.fadeInLayer(1);
    mFadeDrawable.fadeOutLayer(0);
    mFadeDrawable.fadeOutAllLayers();
    mFadeDrawable.fadeToLayer(2);
    mFadeDrawable.fadeUpToLayer(1);
    mFadeDrawable.finishTransitionImmediately();
=====================================================================
Found a 9 line (39 tokens) duplication in the following files: 
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyBuilderTest.java
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyBuilderTest.java

    assertEquals(1.33f, builder.getDesiredAspectRatio(), 0);

    // test image setters without modifying scale type (default expected)
    builder.setPlaceholderImage(mPlaceholderDrawable1);
    builder.setRetryImage(mRetryDrawable1);
    builder.setFailureImage(mFailureDrawable1);
    builder.setProgressBarImage(mProgressBarDrawable1);
    assertEquals(mPlaceholderDrawable1, builder.getPlaceholderImage());
    assertEquals(ScaleType.CENTER_INSIDE, builder.getPlaceholderImageScaleType());
=====================================================================
Found a 5 line (39 tokens) duplication in the following files: 
Starting at line 198 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 221 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 231 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    GenericDraweeHierarchy dh = mBuilder.setBackground(mBackground).build();
    RootDrawable rootDrawable = (RootDrawable) dh.getTopLevelDrawable();
    FadeDrawable fadeDrawable = (FadeDrawable) rootDrawable.getCurrent();
    assertEquals(7, fadeDrawable.getNumberOfLayers());
    assertSame(mBackground, fadeDrawable.getDrawable(0));
=====================================================================
Found a 5 line (39 tokens) duplication in the following files: 
Starting at line 208 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 251 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 272 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    GenericDraweeHierarchy dh = mBuilder.setOverlays(Arrays.asList(mOverlay1, mOverlay2)).build();
    RootDrawable rootDrawable = (RootDrawable) dh.getTopLevelDrawable();
    FadeDrawable fadeDrawable = (FadeDrawable) rootDrawable.getCurrent();
    assertEquals(8, fadeDrawable.getNumberOfLayers());
    assertSame(mOverlay1, fadeDrawable.getDrawable(6));
=====================================================================
Found a 6 line (39 tokens) duplication in the following files: 
Starting at line 29 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java
Starting at line 48 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java

  public void testAspectRatio() {
    // width
    mSpec.width = makeMeasureSpec(410, UNSPECIFIED);
    mSpec.height = makeMeasureSpec(310, EXACTLY);
    LayoutParams layoutParams1 = new LayoutParams(WRAP_CONTENT, MATCH_PARENT);
    AspectRatioMeasure.updateMeasureSpec(mSpec, 1.5f, layoutParams1, 10, 10);
=====================================================================
Found a 5 line (39 tokens) duplication in the following files: 
Starting at line 31 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java
Starting at line 69 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java

    mSpec.width = makeMeasureSpec(410, UNSPECIFIED);
    mSpec.height = makeMeasureSpec(310, EXACTLY);
    LayoutParams layoutParams1 = new LayoutParams(WRAP_CONTENT, MATCH_PARENT);
    AspectRatioMeasure.updateMeasureSpec(mSpec, 1.5f, layoutParams1, 10, 10);
    assertEquals(makeMeasureSpec(460, EXACTLY), mSpec.width);
=====================================================================
Found a 6 line (39 tokens) duplication in the following files: 
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java

    assertEquals(makeMeasureSpec(460, EXACTLY), mSpec.width);
    assertEquals(makeMeasureSpec(310, EXACTLY), mSpec.height);

    // height
    mSpec.width = makeMeasureSpec(410, EXACTLY);
    mSpec.height = makeMeasureSpec(310, UNSPECIFIED);
=====================================================================
Found a 4 line (39 tokens) duplication in the following files: 
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java

    PowerMockito.when(Environment.getExternalStorageDirectory()).thenReturn(mMockFileExternal);
    when(mMockFileExternal.getAbsolutePath()).thenReturn(EXTERNAL_PATH);
    when(mMockFileExternal.exists()).thenReturn(true);
    PowerMockito.when(StatFsHelper.createStatFs(EXTERNAL_PATH)).thenReturn(mMockStatFsExternal);
=====================================================================
Found a 9 line (39 tokens) duplication in the following files: 
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\streams\LimitedInputStreamTest.java
Starting at line 123 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\streams\LimitedInputStreamTest.java

    final byte[] readBufferCopy = Arrays.copyOf(mReadBuffer, mReadBuffer.length);
    Arrays.fill(mReadBuffer, (byte) 0);
    mLimitedStream.reset();
    assertEquals(LIMITED_LENGTH, mLimitedStream.read(mReadBuffer));
    assertArrayEquals(readBufferCopy, mReadBuffer);
  }

  @Test
  public void testResetsMultipleTimes() throws Exception {
=====================================================================
Found a 5 line (39 tokens) duplication in the following files: 
Starting at line 267 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 362 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1, NOT_FAILED, null);

    testClose(dataSource, mSrc1, mSrc2);
    verifySubscriber(dataSource, null, ON_CANCELLATION);
    verifyState(dataSource, null, CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
=====================================================================
Found a 4 line (39 tokens) duplication in the following files: 
Starting at line 37 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 391 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    subscriber2.onFailure(mSrc2);
    mInOrder.verify(mSrc2).close();
    verifySubscriber(dataSource, mSrc2, NO_INTERACTIONS);
    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
=====================================================================
Found a 9 line (39 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 5 line (39 tokens) duplication in the following files: 
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java
Starting at line 153 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java
Starting at line 183 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java

      final ImageRequest.RequestLevel requestLevel) {
    return new Supplier<DataSource<CloseableReference<CloseableImage>>>() {
      @Override
      public DataSource<CloseableReference<CloseableImage>> get() {
        return fetchDecodedImage(imageRequest, callerContext, requestLevel);
=====================================================================
Found a 22 line (39 tokens) duplication in the following files: 
Starting at line 440 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java
Starting at line 568 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java

            Priority.MEDIUM,
            requestListener);
      } catch (Exception exception) {
        return DataSources.immediateFailedDataSource(exception);
      }
    } finally {
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.endSection();
      }
    }
  }

  /**
   * Submits a request for prefetching to the disk cache with a default priority.
   *
   * <p>Beware that if your network fetcher doesn't support priorities prefetch requests may slow
   * down images which are immediately required on screen.
   *
   * @param imageRequest the request to submit
   * @return a DataSource that can safely be ignored.
   */
  public DataSource<Void> prefetchToDiskCache(
=====================================================================
Found a 8 line (39 tokens) duplication in the following files: 
Starting at line 132 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapProbeProducer.java
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedProbeProducer.java

        if (isNotLast(status) || newResult == null || statusHasAnyFlag(status, IS_PARTIAL_RESULT)) {
          getConsumer().onNewResult(newResult, status);
          return;
        }

        final ImageRequest imageRequest = mProducerContext.getImageRequest();
        final CacheKey cacheKey =
            mCacheKeyFactory.getEncodedCacheKey(imageRequest, mProducerContext.getCallerContext());
=====================================================================
Found a 13 line (39 tokens) duplication in the following files: 
Starting at line 62 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalFetchProducer.java
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducer.java

            EncodedImage.closeSafely(result);
          }
        };

    producerContext.addCallbacks(
        new BaseProducerContextCallbacks() {
          @Override
          public void onCancellationRequested() {
            cancellableProducerRunnable.cancel();
          }
        });
    mExecutor.execute(cancellableProducerRunnable);
  }
=====================================================================
Found a 5 line (39 tokens) duplication in the following files: 
Starting at line 334 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 413 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 532 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

    Producer<CloseableReference<CloseableImage>> bitmapCacheSequence = mock(Producer.class);
    when(mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest))
        .thenReturn(bitmapCacheSequence);
    mImagePipeline.fetchImageFromBitmapCache(mImageRequest, mCallerContext);
    verify(mRequestListener1).onRequestStart(mImageRequest, mCallerContext, "0", false);
=====================================================================
Found a 3 line (39 tokens) duplication in the following files: 
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 159 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java

    when(ImageFormatChecker.getImageFormat_WrapIOException(any(InputStream.class)))
        .thenAnswer((Answer<ImageFormat>) i -> DefaultImageFormats.JPEG);
    when(JfifUtil.getAutoRotateAngleFromOrientation(orientation)).thenReturn(rotationAngle);
=====================================================================
Found a 5 line (39 tokens) duplication in the following files: 
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 334 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 241 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
=====================================================================
Found a 5 line (39 tokens) duplication in the following files: 
Starting at line 178 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 192 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java

    setupNetworkUri();
    Consumer<EncodedImage> consumer = produceResults();

    when(mJobScheduler.updateJob(mEncodedImage, Consumer.NO_FLAGS)).thenReturn(true);
    consumer.onNewResult(mEncodedImage, Consumer.NO_FLAGS);
=====================================================================
Found a 6 line (39 tokens) duplication in the following files: 
Starting at line 245 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java
Starting at line 190 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java
Starting at line 155 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

    mDiskCacheReadProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
    verify(mProducerListener, never())
=====================================================================
Found a 14 line (39 tokens) duplication in the following files: 
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 82 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 61 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java

        new LocalAssetFetchProducer(mExecutor, mPooledByteBufferFactory, mAssetManager);

    mProducerContext =
        new SettableProducerContext(
            mImageRequest,
            mRequestId,
            mProducerListener,
            mock(Object.class),
            ImageRequest.RequestLevel.FULL_FETCH,
            false,
            true,
            Priority.MEDIUM,
            mConfig);
    when(mImageRequest.getSourceUri()).thenReturn(Uri.parse("asset:///" + TEST_FILENAME));
=====================================================================
Found a 6 line (39 tokens) duplication in the following files: 
Starting at line 332 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 412 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

  public void testCancelChangesIsPrefetchIfNoMoreNonPrefetch() {
    mProducerContext1.setIsPrefetch(true);
    mProducerContext2.setIsPrefetch(false);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext1);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext2);
    assertFalse(mMultiplexedContext1.isPrefetch());
=====================================================================
Found a 6 line (39 tokens) duplication in the following files: 
Starting at line 357 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 401 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

  public void testCancelDoesNotChangeIsPrefetchOtherIfAlreadyPrefetch() {
    mProducerContext1.setIsPrefetch(true);
    mProducerContext2.setIsPrefetch(true);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext1);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext2);
    assertTrue(mMultiplexedContext1.isPrefetch());
=====================================================================
Found a 6 line (39 tokens) duplication in the following files: 
Starting at line 447 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 527 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

  public void testCancelChangesIsIntermediateResultExpectedIfNeeded() {
    mProducerContext1.setIsIntermediateResultExpected(true);
    mProducerContext2.setIsIntermediateResultExpected(false);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext1);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext2);
    assertTrue(mMultiplexedContext1.isIntermediateResultExpected());
=====================================================================
Found a 6 line (39 tokens) duplication in the following files: 
Starting at line 461 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 516 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

  public void testCancelDoesNotChangeIsIntermediateResultExpectedIfNotNeeded() {
    mProducerContext1.setIsIntermediateResultExpected(false);
    mProducerContext2.setIsIntermediateResultExpected(false);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext1);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext2);
    assertFalse(mMultiplexedContext1.isIntermediateResultExpected());
=====================================================================
Found a 6 line (39 tokens) duplication in the following files: 
Starting at line 587 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 620 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 631 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

    mProducerContext1.setPriority(Priority.MEDIUM);
    mProducerContext2.setPriority(Priority.HIGH);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext1);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext2);
    assertEquals(Priority.HIGH, mMultiplexedContext1.getPriority());
    mProducerContext1.cancel();
=====================================================================
Found a 5 line (39 tokens) duplication in the following files: 
Starting at line 384 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 420 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 427 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    cancel(one);
    assertThat(fetcher.getLowPriQueue()).contains(two);
    assertThat(fetcher.getCurrentlyFetching()).containsExactly(one);

    verify(callback, never()).onCancellation();
=====================================================================
Found a 5 line (39 tokens) duplication in the following files: 
Starting at line 643 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 651 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 715 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 814 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 824 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 905 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    PriorityFetchState<FetchState> hipri2 = fetch(fetcher, "hipri2", callback, true);

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
    assertThat(fetcher.getHiPriQueue()).containsExactly(hipri2);
    assertThat(fetcher.getLowPriQueue()).isEmpty();
=====================================================================
Found a 10 line (39 tokens) duplication in the following files: 
Starting at line 92 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ThumbnailBranchProducerTest.java
Starting at line 182 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ThumbnailBranchProducerTest.java

        mockEncodedImage(THUMBNAIL_WIDTHS[0] + 50, THUMBNAIL_HEIGHTS[0] + 50, 0), secondImage);

    mProducer.produceResults(mImageConsumer, mProducerContext);

    verify(mImageConsumer).onNewResult(secondImage, Consumer.IS_LAST);
    verifyZeroInteractions(mThumbnailProducers[2]);
  }

  @Test
  public void testFinalProducerUsedIfFirstTwoReturnNullOrFailure() {
=====================================================================
Found a 4 line (39 tokens) duplication in the following files: 
Starting at line 248 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\disk\DiskStorageCache.java
Starting at line 376 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\disk\DiskStorageCache.java
Starting at line 585 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\disk\DiskStorageCache.java
Starting at line 604 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\disk\DiskStorageCache.java

        BinaryResource resource = null;
        List<String> resourceIds = CacheKeyUtil.getResourceIds(key);
        for (int i = 0; i < resourceIds.size(); i++) {
          resourceId = resourceIds.get(i);
=====================================================================
Found a 4 line (39 tokens) duplication in the following files: 
Starting at line 293 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\disk\DiskStorageCache.java
Starting at line 586 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\disk\DiskStorageCache.java

        List<String> resourceIds = CacheKeyUtil.getResourceIds(key);
        for (int i = 0; i < resourceIds.size(); i++) {
          resourceId = resourceIds.get(i);
          if (mStorage.touch(resourceId, key)) {
=====================================================================
Found a 8 line (39 tokens) duplication in the following files: 
Starting at line 512 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1548 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

            100,
            1,
            2,
            initialLFUCacheFractionPromil);
    // value 5 cannot fit the cache
    CloseableReference<Integer> originalRef1 = newReference(10);
    CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);
    originalRef1.close();
=====================================================================
Found a 6 line (39 tokens) duplication in the following files: 
Starting at line 831 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 620 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    cachedRefs[4].close();
    cachedRefs[2].close();
    cachedRefs[7].close();
    cachedRefs[3].close();
    cachedRefs[6].close();
    cachedRefs[8].close();
=====================================================================
Found a 7 line (39 tokens) duplication in the following files: 
Starting at line 1160 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1252 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1416 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    valueRef2a.close();

    // insert item3 to LFU
    CloseableReference<Integer> originalRef3 = newReference(30);
    CloseableReference<Integer> valueRef3a = mCache.cache(KEYS[3], originalRef3);
    originalRef3.close();
    valueRef3a.close();
=====================================================================
Found a 7 line (39 tokens) duplication in the following files: 
Starting at line 1246 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1407 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    valueRef1a.close();

    // insert item2 to LFU
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2a = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
    valueRef2a.close();
=====================================================================
Found a 7 line (39 tokens) duplication in the following files: 
Starting at line 138 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 139 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 138 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 139 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 138 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 139 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java

        1, sb5.getCloseableReference().getUnderlyingReferenceTestOnly().getRefCountTestOnly());
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            32, new IntPair(0, 0),
            16, new IntPair(0, 0),
            8, new IntPair(1, 0),
=====================================================================
Found a 11 line (39 tokens) duplication in the following files: 
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\SimpleScaleTypeAdapter.java
Starting at line 142 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java

    return mEntries.get(position);
  }

  @Override
  public long getItemId(int position) {
    return position;
  }

  @Override
  public View getView(int position, View convertView, ViewGroup parent) {
    final LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
=====================================================================
Found a 7 line (39 tokens) duplication in the following files: 
Starting at line 73 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\webp\ImageFormatWebpFragment.java

    mSimpleDraweeView = view.findViewById(R.id.drawee_view);

    final SwitchCompat switchBackground = view.findViewById(R.id.switch_background);
    switchBackground.setOnCheckedChangeListener(
        new CompoundButton.OnCheckedChangeListener() {
          @Override
          public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
=====================================================================
Found a 11 line (39 tokens) duplication in the following files: 
Starting at line 214 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\pjpeg\ImageFormatProgressiveJpegFragment.java
Starting at line 193 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java

      return mSpinnerEntries[position];
    }

    @Override
    public long getItemId(int position) {
      return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
      final LayoutInflater layoutInflater = getLayoutInflater(null);
=====================================================================
Found a 7 line (39 tokens) duplication in the following files: 
Starting at line 231 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\main\java\com\facebook\fresco\vito\core\impl\FrescoController2Impl.java
Starting at line 242 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\main\java\com\facebook\fresco\vito\core\impl\FrescoController2Impl.java
Starting at line 253 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\main\java\com\facebook\fresco\vito\core\impl\FrescoController2Impl.java

  public void releaseDelayed(final FrescoDrawableInterface drawable) {
    if (!(drawable instanceof FrescoDrawable2Impl)) {
      FLog.e(TAG, "Drawable not supported " + drawable);
      return;
    }
    FrescoDrawable2Impl frescoDrawable = (FrescoDrawable2Impl) drawable;
    frescoDrawable.getImagePerfListener().onScheduleReleaseDelayed(frescoDrawable);
=====================================================================
Found a 9 line (39 tokens) duplication in the following files: 
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\FrescoDrawable2ImplTest.java
Starting at line 98 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\FrescoDrawable2ImplTest.java

    mFrescoDrawable.close();

    Assert.assertNull(mFrescoDrawable.mImageReference);
    Assert.assertTrue(mCloseableImage.isClosed());
    Assert.assertTrue(mLatch.await(3, TimeUnit.SECONDS));
  }

  @Test
  public void testFrescoDrawable_whenNewImageDrawableSet_thenReleaseOldImageReference()
=====================================================================
Found a 3 line (38 tokens) duplication in the following files: 
Starting at line 63 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\animated\util\AnimatedDrawableUtilTest.java
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\animated\util\AnimatedDrawableUtilTest.java

    assertFalse(AnimatedDrawableUtil.isOutsideRange(start, end, 3));
    assertFalse(AnimatedDrawableUtil.isOutsideRange(start, end, 4));
    assertFalse(AnimatedDrawableUtil.isOutsideRange(start, end, 5));
=====================================================================
Found a 8 line (38 tokens) duplication in the following files: 
Starting at line 217 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\main\java\com\facebook\animated\gif\GifImage.java
Starting at line 173 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\main\java\com\facebook\animated\webp\WebPImage.java

    GifFrame frame = getFrame(frameNumber);
    try {
      return new AnimatedDrawableFrameInfo(
          frameNumber,
          frame.getXOffset(),
          frame.getYOffset(),
          frame.getWidth(),
          frame.getHeight(),
=====================================================================
Found a 7 line (38 tokens) duplication in the following files: 
Starting at line 232 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 278 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

        ImageDecodeOptions.newBuilder().setDecodePreviewFrame(true).build();
    EncodedImage encodedImage =
        new EncodedImage(CloseableReference.of(byteBuffer, FAKE_RESOURCE_RELEASER));
    encodedImage.setImageFormat(ImageFormat.UNKNOWN);
    CloseableAnimatedImage closeableImage =
        (CloseableAnimatedImage)
            mAnimatedImageFactory.decodeGif(
=====================================================================
Found a 10 line (38 tokens) duplication in the following files: 
Starting at line 278 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 233 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

            .setDecodeAllFrames(true)
            .build();

    EncodedImage encodedImage =
        new EncodedImage(CloseableReference.of(byteBuffer, FAKE_RESOURCE_RELEASER));
    encodedImage.setImageFormat(ImageFormat.UNKNOWN);

    CloseableAnimatedImage closeableImage =
        (CloseableAnimatedImage)
            mAnimatedImageFactory.decodeGif(
=====================================================================
Found a 13 line (38 tokens) duplication in the following files: 
Starting at line 179 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif-lite\src\main\java\com\facebook\animated\giflite\drawable\GifAnimationBackend.java
Starting at line 158 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\main\java\com\facebook\animated\webpdrawable\WebpAnimationBackend.java

  }

  private static void closeSilently(@Nullable Closeable closeable) {
    if (closeable == null) {
      return;
    }
    try {
      closeable.close();
    } catch (IOException ignored) {
      // ignore
    }
  }
}
=====================================================================
Found a 4 line (38 tokens) duplication in the following files: 
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 367 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 388 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 406 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 376 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 394 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(255, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[2]);
=====================================================================
Found a 5 line (38 tokens) duplication in the following files: 
Starting at line 91 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 84 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 98 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
=====================================================================
Found a 4 line (38 tokens) duplication in the following files: 
Starting at line 188 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 214 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 303 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 386 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 404 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 183 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 209 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 289 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 374 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 392 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(fadeUpToLayer ? 255 : 0, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(FadeDrawable.TRANSITION_NONE, mFadeDrawable.mTransitionState);
=====================================================================
Found a 4 line (38 tokens) duplication in the following files: 
Starting at line 387 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 405 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 69 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 354 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 375 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 393 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
=====================================================================
Found a 8 line (38 tokens) duplication in the following files: 
Starting at line 71 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java
Starting at line 211 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java

    verify(mOnFadeListener, never()).onFadeFinished();

    SystemClock.setCurrentTimeMillis((long) (DURATION * 1.5));
    mFadeDrawable.draw(mCanvas);
    verify(mOnFadeListener, times(1)).onFadeFinished();

    verifyNoMoreInteractions(mOnFadeListener);
  }
=====================================================================
Found a 4 line (38 tokens) duplication in the following files: 
Starting at line 659 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 667 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertNotSame(mActualImage1, settableDrawable.getCurrent());
    assertEquals(RoundedBitmapDrawable.class, settableDrawable.getCurrent().getClass());
    assertEquals(true, fadeDrawable.isLayerOn(imageIndex));
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
=====================================================================
Found a 4 line (38 tokens) duplication in the following files: 
Starting at line 55 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java

  public void testTouchEvent_Handled() {
    MotionEvent event = mock(MotionEvent.class);
    when(mHolder1.onTouchEvent(event)).thenReturn(false);
    when(mHolder2.onTouchEvent(event)).thenReturn(true);
=====================================================================
Found a 10 line (38 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\main\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfRequestListener.java
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\main\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfRequestListener.java

  public void onRequestSuccess(ImageRequest request, String requestId, boolean isPrefetch) {
    mImagePerfState.setImageRequestEndTimeMs(mClock.now());

    mImagePerfState.setImageRequest(request);
    mImagePerfState.setRequestId(requestId);
    mImagePerfState.setPrefetch(isPrefetch);
  }

  @Override
  public void onRequestFailure(
=====================================================================
Found a 7 line (38 tokens) duplication in the following files: 
Starting at line 37 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\references\SharedReferenceTest.java
Starting at line 44 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\references\SharedReferenceTest.java

    Assert.assertEquals(2, tRef.getRefCountTestOnly());
    Assert.assertEquals(t, tRef.get());
    Assert.assertEquals("abc", t.get());

    // deleting a reference drops the reference count
    tRef.deleteReference();
    Assert.assertTrue(SharedReference.isValid(tRef));
=====================================================================
Found a 7 line (38 tokens) duplication in the following files: 
Starting at line 106 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java

    expectInternalSetup();
    // Configure external storage to be absent.
    PowerMockito.when(Environment.getExternalStorageDirectory()).thenReturn(null);
    StatFsHelper statFsHelper = new StatFsHelper();

    long freeBytes = statFsHelper.getAvailableStorageSpace(StatFsHelper.StorageType.INTERNAL);
    assertEquals(INTERNAL_BLOCK_SIZE * INTERNAL_BLOCKS_FREE, freeBytes);
=====================================================================
Found a 5 line (38 tokens) duplication in the following files: 
Starting at line 38 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 34 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 65 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);

    setState(mSrc2, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, mock(Throwable.class));
    subscriber2.onFailure(mSrc2);
    mInOrder.verify(mSrc2).close();
=====================================================================
Found a 6 line (38 tokens) duplication in the following files: 
Starting at line 166 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 299 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribe(mDataSourceSupplier1, mSrc1);

    Object val = mock(Object.class);
    setState(mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
    verifySubscriber(dataSource, mSrc1, ON_NEW_RESULT);
=====================================================================
Found a 6 line (38 tokens) duplication in the following files: 
Starting at line 297 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 364 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    testClose(dataSource, mSrc1);
    verifySubscriber(dataSource, null, ON_CANCELLATION);
    verifyState(dataSource, null, CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);

    Object val = mock(Object.class);
    setState(mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);
=====================================================================
Found a 6 line (38 tokens) duplication in the following files: 
Starting at line 176 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 228 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    setState(mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1b, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
    verifySubscriber(dataSource, mSrc1, NO_INTERACTIONS);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);

    Object val1c = mock(Object.class);
=====================================================================
Found a 10 line (38 tokens) duplication in the following files: 
Starting at line 118 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducer.java
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapProbeProducer.java
Starting at line 72 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedProbeProducer.java

      mInputProducer.produceResults(wrappedConsumer, producerContext);
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.endSection();
      }
    } finally {
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.endSection();
      }
    }
  }
=====================================================================
Found a 4 line (38 tokens) duplication in the following files: 
Starting at line 294 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 312 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 396 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

    Producer<CloseableReference<CloseableImage>> decodedSequence = mock(Producer.class);
    when(mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest))
        .thenReturn(decodedSequence);
    DataSource<CloseableReference<CloseableImage>> dataSource =
=====================================================================
Found a 10 line (38 tokens) duplication in the following files: 
Starting at line 355 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\CloseableProducerToDataSourceAdapterTest.java
Starting at line 323 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

    mInternalConsumer.onNewResult(mResultRef1, Consumer.NO_FLAGS);
    verifyFailed(null, mException);
    testSubscribe(ON_FAILURE);
    testClose(mException);
  }

  @Test
  public void test_F_L_a_C() {
    testFailure(null, 1);
    mInternalConsumer.onNewResult(mResultRef1, Consumer.IS_LAST);
=====================================================================
Found a 8 line (38 tokens) duplication in the following files: 
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 261 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, false);
    verifyNoMoreInteractions(mInputProducer);
  }

  private void setupBitmapCacheGetSuccess() {
=====================================================================
Found a 7 line (38 tokens) duplication in the following files: 
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PostprocessedBitmapMemoryCacheProducerTest.java

  @Mock public MemoryCache<CacheKey, CloseableImage> mMemoryCache;
  @Mock public CacheKeyFactory mCacheKeyFactory;
  @Mock public Producer mInputProducer;
  @Mock public Consumer mConsumer;
  @Mock public ProducerContext mProducerContext;
  @Mock public ImageRequest mImageRequest;
  @Mock public ProducerListener2 mProducerListener;
=====================================================================
Found a 7 line (38 tokens) duplication in the following files: 
Starting at line 335 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 393 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java

            eq(mProducerContext), eq(DecodeProducer.PRODUCER_NAME), nullable(Map.class));
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testDecode_Intermediate_pJPEG() throws Exception {
=====================================================================
Found a 4 line (38 tokens) duplication in the following files: 
Starting at line 197 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 177 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 113 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java
Starting at line 117 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java
Starting at line 132 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java

    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener).onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, true);
=====================================================================
Found a 7 line (38 tokens) duplication in the following files: 
Starting at line 302 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SwallowResultProducerTest.java

    doAnswer(new ProduceResultsFailureAnswer())
        .when(mInputProducer)
        .produceResults(any(Consumer.class), eq(mProducerContext));
  }

  private static class ProduceResultsNewResultAnswer implements Answer<Void> {
    private final List<EncodedImage> mResults;
=====================================================================
Found a 8 line (38 tokens) duplication in the following files: 
Starting at line 141 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 164 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 176 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 223 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java

    assertEquals(Consumer.NO_FLAGS, mJobScheduler.mStatus);
    assertEquals(0, mTestScheduledExecutorService.getPendingCount());
    assertEquals(0, mTestExecutorService.getPendingCount());
    assertEquals(0, mTestJobRunnable.jobs.size());
  }

  @Test
  public void testUpdate_Intermediate_Invalid() {
=====================================================================
Found a 6 line (38 tokens) duplication in the following files: 
Starting at line 88 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java
Starting at line 100 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java

    mLocalContentUriFetchProducer.produceResults(mConsumer, mProducerContext);
    mProducerContext.cancel();
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithCancellation(mProducerContext, PRODUCER_NAME, null);
    verify(mConsumer).onCancellation();
=====================================================================
Found a 8 line (38 tokens) duplication in the following files: 
Starting at line 111 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PostprocessedBitmapMemoryCacheProducerTest.java
Starting at line 119 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PostprocessedBitmapMemoryCacheProducerTest.java

    when(mImageRequest.getPostprocessor()).thenReturn(null);
    mMemoryCacheProducer.produceResults(mConsumer, mProducerContext);
    verify(mInputProducer).produceResults(mConsumer, mProducerContext);
    verifyNoMoreInteractions(mConsumer, mProducerListener);
  }

  @Test
  public void testNoPostProcessorCaching() {
=====================================================================
Found a 8 line (38 tokens) duplication in the following files: 
Starting at line 635 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 707 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 776 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

  public void testInfiniteRequeues_requeueOnFail() {
    RecordingNetworkFetcher recordingNetworkFetcher = new RecordingNetworkFetcher();

    // Max hi-pri: 1, max low-pri: 0
    PriorityNetworkFetcher<FetchState> fetcher =
        newFetcher(recordingNetworkFetcher, false, 1, 0, true, INFINITE_REQUEUE, false, false);

    PriorityFetchState<FetchState> hipri1 = fetch(fetcher, "hipri1", callback, true);
=====================================================================
Found a 5 line (38 tokens) duplication in the following files: 
Starting at line 685 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 876 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 884 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 950 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 958 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    PriorityFetchState<FetchState> hipri1 = fetch(fetcher, "hipri1", callback, true);

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
    assertThat(fetcher.getHiPriQueue()).isEmpty();
    assertThat(fetcher.getLowPriQueue()).isEmpty();
=====================================================================
Found a 6 line (38 tokens) duplication in the following files: 
Starting at line 834 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 979 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    assertThat(hipri1.requeueCount).isEqualTo(2);

    // we will start fetching hipri2 immediately.
    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri2);
    assertThat(fetcher.getHiPriQueue()).isEmpty();
    assertThat(fetcher.getLowPriQueue()).isEmpty();
=====================================================================
Found a 8 line (38 tokens) duplication in the following files: 
Starting at line 98 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, mSuccessMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
    verify(mResult).close();
  }

  @Test
  public void testOnSuccess_noExtraMap() throws IOException {
=====================================================================
Found a 5 line (38 tokens) duplication in the following files: 
Starting at line 139 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DefaultDiskStorageTest.java
Starting at line 163 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DefaultDiskStorageTest.java

  public void testStoreFile() throws Exception {
    DefaultDiskStorage storage = getStorageSupplier(1).get();
    final String resourceId1 = "resource1";
    final byte[] value1 = new byte[100];
    value1[80] = 101;
=====================================================================
Found a 5 line (38 tokens) duplication in the following files: 
Starting at line 612 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 712 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1094 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1207 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1490 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1558 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    valueRef1.close();
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
    valueRef2.close();
=====================================================================
Found a 5 line (38 tokens) duplication in the following files: 
Starting at line 616 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1498 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1566 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    valueRef2.close();
    CloseableReference<Integer> originalRef3 = newReference(30);
    CloseableReference<Integer> valueRef3 = mCache.cache(KEYS[3], originalRef3);
    originalRef3.close();
    valueRef3.close();
=====================================================================
Found a 7 line (38 tokens) duplication in the following files: 
Starting at line 1154 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1407 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    assertMFUExclusivelyOwned(KEYS[1], 10);

    // insert item2 to LFU
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2a = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
    valueRef2a.close();
=====================================================================
Found a 7 line (38 tokens) duplication in the following files: 
Starting at line 1160 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1252 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1352 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    valueRef2a.close();

    // insert item3 to LFU
    CloseableReference<Integer> originalRef3 = newReference(30);
    CloseableReference<Integer> valueRef3a = mCache.cache(KEYS[3], originalRef3);
    originalRef3.close();
    valueRef3a.close();
=====================================================================
Found a 7 line (38 tokens) duplication in the following files: 
Starting at line 1170 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1361 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1427 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    assertLFUExclusivelyOwned(KEYS[3], 30);

    // insert item4 to LFU, the cache should evict item2
    CloseableReference<Integer> originalRef4 = newReference(40);
    CloseableReference<Integer> valueRef4a = mCache.cache(KEYS[4], originalRef4);
    originalRef4.close();
    valueRef4a.close();
=====================================================================
Found a 7 line (38 tokens) duplication in the following files: 
Starting at line 1246 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1344 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    valueRef1a.close();

    // insert item2 to LFU
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2a = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
    valueRef2a.close();
=====================================================================
Found a 5 line (38 tokens) duplication in the following files: 
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 91 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 103 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 117 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 123 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 129 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 135 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java

    assertEquals(120, (Object) mCountingLruMap.get("key2"));
    assertEquals(3, mCountingLruMap.getCount());
    assertEquals(360, mCountingLruMap.getSizeInBytes());
    assertKeyOrder("key1", "key2", "key3");
    assertValueOrder(110, 120, 130);
=====================================================================
Found a 5 line (38 tokens) duplication in the following files: 
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 174 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 191 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 214 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

  public void testToggleExclusive() {
    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
    cachedRef.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
=====================================================================
Found a 5 line (38 tokens) duplication in the following files: 
Starting at line 626 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 644 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    cachedRefs[5].close();
    assertSharedWithCount(KEYS[0], 100, 1);
    assertSharedWithCount(KEYS[1], 101, 1);
    assertSharedWithCount(KEYS[9], 109, 1);
    assertExclusivelyOwned(KEYS[8], 108);
=====================================================================
Found a 5 line (38 tokens) duplication in the following files: 
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePrefetchFragment.java
Starting at line 47 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\PartialRequestFragment.java

    final Button clearCacheButton = (Button) view.findViewById(R.id.clear_cache);
    clearCacheButton.setOnClickListener(
        new View.OnClickListener() {
          @Override
          public void onClick(View v) {
=====================================================================
Found a 6 line (37 tokens) duplication in the following files: 
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\main\java\com\facebook\fresco\animation\factory\DefaultBitmapAnimationDrawableFactory.java
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\main\java\com\facebook\fresco\animation\factory\DefaultBitmapAnimationDrawableFactory.java

    CloseableAnimatedImage closeable = ((CloseableAnimatedImage) image);
    AnimatedImage animatedImage = closeable.getImage();
    AnimationBackend animationBackend =
        createAnimationBackend(
            Preconditions.checkNotNull(closeable.getImageResult()),
            animatedImage != null ? animatedImage.getAnimatedBitmapConfig() : null,
=====================================================================
Found a 9 line (37 tokens) duplication in the following files: 
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\fresco\animation\bitmap\cache\FrescoFrameCacheTest.java
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\fresco\animation\bitmap\cache\FrescoFrameCacheTest.java

    when(mCloseableStaticBitmap.cloneUnderlyingBitmapReference()).thenReturn(null);

    CloseableReference<Bitmap> extractedReference =
        FrescoFrameCache.convertToBitmapReferenceAndClose(mImageReference);

    // We only detach the reference and do not care if the bitmap is valid
    assertThat(extractedReference).isNull();
    verify(mImageReference).close();
  }
=====================================================================
Found a 8 line (37 tokens) duplication in the following files: 
Starting at line 44 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedSingleUsePostprocessorProducerTest.java

public class AnimatedRepeatedPostprocessorProducerTest {

  private static final String POSTPROCESSOR_NAME = "postprocessor_name";
  private static final Map<String, String> mExtraMap =
      ImmutableMap.of(PostprocessorProducer.POSTPROCESSOR, POSTPROCESSOR_NAME);

  @Mock public PlatformBitmapFactory mPlatformBitmapFactory;
  @Mock public ProducerListener2 mProducerListener;
=====================================================================
Found a 9 line (37 tokens) duplication in the following files: 
Starting at line 88 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 148 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

  public void testSetBoundsUpdatesIntrinsicDimensionsWhenBackendDimensionsUnset() {
    int boundsWidth = 160;
    int boundsHeight = 90;
    int backendIntrinsicWidth = AnimationBackend.INTRINSIC_DIMENSION_UNSET;
    int backendIntrinsicHeight = AnimationBackend.INTRINSIC_DIMENSION_UNSET;
    setupBoundsAndRendererDimensions(
        boundsWidth, boundsHeight, backendIntrinsicWidth, backendIntrinsicHeight);

    mBitmapAnimationBackend.setBounds(mBounds);
=====================================================================
Found a 10 line (37 tokens) duplication in the following files: 
Starting at line 89 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 89 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

    mGifImageMock = mock(GifImage.class);

    mMockAnimatedDrawableBackendProvider = mock(AnimatedDrawableBackendProvider.class);
    mMockBitmapFactory = mock(PlatformBitmapFactory.class);

    mAnimatedImageFactory =
        new AnimatedImageFactoryImpl(
            mMockAnimatedDrawableBackendProvider, mMockBitmapFactory, false);

    ((AnimatedImageFactoryImpl) mAnimatedImageFactory).sGifAnimatedImageDecoder = mGifImageMock;
=====================================================================
Found a 8 line (37 tokens) duplication in the following files: 
Starting at line 161 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 161 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

    GifImage mockGifImage = mock(GifImage.class);

    Bitmap mockBitmap1 = MockBitmapFactory.create(50, 50, DEFAULT_BITMAP_CONFIG);
    Bitmap mockBitmap2 = MockBitmapFactory.create(50, 50, DEFAULT_BITMAP_CONFIG);

    // Expect a call to GifImage.createFromByteBuffer
    TrivialPooledByteBuffer byteBuffer = createByteBuffer();
    when(mGifImageMock.decodeFromNativeMemory(
=====================================================================
Found a 8 line (37 tokens) duplication in the following files: 
Starting at line 179 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 179 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

    GifImage mockGifImage = mock(GifImage.class);

    Bitmap mockBitmap1 = MockBitmapFactory.create(50, 50, DEFAULT_BITMAP_CONFIG);
    Bitmap mockBitmap2 = MockBitmapFactory.create(50, 50, DEFAULT_BITMAP_CONFIG);

    // Expect a call to GifImage.createFromByteBuffer
    TrivialBufferPooledByteBuffer byteBuffer = createDirectByteBuffer();
    when(mGifImageMock.decodeFromByteBuffer(
=====================================================================
Found a 10 line (37 tokens) duplication in the following files: 
Starting at line 207 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 207 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

    assertSame(mockGifImage, imageResult.getImage());
    assertNull(imageResult.getPreviewBitmap());
    assertFalse(imageResult.hasDecodedFrame(0));

    // Should not have interacted with these.
    verifyZeroInteractions(mMockAnimatedDrawableBackendProvider);
    verifyZeroInteractions(mMockBitmapFactory);
  }

  private void testCreateWithPreviewBitmap(
=====================================================================
Found a 10 line (37 tokens) duplication in the following files: 
Starting at line 346 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 282 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ForwardingDrawable.java

  }

  @Override
  public void getRootBounds(RectF bounds) {
    if (mTransformCallback != null) {
      mTransformCallback.getRootBounds(bounds);
    } else {
      bounds.set(getBounds());
    }
  }
=====================================================================
Found a 6 line (37 tokens) duplication in the following files: 
Starting at line 337 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedColorDrawable.java
Starting at line 319 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedDrawable.java

      mPath.addCircle(mTempRect.centerX(), mTempRect.centerY(), radius, Path.Direction.CW);
    } else if (mScaleDownInsideBorders) {
      if (mInsideBorderRadii == null) {
        mInsideBorderRadii = new float[8];
      }
      for (int i = 0; i < mInsideBorderRadii.length; i++) {
=====================================================================
Found a 11 line (37 tokens) duplication in the following files: 
Starting at line 369 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 403 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 22 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float scale, dx, dy;
=====================================================================
Found a 4 line (37 tokens) duplication in the following files: 
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\gestures\GestureDetector.java
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\gestures\GestureDetector.java

        if (Math.abs(event.getX() - mActionDownX) > mSingleTapSlopPx
            || Math.abs(event.getY() - mActionDownY) > mSingleTapSlopPx) {
          mIsClickCandidate = false;
        }
=====================================================================
Found a 7 line (37 tokens) duplication in the following files: 
Starting at line 115 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\DrawableTestUtils.java
Starting at line 173 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\DrawableTestUtils.java

        .setCallback(any(Drawable.Callback.class));
    doAnswer(
            new Answer() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                if (callback.get() != null) {
                  callback.get().invalidateDrawable(drawable);
=====================================================================
Found a 5 line (37 tokens) duplication in the following files: 
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 181 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 198 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 221 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 231 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

            .setActualImageFocusPoint(mFocusPoint)
            .build();
    RootDrawable rootDrawable = (RootDrawable) dh.getTopLevelDrawable();
    FadeDrawable fadeDrawable = (FadeDrawable) rootDrawable.getCurrent();
    assertEquals(7, fadeDrawable.getNumberOfLayers());
=====================================================================
Found a 8 line (37 tokens) duplication in the following files: 
Starting at line 843 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 864 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

            .setActualImageScaleType(ScaleType.FOCUS_CROP)
            .build();

    // actual image index in DH tree
    final int imageIndex = 2;

    FadeDrawable fadeDrawable = (FadeDrawable) dh.getTopLevelDrawable().getCurrent();
    ScaleTypeDrawable scaleTypeDrawable = (ScaleTypeDrawable) fadeDrawable.getDrawable(imageIndex);
=====================================================================
Found a 6 line (37 tokens) duplication in the following files: 
Starting at line 54 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java

    assertEquals(makeMeasureSpec(410, UNSPECIFIED), mSpec.width);
    assertEquals(makeMeasureSpec(310, EXACTLY), mSpec.height);

    // height
    mSpec.width = makeMeasureSpec(410, EXACTLY);
    mSpec.height = makeMeasureSpec(310, UNSPECIFIED);
=====================================================================
Found a 6 line (37 tokens) duplication in the following files: 
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java

    assertEquals(makeMeasureSpec(460, EXACTLY), mSpec.width);
    assertEquals(makeMeasureSpec(310, EXACTLY), mSpec.height);

    // height exceeded
    mSpec.width = makeMeasureSpec(410, EXACTLY);
    mSpec.height = makeMeasureSpec(110, AT_MOST);
=====================================================================
Found a 7 line (37 tokens) duplication in the following files: 
Starting at line 89 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java
Starting at line 169 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java
Starting at line 190 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java
Starting at line 212 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\statfs\StatFsHelperTest.java

    StatFsHelper statFsHelper = new StatFsHelper();

    long freeBytes = statFsHelper.getAvailableStorageSpace(StatFsHelper.StorageType.INTERNAL);
    assertEquals(INTERNAL_BLOCK_SIZE * INTERNAL_BLOCKS_FREE, freeBytes);

    freeBytes = statFsHelper.getAvailableStorageSpace(StatFsHelper.StorageType.EXTERNAL);
    assertEquals(EXTERNAL_BLOCK_SIZE * EXTERNAL_BLOCKS_FREE, freeBytes);
=====================================================================
Found a 4 line (37 tokens) duplication in the following files: 
Starting at line 164 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 176 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    setState(mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1a, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
    verifySubscriber(dataSource, mSrc1, NO_INTERACTIONS);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);
=====================================================================
Found a 18 line (37 tokens) duplication in the following files: 
Starting at line 56 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 113 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 170 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java

            BetterImageSpan.ALIGN_CENTER,
            new Rect(
                10, // margin left
                0, // margin top
                0, // margin right
                0 // margin bottom
                ),
            10, // drawableHeight
            -20, // fontAscent
            10, // fontDescent
            -20, // expectedAscent
            10, // expectedDescent
            -25, // fontTop
            15, // fontBottom
            -25, // expectedTop
            15 // expectedBottom
          },
          {
=====================================================================
Found a 18 line (37 tokens) duplication in the following files: 
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 132 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 189 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java

            BetterImageSpan.ALIGN_CENTER,
            new Rect(
                0, // margin left
                0, // margin top
                10, // margin right
                0 // margin bottom
                ),
            10, // drawableHeight
            -20, // fontAscent
            10, // fontDescent
            -20, // expectedAscent
            10, // expectedDescent
            -25, // fontTop
            15, // fontBottom
            -25, // expectedTop
            15 // expectedBottom
          },
          {
=====================================================================
Found a 18 line (37 tokens) duplication in the following files: 
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 208 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java

            BetterImageSpan.ALIGN_CENTER,
            new Rect(
                5, // margin left
                0, // margin top
                5, // margin right
                0 // margin bottom
                ),
            10, // drawableHeight
            -20, // fontAscent
            10, // fontDescent
            -20, // expectedAscent
            10, // expectedDescent
            -25, // fontTop
            15, // fontBottom
            -25, // expectedTop
            15 // expectedBottom
          },
          {
=====================================================================
Found a 18 line (37 tokens) duplication in the following files: 
Starting at line 400 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 457 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 514 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java

            BetterImageSpan.ALIGN_CENTER,
            new Rect(
                0, // margin left
                10, // margin top
                0, // margin right
                0 // margin bottom
                ),
            10, // drawableHeight
            -20, // fontAscent
            10, // fontDescent
            -20, // expectedAscent
            10, // expectedDescent
            -25, // fontTop
            15, // fontBottom
            -25, // expectedTop
            15 // expectedBottom
          },
          {
=====================================================================
Found a 18 line (37 tokens) duplication in the following files: 
Starting at line 419 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 476 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 533 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java

            BetterImageSpan.ALIGN_CENTER,
            new Rect(
                0, // margin left
                0, // margin top
                0, // margin right
                10 // margin bottom
                ),
            10, // drawableHeight
            -20, // fontAscent
            10, // fontDescent
            -20, // expectedAscent
            10, // expectedDescent
            -25, // fontTop
            15, // fontBottom
            -25, // expectedTop
            15 // expectedBottom
          },
          {
=====================================================================
Found a 18 line (37 tokens) duplication in the following files: 
Starting at line 438 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 495 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 552 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java

            BetterImageSpan.ALIGN_CENTER,
            new Rect(
                0, // margin left
                5, // margin top
                0, // margin right
                5 // margin bottom
                ),
            10, // drawableHeight
            -20, // fontAscent
            10, // fontDescent
            -20, // expectedAscent
            10, // expectedDescent
            -25, // fontTop
            15, // fontBottom
            -25, // expectedTop
            15 // expectedBottom
          },
          {
=====================================================================
Found a 6 line (37 tokens) duplication in the following files: 
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\cache\DefaultCacheKeyFactory.java
Starting at line 60 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\cache\DefaultCacheKeyFactory.java

    BitmapMemoryCacheKey cacheKey =
        new BitmapMemoryCacheKey(
            getCacheKeySourceUri(request.getSourceUri()).toString(),
            request.getResizeOptions(),
            request.getRotationOptions(),
            request.getImageDecodeOptions(),
=====================================================================
Found a 6 line (37 tokens) duplication in the following files: 
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java
Starting at line 63 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java
Starting at line 93 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java
Starting at line 136 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java
Starting at line 165 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java
Starting at line 179 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\listener\ForwardingRequestListener.java

      ImageRequest request, Object callerContext, String requestId, boolean isPrefetch) {
    final int numberOfListeners = mRequestListeners.size();
    for (int i = 0; i < numberOfListeners; ++i) {
      RequestListener listener = mRequestListeners.get(i);
      try {
        listener.onRequestStart(request, callerContext, requestId, isPrefetch);
=====================================================================
Found a 3 line (37 tokens) duplication in the following files: 
Starting at line 463 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\memory\BasePool.java
Starting at line 504 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\memory\BasePool.java

      for (int i = 0; i < bucketSizes.size(); ++i) {
        final int bucketSize = bucketSizes.keyAt(i);
        final int maxLength = bucketSizes.valueAt(i);
=====================================================================
Found a 7 line (37 tokens) duplication in the following files: 
Starting at line 133 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapProbeProducer.java
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducer.java
Starting at line 121 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedProbeProducer.java

          getConsumer().onNewResult(newResult, status);
          return;
        }

        final ImageRequest imageRequest = mProducerContext.getImageRequest();
        final CacheKey cacheKey =
            mCacheKeyFactory.getEncodedCacheKey(imageRequest, mProducerContext.getCallerContext());
=====================================================================
Found a 9 line (37 tokens) duplication in the following files: 
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducer.java
Starting at line 46 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedProbeProducer.java

    mInputProducer = inputProducer;
  }

  @Override
  public void produceResults(
      final Consumer<EncodedImage> consumer, final ProducerContext producerContext) {
    try {
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.beginSection("EncodedMemoryCacheProducer#produceResults");
=====================================================================
Found a 7 line (37 tokens) duplication in the following files: 
Starting at line 195 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PartialDiskCacheProducer.java
Starting at line 287 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\cache\BufferedDiskCacheTest.java

    mInputProducer.produceResults(consumer, producerContext);
  }

  private static boolean isTaskCancelled(Task<?> task) {
    return task.isCancelled()
        || (task.isFaulted() && task.getError() instanceof CancellationException);
  }
=====================================================================
Found a 6 line (37 tokens) duplication in the following files: 
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PriorityStarvingThrottlingProducer.java
Starting at line 38 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\ThrottlingProducer.java

  public PriorityStarvingThrottlingProducer(
      int maxSimultaneousRequests, Executor executor, final Producer<T> inputProducer) {
    mMaxSimultaneousRequests = maxSimultaneousRequests;
    mExecutor = Preconditions.checkNotNull(executor);
    mInputProducer = Preconditions.checkNotNull(inputProducer);
    mPendingRequests = new PriorityQueue<>(11, new PriorityComparator<T>());
=====================================================================
Found a 10 line (37 tokens) duplication in the following files: 
Starting at line 60 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\common\memory\PooledByteStreamsTest.java
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\common\memory\PooledByteStreamsTest.java

  public void testReleasesOnException() throws IOException {
    try {
      mPooledByteStreams.copy(
          mIs,
          new OutputStream() {
            @Override
            public void write(int oneByte) throws IOException {
              throw new IOException();
            }
          });
=====================================================================
Found a 5 line (37 tokens) duplication in the following files: 
Starting at line 155 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 164 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 205 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

  public void testPrefetchToDiskCacheDefaultPriority() {
    Producer<Void> prefetchProducerSequence = mock(Producer.class);
    when(mProducerSequenceFactory.getEncodedImagePrefetchProducerSequence(mImageRequest))
        .thenReturn(prefetchProducerSequence);
    DataSource<Void> dataSource = mImagePipeline.prefetchToDiskCache(mImageRequest, mCallerContext);
=====================================================================
Found a 5 line (37 tokens) duplication in the following files: 
Starting at line 172 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 318 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 226 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 257 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    verify(mConsumer).onNewResult(mIntermediateImageReference, Consumer.NO_FLAGS);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
=====================================================================
Found a 14 line (37 tokens) duplication in the following files: 
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 82 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 61 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java
Starting at line 65 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\NetworkFetchProducerTest.java

        new LocalAssetFetchProducer(mExecutor, mPooledByteBufferFactory, mAssetManager);

    mProducerContext =
        new SettableProducerContext(
            mImageRequest,
            mRequestId,
            mProducerListener,
            mock(Object.class),
            ImageRequest.RequestLevel.FULL_FETCH,
            false,
            true,
            Priority.MEDIUM,
            mConfig);
    when(mImageRequest.getSourceUri()).thenReturn(Uri.parse("asset:///" + TEST_FILENAME));
=====================================================================
Found a 6 line (37 tokens) duplication in the following files: 
Starting at line 413 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 424 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

    mProducerContext1.setIsPrefetch(true);
    mProducerContext2.setIsPrefetch(false);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext1);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext2);
    assertFalse(mMultiplexedContext1.isPrefetch());
    mProducerContext2.setIsPrefetch(true);
=====================================================================
Found a 5 line (37 tokens) duplication in the following files: 
Starting at line 576 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 620 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 631 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

    mProducerContext1.setPriority(Priority.MEDIUM);
    mProducerContext2.setPriority(Priority.HIGH);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext1);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext2);
    assertEquals(Priority.HIGH, mMultiplexedContext1.getPriority());
=====================================================================
Found a 4 line (37 tokens) duplication in the following files: 
Starting at line 518 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 530 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, false);
    assertThat(fetcher.getExtraMap(one, 123))
        .containsEntry("request_initial_priority_is_high", "false");
    assertThat(fetcher.getExtraMap(one, 123)).containsEntry("priority_changed_count", "0");
=====================================================================
Found a 4 line (37 tokens) duplication in the following files: 
Starting at line 765 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 886 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 960 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    assertThat(fetcher.getCurrentlyFetching()).containsExactlyElementsIn(hiPriRequests);
    assertThat(fetcher.getHiPriQueue()).isEmpty();
    assertThat(fetcher.getLowPriQueue()).isEmpty();
    assertThat(fetcher.getDelayedQeueue()).isEmpty();
=====================================================================
Found a 3 line (37 tokens) duplication in the following files: 
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\disk\DiskStorageCache.java
Starting at line 293 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\disk\DiskStorageCache.java
Starting at line 377 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\disk\DiskStorageCache.java

        List<String> resourceIds = CacheKeyUtil.getResourceIds(key);
        for (int i = 0; i < resourceIds.size(); i++) {
          resourceId = resourceIds.get(i);
=====================================================================
Found a 7 line (37 tokens) duplication in the following files: 
Starting at line 281 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 210 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

  public @Nullable V inspect(K key) {
    Entry<K, V> entry = mCachedEntries.get(key);
    if (entry == null) {
      return null;
    }
    return entry.valueRef.get();
  }
=====================================================================
Found a 5 line (37 tokens) duplication in the following files: 
Starting at line 139 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DefaultDiskStorageTest.java
Starting at line 163 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DefaultDiskStorageTest.java
Starting at line 317 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DefaultDiskStorageTest.java

  public void testStoreFile() throws Exception {
    DefaultDiskStorage storage = getStorageSupplier(1).get();
    final String resourceId1 = "resource1";
    final byte[] value1 = new byte[100];
    value1[80] = 101;
=====================================================================
Found a 11 line (37 tokens) duplication in the following files: 
Starting at line 164 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 199 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 218 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 241 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 267 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 299 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  public void testClosingClientReference() {
    mCache =
        createDummyAdaptiveCountingMemoryCache(
            mParamsSupplier,
            mCacheTrimStrategy,
            mValueDescriptor,
            100,
            1,
            2,
            initialLFUCacheFractionPromil);
    CloseableReference<Integer> cachedRef = mCache.cache(KEY, newReference(100));
=====================================================================
Found a 5 line (37 tokens) duplication in the following files: 
Starting at line 860 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 879 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 669 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    assertNotCached(KEYS[4], 104);
    assertNotCached(KEYS[2], 102);
    assertNotCached(KEYS[7], 107);
    assertNotCached(KEYS[3], 103);
    assertNotCached(KEYS[6], 106);
=====================================================================
Found a 5 line (37 tokens) duplication in the following files: 
Starting at line 57 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 91 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 117 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 123 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 129 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java

    mCountingLruMap.put("key3", 130);
    assertEquals(3, mCountingLruMap.getCount());
    assertEquals(360, mCountingLruMap.getSizeInBytes());
    assertKeyOrder("key1", "key2", "key3");
    assertValueOrder(110, 120, 130);
=====================================================================
Found a 7 line (37 tokens) duplication in the following files: 
Starting at line 174 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java

  public void testRemoveAll() {
    mCountingLruMap.put("key1", 110);
    mCountingLruMap.put("key2", 120);
    mCountingLruMap.put("key3", 130);
    mCountingLruMap.put("key4", 140);

    mCountingLruMap.removeAll(
=====================================================================
Found a 4 line (37 tokens) duplication in the following files: 
Starting at line 402 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 459 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    assertNotCached(KEYS[1], 110);
    assertExclusivelyOwned(KEYS[2], 120);
    assertExclusivelyOwned(KEYS[3], 130);
    assertSharedWithCount(KEYS[4], 140, 1);
=====================================================================
Found a 16 line (37 tokens) duplication in the following files: 
Starting at line 66 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\main\java\com\facebook\imagepipeline\platform\GingerbreadPurgeableDecoder.java
Starting at line 63 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\main\java\com\facebook\imagepipeline\platform\KitKatPurgeableDecoder.java

  }

  /**
   * Decodes a byteArray containing jpeg encoded bytes into a purgeable bitmap
   *
   * <p>Adds a JFIF End-Of-Image marker if needed before decoding.
   *
   * @param bytesRef the byte buffer that contains the encoded bytes
   * @param length the length of bytes for decox
   * @param options the options passed to the BitmapFactory
   * @return the decoded bitmap
   */
  @Override
  protected Bitmap decodeJPEGByteArrayAsPurgeable(
      CloseableReference<PooledByteBuffer> bytesRef, int length, BitmapFactory.Options options) {
    byte[] suffix = endsWithEOI(bytesRef, length) ? null : EOI;
=====================================================================
Found a 8 line (37 tokens) duplication in the following files: 
Starting at line 37 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\bitmap\BitmapAnimationFragment.java
Starting at line 36 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\MediaControlFragment.java

    return inflater.inflate(R.layout.fragment_simple_container, container, false);
  }

  @Override
  public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {

    // Get the animation container
    ImageView imageView = (ImageView) view.findViewById(R.id.animation_container);
=====================================================================
Found a 11 line (37 tokens) duplication in the following files: 
Starting at line 96 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRotationFragment.java
Starting at line 214 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\pjpeg\ImageFormatProgressiveJpegFragment.java
Starting at line 192 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineBitmapFactoryFragment.java
Starting at line 193 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java

      return SPINNER_ENTRIES[position];
    }

    @Override
    public long getItemId(int position) {
      return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
      final LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
=====================================================================
Found a 17 line (37 tokens) duplication in the following files: 
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\color\ColorImageExample.java
Starting at line 114 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\keyframes\KeyframesDecoderExample.java
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\svg\SvgDecoderExample.java
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\FrescoDrawable2ImplTest.java

    @Override
    public int getSizeInBytes() {
      return 0;
    }

    @Override
    public void close() {
      mClosed = true;
    }

    @Override
    public boolean isClosed() {
      return mClosed;
    }

    @Override
    public void setImageExtras(@Nullable Map<String, Object> extras) {}
=====================================================================
Found a 6 line (37 tokens) duplication in the following files: 
Starting at line 45 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\override\ImageFormatOverrideExample.java
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineQualifiedResourceFragment.java

    return inflater.inflate(R.layout.fragment_format_override, container, false);
  }

  @Override
  public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
    SimpleDraweeView simpleDraweeView = (SimpleDraweeView) view.findViewById(R.id.drawee_view);
=====================================================================
Found a 5 line (37 tokens) duplication in the following files: 
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\pjpeg\ImageFormatProgressiveJpegFragment.java
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java

    spinner.setOnItemSelectedListener(
        new AdapterView.OnItemSelectedListener() {
          @Override
          public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
            final Entry spinnerEntry = mSpinnerEntries[spinner.getSelectedItemPosition()];
=====================================================================
Found a 3 line (37 tokens) duplication in the following files: 
Starting at line 305 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\DefaultZoomableController.java
Starting at line 321 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\DefaultZoomableController.java

  private void mapAbsoluteToRelative(float[] destPoints, float[] srcPoints, int numPoints) {
    for (int i = 0; i < numPoints; i++) {
      destPoints[i * 2 + 0] = (srcPoints[i * 2 + 0] - mImageBounds.left) / mImageBounds.width();
=====================================================================
Found a 6 line (37 tokens) duplication in the following files: 
Starting at line 69 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\ImagePipelineUtilsImplTest.java
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\ImagePipelineUtilsImplTest.java
Starting at line 95 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\ImagePipelineUtilsImplTest.java
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\ImagePipelineUtilsImplTest.java
Starting at line 149 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\ImagePipelineUtilsImplTest.java

    final ImageOptions imageOptions = ImageOptions.create().build();

    ImageRequest imageRequest = mImagePipelineUtils.buildImageRequest(URI, imageOptions);

    assertThat(imageRequest).isNotNull();
    assertThat(imageRequest.getSourceUri()).isEqualTo(URI);
=====================================================================
Found a 6 line (36 tokens) duplication in the following files: 
Starting at line 46 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

  private static final String POSTPROCESSOR_NAME = "postprocessor_name";
  private static final Map<String, String> mExtraMap =
      ImmutableMap.of(PostprocessorProducer.POSTPROCESSOR, POSTPROCESSOR_NAME);

  @Mock public PlatformBitmapFactory mPlatformBitmapFactory;
  @Mock public ProducerListener2 mProducerListener;
=====================================================================
Found a 6 line (36 tokens) duplication in the following files: 
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedSingleUsePostprocessorProducerTest.java
Starting at line 46 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java

  private static final String POSTPROCESSOR_NAME = "postprocessor_name";
  private static final Map<String, String> mExtraMap =
      ImmutableMap.of(PostprocessorProducer.POSTPROCESSOR, POSTPROCESSOR_NAME);

  @Mock public PlatformBitmapFactory mPlatformBitmapFactory;
  @Mock public ProducerContext mProducerContext;
=====================================================================
Found a 16 line (36 tokens) duplication in the following files: 
Starting at line 32 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\main\java\com\facebook\animated\gif\GifFrame.java
Starting at line 139 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\main\java\com\facebook\animated\gif\GifImage.java
Starting at line 32 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\main\java\com\facebook\animated\webp\WebPFrame.java

  GifFrame(long nativeContext) {
    mNativeContext = nativeContext;
  }

  @Override
  protected void finalize() {
    nativeFinalize();
  }

  @Override
  public void dispose() {
    nativeDispose();
  }

  @Override
  public void renderFrame(int width, int height, Bitmap bitmap) {
=====================================================================
Found a 8 line (36 tokens) duplication in the following files: 
Starting at line 195 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 195 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

  private void testCreateDefaults(GifImage mockGifImage, PooledByteBuffer byteBuffer) {
    EncodedImage encodedImage =
        new EncodedImage(CloseableReference.of(byteBuffer, FAKE_RESOURCE_RELEASER));
    encodedImage.setImageFormat(ImageFormat.UNKNOWN);

    CloseableAnimatedImage closeableImage =
        (CloseableAnimatedImage)
            mAnimatedImageFactory.decodeGif(
=====================================================================
Found a 28 line (36 tokens) duplication in the following files: 
Starting at line 101 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedColorDrawable.java
Starting at line 74 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedCornersDrawable.java

  }

  /**
   * Sets whether to round as circle.
   *
   * @param isCircle whether or not to round as circle
   */
  @Override
  public void setCircle(boolean isCircle) {
    mIsCircle = isCircle;
    updatePath();
    invalidateSelf();
  }

  /** Returns whether or not this drawable rounds as circle. */
  @Override
  public boolean isCircle() {
    return mIsCircle;
  }

  /**
   * Sets the rounding radii.
   *
   * @param radii Each corner receive two radius values [X, Y]. The corners are ordered top-left,
   *     top-right, bottom-right, bottom-left
   */
  @Override
  public void setRadii(float[] radii) {
=====================================================================
Found a 19 line (36 tokens) duplication in the following files: 
Starting at line 216 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedColorDrawable.java
Starting at line 178 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedDrawable.java

      invalidateSelf();
    }
  }

  /** Gets the padding. */
  @Override
  public float getPadding() {
    return mPadding;
  }

  /**
   * Sets whether image should be scaled down inside borders.
   *
   * @param scaleDownInsideBorders
   */
  @Override
  public void setScaleDownInsideBorders(boolean scaleDownInsideBorders) {
    if (mScaleDownInsideBorders != scaleDownInsideBorders) {
      mScaleDownInsideBorders = scaleDownInsideBorders;
=====================================================================
Found a 4 line (36 tokens) duplication in the following files: 
Starting at line 324 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedColorDrawable.java
Starting at line 259 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedCornersDrawable.java
Starting at line 303 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedDrawable.java

      mBorderPath.addCircle(mTempRect.centerX(), mTempRect.centerY(), radius, Path.Direction.CW);
    } else {
      for (int i = 0; i < mBorderRadii.length; i++) {
        mBorderRadii[i] = mRadii[i] + mPadding - mBorderWidth / 2;
=====================================================================
Found a 4 line (36 tokens) duplication in the following files: 
Starting at line 221 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 56 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java

      float dy = parentRect.top;
      outTransform.setScale(scale, scale);
      outTransform.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
    }
=====================================================================
Found a 5 line (36 tokens) duplication in the following files: 
Starting at line 87 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 124 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 141 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 158 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 80 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 100 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 117 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 153 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    mFadeDrawable.fadeToLayer(1);
    Assert.assertEquals(100, mFadeDrawable.mDurationMs);
    Assert.assertEquals(FadeDrawable.TRANSITION_STARTING, mFadeDrawable.mTransitionState);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[0]);
=====================================================================
Found a 5 line (36 tokens) duplication in the following files: 
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 144 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 161 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 385 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 403 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 373 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 391 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    verify(mCallback).invalidateDrawable(mFadeDrawable);
    // alphas will change only when the next draw happens
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[2]);
=====================================================================
Found a 4 line (36 tokens) duplication in the following files: 
Starting at line 121 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 198 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 221 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 231 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    GenericDraweeHierarchy dh = mBuilder.build();
    RootDrawable rootDrawable = (RootDrawable) dh.getTopLevelDrawable();
    FadeDrawable fadeDrawable = (FadeDrawable) rootDrawable.getCurrent();
    assertEquals(7, fadeDrawable.getNumberOfLayers());
=====================================================================
Found a 7 line (36 tokens) duplication in the following files: 
Starting at line 42 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java
Starting at line 96 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java

    AspectRatioMeasure.updateMeasureSpec(mSpec, 2f, layoutParams2, 10, 10);
    assertEquals(makeMeasureSpec(410, EXACTLY), mSpec.width);
    assertEquals(makeMeasureSpec(210, EXACTLY), mSpec.height);
  }

  @Test
  public void testNoAspectRatio() {
=====================================================================
Found a 8 line (36 tokens) duplication in the following files: 
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\DraweeHolderTest.java
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\DraweeHolderTest.java
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\DraweeHolderTest.java

    mDraweeHolder.setController(mController);
    assertSame(mController, mDraweeHolder.getController());
    assertSame(mDraweeHierarchy, mDraweeHolder.getHierarchy());
    assertSame(mDraweeHierarchy, mController.getHierarchy());
  }

  @Test
  public void testSetControllerWithoutHierarchy() {
=====================================================================
Found a 6 line (36 tokens) duplication in the following files: 
Starting at line 111 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\HashCodeUtil.java
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\HashCodeUtil.java

  public static int hashCode(int i1, int i2, int i3, int i4, int i5) {
    int acc = X + i1;
    acc = X * acc + i2;
    acc = X * acc + i3;
    acc = X * acc + i4;
    acc = X * acc + i5;
=====================================================================
Found a 4 line (36 tokens) duplication in the following files: 
Starting at line 22 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\file\FileUtilsTest.java
Starting at line 47 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\file\FileUtilsTest.java

  public void testMkDirsNoWorkRequired() {
    File directory = mock(File.class);
    when(directory.exists()).thenReturn(true);
    when(directory.isDirectory()).thenReturn(true);
=====================================================================
Found a 5 line (36 tokens) duplication in the following files: 
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 230 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 366 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);

    Object val = mock(Object.class);
    setState(mSrc2, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
=====================================================================
Found a 5 line (36 tokens) duplication in the following files: 
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 299 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 406 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 439 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2, NOT_FAILED, null);

    Object val = mock(Object.class);
    setState(mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
=====================================================================
Found a 5 line (36 tokens) duplication in the following files: 
Starting at line 331 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 217 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 433 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2a, NOT_FAILED, null);

    Object val2b = mock(Object.class);
    setState(mSrc2, NOT_CLOSED, FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
=====================================================================
Found a 4 line (36 tokens) duplication in the following files: 
Starting at line 112 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 169 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    setState(mSrc2, NOT_CLOSED, FINISHED, WITH_RESULT, val2, FAILED, mock(Throwable.class));
    subscriber2.onFailure(mSrc2);
    verifySubscriber(dataSource, mSrc2, NO_INTERACTIONS);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2, NOT_FAILED, null);
=====================================================================
Found a 6 line (36 tokens) duplication in the following files: 
Starting at line 171 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 230 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifySubscriber(dataSource, mSrc2, NO_INTERACTIONS);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);

    // gets ignored because DS2 was first to produce result
    Object val1b = mock(Object.class);
    setState(mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1b, NOT_FAILED, null);
=====================================================================
Found a 5 line (36 tokens) duplication in the following files: 
Starting at line 231 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 284 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);

    Object val1b = mock(Object.class);
    setState(mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val1b, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
=====================================================================
Found a 6 line (36 tokens) duplication in the following files: 
Starting at line 231 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 302 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);

    Object val1b = mock(Object.class);
    setState(mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val1b, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
    mInOrder.verify(mSrc2).close();
=====================================================================
Found a 21 line (36 tokens) duplication in the following files: 
Starting at line 129 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java
Starting at line 157 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java
Starting at line 188 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java
Starting at line 211 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java

        return fetchDecodedImage(imageRequest, callerContext, requestLevel);
      }

      @Override
      public String toString() {
        return Objects.toStringHelper(this).add("uri", imageRequest.getSourceUri()).toString();
      }
    };
  }

  /**
   * Returns a DataSource supplier that will on get submit the request for execution and return a
   * DataSource representing the pending results of the task.
   *
   * @param imageRequest the request to submit (what to execute).
   * @param callerContext the caller context of the caller of data source supplier
   * @param requestLevel which level to look down until for the image
   * @param requestListener additional image request listener independent of ImageRequest listeners
   * @return a DataSource representing pending results and completion of the request
   */
  public Supplier<DataSource<CloseableReference<CloseableImage>>> getDataSourceSupplier(
=====================================================================
Found a 11 line (36 tokens) duplication in the following files: 
Starting at line 165 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\decoder\DefaultImageDecoder.java
Starting at line 64 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\FrescoVitoRegionDecoder.java

              bitmapReference,
              ImmutableQualityInfo.FULL_QUALITY,
              encodedImage.getRotationAngle(),
              encodedImage.getExifOrientation());

      closeableStaticBitmap.setImageExtra(
          "is_rounded",
          didApplyTransformation && options.bitmapTransformation instanceof CircularTransformation);

      return closeableStaticBitmap;
    } finally {
=====================================================================
Found a 11 line (36 tokens) duplication in the following files: 
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BaseProducerContext.java
Starting at line 72 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\SettableProducerContext.java

  public BaseProducerContext(
      ImageRequest imageRequest,
      String id,
      @Nullable String uiComponentId,
      ProducerListener2 producerListener,
      Object callerContext,
      ImageRequest.RequestLevel lowestPermittedRequestLevel,
      boolean isPrefetch,
      boolean isIntermediateResultExpected,
      Priority priority,
      ImagePipelineConfigInterface imagePipelineConfig) {
=====================================================================
Found a 6 line (36 tokens) duplication in the following files: 
Starting at line 124 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\DiskCacheReadProducer.java
Starting at line 196 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PartialDiskCacheProducer.java
Starting at line 288 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\cache\BufferedDiskCacheTest.java

  }

  private static boolean isTaskCancelled(Task<?> task) {
    return task.isCancelled()
        || (task.isFaulted() && task.getError() instanceof CancellationException);
  }
=====================================================================
Found a 6 line (36 tokens) duplication in the following files: 
Starting at line 109 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java
Starting at line 179 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java

    Assert.assertEquals(4, b2.length);
    Assert.assertTrue(mPool.mInUseValues.contains(b2));
    mStats.refresh();
    Assert.assertEquals(
        ImmutableMap.of(
            2, new IntPair(0, 1),
=====================================================================
Found a 7 line (36 tokens) duplication in the following files: 
Starting at line 179 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 385 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SwallowResultProducerTest.java

    doAnswer(new ProduceResultsFailureAnswer())
        .when(mInputProducer)
        .produceResults(any(Consumer.class), eq(mProducerContext));
  }

  private static class ProduceResultsNewResultAnswer implements Answer<Void> {
    private final CloseableReference<CloseableImage> mResult;
=====================================================================
Found a 6 line (36 tokens) duplication in the following files: 
Starting at line 305 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 261 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, false);
    verifyNoMoreInteractions(mInputProducer);
  }
=====================================================================
Found a 9 line (36 tokens) duplication in the following files: 
Starting at line 323 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 349 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 379 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java

    jobRunnable.run(mEncodedImage, Consumer.IS_LAST);

    InOrder inOrder = inOrder(mProducerListener, mImageDecoder);
    inOrder
        .verify(mProducerListener)
        .onProducerStart(mProducerContext, DecodeProducer.PRODUCER_NAME);
    inOrder
        .verify(mImageDecoder)
        .decode(mEncodedImage, IMAGE_SIZE, ImmutableQualityInfo.FULL_QUALITY, IMAGE_DECODE_OPTIONS);
=====================================================================
Found a 7 line (36 tokens) duplication in the following files: 
Starting at line 316 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

    verify(mProducerListener).onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, null);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testDiskCacheGetNotFoundInputProducerNotFound() {
=====================================================================
Found a 7 line (36 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\QualifiedResourceFetchProducerTest.java

  @Mock public PooledByteBufferFactory mPooledByteBufferFactory;
  @Mock public ContentResolver mContentResolver;
  @Mock public Consumer<EncodedImage> mConsumer;
  @Mock public ImageRequest mImageRequest;
  @Mock public ProducerListener2 mProducerListener;
  @Mock public Exception mException;
  @Mock public ImagePipelineConfig mConfig;
=====================================================================
Found a 4 line (36 tokens) duplication in the following files: 
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 106 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, true);
    assertThat(fetcher.getHiPriQueue()).isEmpty();
    assertThat(fetcher.getLowPriQueue()).isEmpty();
    assertThat(fetcher.getCurrentlyFetching()).containsExactly(one);
=====================================================================
Found a 4 line (36 tokens) duplication in the following files: 
Starting at line 106 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 114 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    fetcher.onFetchCompletion(one, 4317);
    assertThat(fetcher.getHiPriQueue()).isEmpty();
    assertThat(fetcher.getLowPriQueue()).isEmpty();
    assertThat(fetcher.getCurrentlyFetching()).containsExactly(two, three);
=====================================================================
Found a 8 line (36 tokens) duplication in the following files: 
Starting at line 827 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 879 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 953 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    assertThat(fetcher.getHiPriQueue()).containsExactly(hipri2);
    assertThat(fetcher.getLowPriQueue()).isEmpty();

    // Simulate a 3rd failure in hipri1, the request should NOT be requeued.
    getOnlyElement(recordingNetworkFetcher.callbacks.get(hipri1.delegatedState))
        .onFailure(new Exception());

    assertThat(hipri1.requeueCount).isEqualTo(2);
=====================================================================
Found a 6 line (36 tokens) duplication in the following files: 
Starting at line 296 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 396 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java

    synchronized (this) {
      oldExclusive = mLeastFrequentlyUsedExclusiveEntries.remove(key);
      if (oldExclusive == null) {
        oldExclusive = mMostFrequentlyUsedExclusiveEntries.remove(key);
      }
      if (oldExclusive != null) {
=====================================================================
Found a 5 line (36 tokens) duplication in the following files: 
Starting at line 86 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imageutils\BitmapUtil.java
Starting at line 109 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imageutils\BitmapUtil.java

    BitmapFactory.decodeFile(uri.getPath(), options);
    return (options.outWidth == -1 || options.outHeight == -1)
        ? null
        : new Pair<>(options.outWidth, options.outHeight);
  }
=====================================================================
Found a 5 line (36 tokens) duplication in the following files: 
Starting at line 259 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DefaultDiskStorageTest.java
Starting at line 264 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DefaultDiskStorageTest.java

    assertTrue(storage.contains(resourceId1, null));
    assertFalse(storage.contains(resourceId2, null));
    assertTrue(storage.contains(resourceId3, null));

    storage.remove(resourceId1);
=====================================================================
Found a 4 line (36 tokens) duplication in the following files: 
Starting at line 519 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 612 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 712 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    originalRef1.close();
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
=====================================================================
Found a 4 line (36 tokens) duplication in the following files: 
Starting at line 522 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 616 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 718 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    originalRef2.close();
    CloseableReference<Integer> originalRef3 = newReference(30);
    CloseableReference<Integer> valueRef3 = mCache.cache(KEYS[3], originalRef3);
    originalRef3.close();
=====================================================================
Found a 4 line (36 tokens) duplication in the following files: 
Starting at line 525 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 620 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    originalRef3.close();
    CloseableReference<Integer> originalRef4 = newReference(40);
    CloseableReference<Integer> valueRef4 = mCache.cache(KEYS[4], originalRef4);
    originalRef4.close();
=====================================================================
Found a 5 line (36 tokens) duplication in the following files: 
Starting at line 571 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 609 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 412 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 442 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 518 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> originalRef1 = newReference(200);
    CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);
    originalRef1.close();
    valueRef1.close();
    CloseableReference<Integer> originalRef2 = newReference(300);
=====================================================================
Found a 5 line (36 tokens) duplication in the following files: 
Starting at line 575 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 613 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 715 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 416 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 446 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 522 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> originalRef2 = newReference(300);
    CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
    valueRef2.close();
    CloseableReference<Integer> originalRef3 = newReference(400);
=====================================================================
Found a 5 line (36 tokens) duplication in the following files: 
Starting at line 617 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 450 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> originalRef3 = newReference(30);
    CloseableReference<Integer> valueRef3 = mCache.cache(KEYS[3], originalRef3);
    originalRef3.close();
    valueRef3.close();
    CloseableReference<Integer> originalRef4 = newReference(40);
=====================================================================
Found a 3 line (36 tokens) duplication in the following files: 
Starting at line 785 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 905 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    MemoryTrimType memoryTrimType = MemoryTrimType.OnCloseToDalvikHeapLimit;
    mParams = new MemoryCacheParams(2200, 16, 2200, 16, 110, PARAMS_CHECK_INTERVAL_MS);
    when(mParamsSupplier.get()).thenReturn(mParams);
=====================================================================
Found a 7 line (36 tokens) duplication in the following files: 
Starting at line 1350 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1496 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1564 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    valueRef2a.close();
    assertLFUExclusivelyOwned(KEYS[1], 10);
    assertLFUExclusivelyOwned(KEYS[2], 20);

    // insert item3 to LFU
    CloseableReference<Integer> originalRef3 = newReference(30);
    CloseableReference<Integer> valueRef3a = mCache.cache(KEYS[3], originalRef3);
=====================================================================
Found a 7 line (36 tokens) duplication in the following files: 
Starting at line 79 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java

  public void testGet() {
    mCountingLruMap.put("key1", 110);
    mCountingLruMap.put("key2", 120);
    mCountingLruMap.put("key3", 130);

    // get shouldn't affect the ordering, nor the size
    assertEquals(120, (Object) mCountingLruMap.get("key2"));
=====================================================================
Found a 7 line (36 tokens) duplication in the following files: 
Starting at line 180 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 215 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java

    mCountingLruMap.removeAll(
        new Predicate<String>() {
          @Override
          public boolean apply(String key) {
            return key.equals("key2") || key.equals("key3");
          }
        });
=====================================================================
Found a 4 line (36 tokens) duplication in the following files: 
Starting at line 369 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 445 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 521 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    originalRef1.close();
    CloseableReference<Integer> originalRef2 = newReference(120);
    CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
=====================================================================
Found a 4 line (36 tokens) duplication in the following files: 
Starting at line 372 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 449 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 525 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    originalRef2.close();
    CloseableReference<Integer> originalRef3 = newReference(130);
    CloseableReference<Integer> valueRef3 = mCache.cache(KEYS[3], originalRef3);
    originalRef3.close();
=====================================================================
Found a 4 line (36 tokens) duplication in the following files: 
Starting at line 375 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 453 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    originalRef3.close();
    CloseableReference<Integer> originalRef4 = newReference(140);
    CloseableReference<Integer> valueRef4 = mCache.cache(KEYS[4], originalRef4);
    originalRef4.close();
=====================================================================
Found a 9 line (36 tokens) duplication in the following files: 
Starting at line 33 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\image\CloseableStaticBitmapTest.java
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\image\CloseableStaticBitmapTest.java

    mBitmap = Bitmap.createBitmap(WIDTH, HEIGHT, Bitmap.Config.ARGB_8888);
    ResourceReleaser<Bitmap> releaser = SimpleBitmapReleaser.getInstance();
    mCloseableStaticBitmap =
        CloseableStaticBitmap.of(
            mBitmap,
            releaser,
            ImmutableQualityInfo.FULL_QUALITY,
            0,
            ExifInterface.ORIENTATION_NORMAL);
=====================================================================
Found a 5 line (36 tokens) duplication in the following files: 
Starting at line 132 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\bitmap\BitmapAnimationCacheSelectorConfigurator.java
Starting at line 109 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\utils\SampleAnimationBackendConfigurator.java

  private void setupSelector() {
    mSpinner.setOnItemSelectedListener(
        new AdapterView.OnItemSelectedListener() {
          @Override
          public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
=====================================================================
Found a 8 line (36 tokens) duplication in the following files: 
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\samples\comparison\src\main\java\com\facebook\samples\comparison\instrumentation\InstrumentedDraweeView.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\main\java\com\facebook\samples\scrollperf\instrumentation\InstrumentedDraweeView.java

    if (controllerBuilder instanceof AbstractDraweeControllerBuilder) {
      ((AbstractDraweeControllerBuilder<?, ?, ?, ?>) controllerBuilder)
          .setControllerListener(mListener);
    }
    setController(controllerBuilder.build());
  }

  public ControllerListener<Object> getListener() {
=====================================================================
Found a 6 line (36 tokens) duplication in the following files: 
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeMediaPickerFragment.java
Starting at line 37 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\svg\ImageFormatSvgFragment.java

    return inflater.inflate(R.layout.fragment_drawee_media_picker, container, false);
  }

  @Override
  public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
    mSimpleDraweeView = (SimpleDraweeView) view.findViewById(R.id.drawee_view);
=====================================================================
Found a 5 line (36 tokens) duplication in the following files: 
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 82 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java

    mSpinner.setAdapter(new SimpleUriListAdapter());
    mSpinner.setOnItemSelectedListener(
        new AdapterView.OnItemSelectedListener() {
          @Override
          public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
=====================================================================
Found a 6 line (36 tokens) duplication in the following files: 
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\pjpeg\ImageFormatProgressiveJpegFragment.java
Starting at line 48 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineRegionDecodingFragment.java
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\FrescoVitoLithoRegionDecodeFragment.java

                new BaseControllerListener<ImageInfo>() {
                  @Override
                  public void onFinalImageSet(
                      String id,
                      @javax.annotation.Nullable ImageInfo imageInfo,
                      @javax.annotation.Nullable Animatable animatable) {
=====================================================================
Found a 10 line (36 tokens) duplication in the following files: 
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java
Starting at line 250 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java

    }

    @Override
    public long getItemId(int position) {
      return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
      final LayoutInflater layoutInflater = getLayoutInflater(null);
=====================================================================
Found a 4 line (36 tokens) duplication in the following files: 
Starting at line 53 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\MultiGestureListener.java
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\MultiGestureListener.java
Starting at line 115 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\MultiGestureListener.java
Starting at line 126 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\MultiGestureListener.java
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\MultiGestureListener.java
Starting at line 148 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\MultiGestureListener.java

  public synchronized boolean onSingleTapUp(MotionEvent e) {
    final int size = mListeners.size();
    for (int i = 0; i < size; i++) {
      if (mListeners.get(i).onSingleTapUp(e)) {
=====================================================================
Found a 9 line (36 tokens) duplication in the following files: 
Starting at line 113 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\androidTest\java\com\facebook\webpsupport\WebpDecodingTest.java
Starting at line 130 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\androidTest\java\com\facebook\webpsupport\WebpDecodingTest.java

    final MemoryFile memoryFile = getMemoryFile("webp_ea.webp");
    final Bitmap bitmap =
        mWebpBitmapFactory.decodeFileDescriptor(getMemoryFileDescriptor(memoryFile), null, null);
    memoryFile.close();
    assertBitmap(bitmap, 400, 301);
  }

  @Test
  public void test_webp_lossless_decoding_inputstream_bitmap() throws Throwable {
=====================================================================
Found a 9 line (35 tokens) duplication in the following files: 
Starting at line 103 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 180 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

  public void testSetBoundsUpdatesIntrinsicDimensionsWhenBackendDimensionWidthSet() {
    int boundsWidth = 160;
    int boundsHeight = 90;
    int backendIntrinsicWidth = 260;
    int backendIntrinsicHeight = AnimationBackend.INTRINSIC_DIMENSION_UNSET;
    setupBoundsAndRendererDimensions(
        boundsWidth, boundsHeight, backendIntrinsicWidth, backendIntrinsicHeight);

    mBitmapAnimationBackend.setBounds(mBounds);
=====================================================================
Found a 7 line (35 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 146 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 182 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java

    GifImage mockGifImage = mock(GifImage.class);

    // Expect a call to GifImage.createFromByteBuffer
    TrivialBufferPooledByteBuffer byteBuffer = createDirectByteBuffer();
    when(mGifImageMock.decodeFromByteBuffer(
            eq(byteBuffer.getByteBuffer()), any(ImageDecodeOptions.class)))
        .thenReturn(mockGifImage);
=====================================================================
Found a 8 line (35 tokens) duplication in the following files: 
Starting at line 196 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 233 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 281 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java

    EncodedImage encodedImage =
        new EncodedImage(CloseableReference.of(byteBuffer, FAKE_RESOURCE_RELEASER));
    encodedImage.setImageFormat(ImageFormat.UNKNOWN);

    CloseableAnimatedImage closeableImage =
        (CloseableAnimatedImage)
            mAnimatedImageFactory.decodeGif(
                encodedImage, ImageDecodeOptions.defaults(), DEFAULT_BITMAP_CONFIG);
=====================================================================
Found a 7 line (35 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 146 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 182 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

    WebPImage mockWebPImage = mock(WebPImage.class);

    // Expect a call to WebPImage.createFromByteBuffer
    TrivialBufferPooledByteBuffer byteBuffer = createDirectByteBuffer();
    when(mWebPImageMock.decodeFromByteBuffer(
            eq(byteBuffer.getByteBuffer()), any(ImageDecodeOptions.class)))
        .thenReturn(mockWebPImage);
=====================================================================
Found a 8 line (35 tokens) duplication in the following files: 
Starting at line 196 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 234 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 281 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

    EncodedImage encodedImage =
        new EncodedImage(CloseableReference.of(byteBuffer, FAKE_RESOURCE_RELEASER));
    encodedImage.setImageFormat(ImageFormat.UNKNOWN);

    CloseableAnimatedImage closeableImage =
        (CloseableAnimatedImage)
            mAnimatedImageFactory.decodeWebP(
                encodedImage, ImageDecodeOptions.defaults(), DEFAULT_BITMAP_CONFIG);
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 191 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\debug\DebugControllerOverlayDrawable.java
Starting at line 196 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\debug\DebugControllerOverlayDrawable.java

    mPaint.setColor(OUTLINE_COLOR);
    canvas.drawRect(bounds.left, bounds.top, bounds.right, bounds.bottom, mPaint);

    // Draw overlay
    mPaint.setStyle(Paint.Style.FILL);
    mPaint.setColor(mOverlayColor);
=====================================================================
Found a 13 line (35 tokens) duplication in the following files: 
Starting at line 207 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 234 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 261 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 288 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 340 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 367 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 401 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 437 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 465 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java

    public static final ScaleType INSTANCE = new ScaleTypeFitStart();

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float scale = Math.min(scaleX, scaleY);
=====================================================================
Found a 9 line (35 tokens) duplication in the following files: 
Starting at line 24 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\debug\DebugControllerOverlayDrawableTestHelper.java
Starting at line 36 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\debug\DebugControllerOverlayDrawableTestHelper.java
Starting at line 48 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\debug\DebugControllerOverlayDrawableTestHelper.java

  public void assertOverlayColorOk(
      int imageWidth,
      int imageHeight,
      int drawableWidth,
      int drawableHeight,
      ScalingUtils.ScaleType scaleType) {
    mOverlayDrawable.setBounds(0, 0, drawableWidth, drawableHeight);
    assertEquals(
        DebugControllerOverlayDrawable.TEXT_COLOR_IMAGE_OK,
=====================================================================
Found a 3 line (35 tokens) duplication in the following files: 
Starting at line 259 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 281 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 308 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 254 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 270 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 294 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    verify(mLayers[0]).mutate();
    verify(mLayers[0]).setAlpha(255);
    verify(mLayers[0]).draw(mCanvas);
=====================================================================
Found a 3 line (35 tokens) duplication in the following files: 
Starting at line 262 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 312 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 298 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    verify(mLayers[1]).mutate();
    verify(mLayers[1]).setAlpha(255);
    verify(mLayers[1]).draw(mCanvas);
=====================================================================
Found a 3 line (35 tokens) duplication in the following files: 
Starting at line 267 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 280 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    verify(mLayers[2]).draw(mCanvas);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
    verifyNoMoreInteractions(mCallback, mLayers[0], mLayers[1], mLayers[2]);
=====================================================================
Found a 3 line (35 tokens) duplication in the following files: 
Starting at line 294 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 256 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

      verify(mLayers[2]).draw(mCanvas);
      verify(mCallback).invalidateDrawable(mFadeDrawable);
      verifyNoMoreInteractions(mCallback, mLayers[0], mLayers[1], mLayers[2]);
=====================================================================
Found a 5 line (35 tokens) duplication in the following files: 
Starting at line 309 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 275 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 295 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

      verify(mLayers[0]).setAlpha(255);
      verify(mLayers[0]).draw(mCanvas);
    }
    verify(mLayers[1]).mutate();
    verify(mLayers[1]).setAlpha(255);
=====================================================================
Found a 11 line (35 tokens) duplication in the following files: 
Starting at line 140 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java
Starting at line 157 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java

    mFadeDrawable.fadeInLayer(OTHER_LAYER_INDEX);
    mFadeDrawable.draw(mCanvas);

    SystemClock.setCurrentTimeMillis((long) (DURATION * 1.1));
    mFadeDrawable.draw(mCanvas);

    verifyNoMoreInteractions(mOnFadeListener);
  }

  @Test
  public void testFadeOut() {
=====================================================================
Found a 8 line (35 tokens) duplication in the following files: 
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java

    expectedMatrix.setScale(1, -1);
    assertFalse(drawable.mRotationMatrix.isIdentity());
    AndroidGraphicsTestUtils.assertEquals(expectedMatrix, drawable.mRotationMatrix);
    verifySetBounds(expectedMatrix);
  }

  @Test
  public void testCreation_transpose() {
=====================================================================
Found a 5 line (35 tokens) duplication in the following files: 
Starting at line 79 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ScaleTypeDrawableTest.java
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ScaleTypeDrawableTest.java

  private void testConfigureBounds_NoIntrinsicDimensions(ScaleType scaleType, Rect viewBounds) {
    mScaleTypeDrawable.setScaleType(scaleType);
    mScaleTypeDrawable.setBounds(viewBounds);
    reset(mUnderlyingDrawable);
    when(mUnderlyingDrawable.getIntrinsicWidth()).thenReturn(-1);
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 54 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java

    assertEquals(makeMeasureSpec(410, UNSPECIFIED), mSpec.width);
    assertEquals(makeMeasureSpec(310, EXACTLY), mSpec.height);

    // height
    mSpec.width = makeMeasureSpec(410, EXACTLY);
    mSpec.height = makeMeasureSpec(310, UNSPECIFIED);
=====================================================================
Found a 8 line (35 tokens) duplication in the following files: 
Starting at line 74 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\callercontext\ContextChain.java
Starting at line 140 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\callercontext\ContextChain.java

      if (mExtraData == null) {
        if (sUseConcurrentHashMap) {
          mExtraData = new ConcurrentHashMap<>();
        } else {
          mExtraData = new HashMap<>();
        }
      }
      mExtraData.putAll(extraData);
=====================================================================
Found a 5 line (35 tokens) duplication in the following files: 
Starting at line 34 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java

    map.put(k1, v1);
    return Collections.unmodifiableMap(map);
  }

  public static <K, V> Map<K, V> of(K k1, V v1, K k2, V v2) {
=====================================================================
Found a 9 line (35 tokens) duplication in the following files: 
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\HashCodeUtil.java
Starting at line 66 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\HashCodeUtil.java

        o4 == null ? 0 : o4.hashCode());
  }

  public static int hashCode(
      @Nullable Object o1,
      @Nullable Object o2,
      @Nullable Object o3,
      @Nullable Object o4,
      @Nullable Object o5) {
=====================================================================
Found a 9 line (35 tokens) duplication in the following files: 
Starting at line 133 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\AbstractDataSourceTest.java
Starting at line 171 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\AbstractDataSourceTest.java

    verifyState(mDataSource, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, throwable);
    // close
    mDataSource.close();
    verifySubscribers(NO_INTERACTIONS);
    verifyState(mDataSource, CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, throwable);
  }

  @Test
  public void testLifeCycle_IntermediateResult_LastResult_Close() {
=====================================================================
Found a 12 line (35 tokens) duplication in the following files: 
Starting at line 747 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 135 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanTest.java

      Rect margin,
      int drawableHeight,
      int fontAscent,
      int fontDescent,
      int expectedAscent,
      int expectedDescent,
      int fontTop,
      int fontBottom,
      int expectedTop,
      int expectedBottom) {
    mDescription = description;
    mAlignment = alignment;
=====================================================================
Found a 11 line (35 tokens) duplication in the following files: 
Starting at line 892 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java
Starting at line 961 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java

      mCallerContextVerifier.verifyCallerContext(callerContext, false);
    }

    try {
      ImageRequest.RequestLevel lowestPermittedRequestLevel =
          ImageRequest.RequestLevel.getMax(
              imageRequest.getLowestPermittedRequestLevel(), lowestPermittedRequestLevelOnSubmit);
      SettableProducerContext settableProducerContext =
          new SettableProducerContext(
              imageRequest,
              generateUniqueFutureId(),
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 135 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducer.java
Starting at line 123 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapProbeProducer.java

      @Override
      public void onNewResultImpl(
          @Nullable CloseableReference<CloseableImage> newResult, @Status int status) {
        try {
          if (FrescoSystrace.isTracing()) {
            FrescoSystrace.beginSection("BitmapMemoryCacheProducer#onNewResultImpl");
=====================================================================
Found a 12 line (35 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalExifThumbnailProducer.java
Starting at line 62 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalFetchProducer.java
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducer.java

            return ImmutableMap.of(CREATED_THUMBNAIL, Boolean.toString(result != null));
          }
        };
    producerContext.addCallbacks(
        new BaseProducerContextCallbacks() {
          @Override
          public void onCancellationRequested() {
            cancellableProducerRunnable.cancel();
          }
        });
    mExecutor.execute(cancellableProducerRunnable);
  }
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 55 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PriorityStarvingThrottlingProducer.java
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\ThrottlingProducer.java

    final ProducerListener2 producerListener = producerContext.getProducerListener();
    producerListener.onProducerStart(producerContext, PRODUCER_NAME);
    boolean delayRequest;
    synchronized (this) {
      if (mNumCurrentRequests >= mMaxSimultaneousRequests) {
        mPendingRequests.add(new Item<>(consumer, producerContext, time));
=====================================================================
Found a 4 line (35 tokens) duplication in the following files: 
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java
Starting at line 166 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java
Starting at line 180 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java
Starting at line 242 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java

    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener, times(2)).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener, times(2))
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, null);
=====================================================================
Found a 9 line (35 tokens) duplication in the following files: 
Starting at line 48 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java
Starting at line 47 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\QualifiedResourceFetchProducerTest.java

  @Mock public Consumer<EncodedImage> mConsumer;
  @Mock public ImageRequest mImageRequest;
  @Mock public ProducerListener2 mProducerListener;
  @Mock public Exception mException;
  @Mock public ImagePipelineConfig mConfig;

  private TestExecutorService mExecutor;
  private SettableProducerContext mProducerContext;
  private final String mRequestId = "mRequestId";
=====================================================================
Found a 13 line (35 tokens) duplication in the following files: 
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 82 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 61 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java
Starting at line 65 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\NetworkFetchProducerTest.java
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ThreadHandoffProducerTest.java

        new LocalAssetFetchProducer(mExecutor, mPooledByteBufferFactory, mAssetManager);

    mProducerContext =
        new SettableProducerContext(
            mImageRequest,
            mRequestId,
            mProducerListener,
            mock(Object.class),
            ImageRequest.RequestLevel.FULL_FETCH,
            false,
            true,
            Priority.MEDIUM,
            mConfig);
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

    mExecutor.runUntilIdle();

    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
=====================================================================
Found a 5 line (35 tokens) duplication in the following files: 
Starting at line 599 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 621 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 632 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

    mProducerContext2.setPriority(Priority.MEDIUM);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext1);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext2);
    assertEquals(Priority.HIGH, mMultiplexedContext1.getPriority());
    mProducerContext1.setPriority(Priority.LOW);
=====================================================================
Found a 7 line (35 tokens) duplication in the following files: 
Starting at line 141 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\NetworkFetchProducerTest.java
Starting at line 172 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\NetworkFetchProducerTest.java
Starting at line 183 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\NetworkFetchProducerTest.java

    verify(mProducerListener, times(0))
        .onProducerEvent(
            mProducerContext,
            NetworkFetchProducer.PRODUCER_NAME,
            NetworkFetchProducer.INTERMEDIATE_RESULT_PRODUCER_EVENT);
    // Test final result
    verify(mConsumer, times(1)).onNewResult(anyObject(), eq(Consumer.IS_LAST));
=====================================================================
Found a 7 line (35 tokens) duplication in the following files: 
Starting at line 139 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 167 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

        .containsExactlyElementsIn(toTestEntry(one, two, three))
        .inOrder();
    assertThat(fetcher.getLowPriQueue()).isEmpty();

    // Now, 'dontcare1' completes downloading. We expect 'one' to be sent to the fetcher.
    fetcher.onFetchCompletion(dontcare1, 4317);
    verify(delegate).fetch(eq(one.delegatedState), any(NetworkFetcher.Callback.class));
=====================================================================
Found a 4 line (35 tokens) duplication in the following files: 
Starting at line 518 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 530 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 536 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 542 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, false);
    assertThat(fetcher.getExtraMap(one, 123))
        .containsEntry("request_initial_priority_is_high", "false");
    assertThat(fetcher.getExtraMap(one, 123)).containsEntry("priority_changed_count", "0");
=====================================================================
Found a 5 line (35 tokens) duplication in the following files: 
Starting at line 725 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 834 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 979 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

        .onFailure(new Exception());

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri2);
    assertThat(fetcher.getHiPriQueue()).isEmpty();
    assertThat(fetcher.getLowPriQueue()).containsExactly(hipri1);
=====================================================================
Found a 5 line (35 tokens) duplication in the following files: 
Starting at line 119 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java
Starting at line 130 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

    mStatefulProducerRunnable.cancel();
    verify(mConsumer).onCancellation();
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithCancellation(mProducerContext, PRODUCER_NAME, mCancellationMap);
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ThumbnailSizeCheckerTest.java
Starting at line 132 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ThumbnailSizeCheckerTest.java

      int additionalRequestWidth, int additionalRequestHeight) {
    for (int i = 0; i < TEST_COUNT; i++) {
      ResizeOptions resizeOptions =
          new ResizeOptions(
              REQUEST_WIDTHS[i] + additionalRequestWidth,
              REQUEST_HEIGHTS[i] + additionalRequestHeight);
=====================================================================
Found a 14 line (35 tokens) duplication in the following files: 
Starting at line 593 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 456 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

      ExclusixeEntries.remove(key);
      oldEntries.add(mCachedEntries.remove(key));
    }
    return oldEntries;
  }

  /**
   * Notifies the client that the cache no longer tracks the given items.
   *
   * <p>This method invokes the external {@link CloseableReference#close} method, so it must not be
   * called while holding the <code>this</code> lock.
   */
  private void maybeClose(
      @Nullable ArrayList<Entry<K, V>> oldEntries1, @Nullable ArrayList<Entry<K, V>> oldEntries2) {
=====================================================================
Found a 3 line (35 tokens) duplication in the following files: 
Starting at line 611 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 658 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 468 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java
Starting at line 497 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

  private void maybeClose(@Nullable ArrayList<Entry<K, V>> oldEntries) {
    if (oldEntries != null) {
      for (Entry<K, V> oldEntry : oldEntries) {
=====================================================================
Found a 3 line (35 tokens) duplication in the following files: 
Starting at line 639 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 645 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 484 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java
Starting at line 490 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

  private static <K, V> void maybeNotifyExclusiveEntryRemoval(@Nullable Entry<K, V> entry) {
    if (entry != null && entry.observer != null) {
      entry.observer.onExclusivityChanged(entry.key, false);
=====================================================================
Found a 4 line (35 tokens) duplication in the following files: 
Starting at line 209 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 175 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 192 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 215 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
    cachedRef.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
=====================================================================
Found a 4 line (35 tokens) duplication in the following files: 
Starting at line 251 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 277 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 309 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> cachedRef =
        mCache.cache(KEY, newReference(100), mEntryStateObserver);
    cachedRef.close();
    verify(mEntryStateObserver).onExclusivityChanged(KEY, true);
=====================================================================
Found a 13 line (35 tokens) duplication in the following files: 
Starting at line 506 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 599 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 693 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 990 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1023 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1074 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1134 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1230 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1279 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1388 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1472 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  public void testEviction_ByTotalCount() {
    mCache =
        createDummyAdaptiveCountingMemoryCache(
            mParamsSupplier,
            mCacheTrimStrategy,
            mValueDescriptor,
            100,
            1,
            2,
            initialLFUCacheFractionPromil);
    // value 5 cannot fit the cache
    CloseableReference<Integer> originalRef1 = newReference(10);
    CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);
=====================================================================
Found a 5 line (35 tokens) duplication in the following files: 
Starting at line 1056 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1498 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1566 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    assertExclusivelyOwned(KEYS[2], 20);

    // add item2 to MFU, as a result item1 should be evicted
    CloseableReference<Integer> originalRef3 = newReference(30);
    CloseableReference<Integer> valueRef3 = mCache.cache(KEYS[3], originalRef3);
=====================================================================
Found a 5 line (35 tokens) duplication in the following files: 
Starting at line 1299 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1344 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    assertMFUExclusivelyOwned(KEYS[1], 10);

    // insert item2 to MFU
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2a = mCache.cache(KEYS[2], originalRef2);
=====================================================================
Found a 5 line (35 tokens) duplication in the following files: 
Starting at line 1309 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1352 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    assertMFUExclusivelyOwned(KEYS[2], 20);

    // insert item3 to MFU, the cache should evict item1 and insert it to the MFU ghost list
    CloseableReference<Integer> originalRef3 = newReference(30);
    CloseableReference<Integer> valueRef3a = mCache.cache(KEYS[3], originalRef3);
=====================================================================
Found a 5 line (35 tokens) duplication in the following files: 
Starting at line 174 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 208 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java

  public void testRemoveAll() {
    mCountingLruMap.put("key1", 110);
    mCountingLruMap.put("key2", 120);
    mCountingLruMap.put("key3", 130);
    mCountingLruMap.put("key4", 140);
=====================================================================
Found a 5 line (35 tokens) duplication in the following files: 
Starting at line 365 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 441 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 517 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

  public void testEviction_ByTotalCount() {
    // value 5 cannot fit the cache
    CloseableReference<Integer> originalRef1 = newReference(110);
    CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);
    originalRef1.close();
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\main\java\com\facebook\imagepipeline\platform\KitKatPurgeableDecoder.java
Starting at line 88 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-native\src\main\java\com\facebook\imagepipeline\platform\KitKatPurgeableDecoder.java

      Bitmap bitmap = BitmapFactory.decodeByteArray(encodedBytesArray, 0, length, options);
      return Preconditions.checkNotNull(bitmap, "BitmapFactory returned null");
    } finally {
      CloseableReference.closeSafely(encodedBytesArrayRef);
    }
  }
=====================================================================
Found a 7 line (35 tokens) duplication in the following files: 
Starting at line 74 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\main\java\com\facebook\imagepipeline\memory\AshmemMemoryChunk.java
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\main\java\com\facebook\imagepipeline\memory\NativeMemoryChunk.java
Starting at line 56 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\main\java\com\facebook\imagepipeline\memory\BufferMemoryChunk.java

  }

  @Override
  public synchronized int write(
      final int memoryOffset, final byte[] byteArray, final int byteArrayOffset, final int count) {
    Preconditions.checkNotNull(byteArray);
    Preconditions.checkNotNull(mByteBuffer);
=====================================================================
Found a 1 line (35 tokens) duplication in the following files: 
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java

    mData = new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
=====================================================================
Found a 5 line (35 tokens) duplication in the following files: 
Starting at line 62 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\testing\FakeAshmemMemoryChunk.java
Starting at line 62 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\testing\FakeNativeMemoryChunk.java

    FakeAshmemMemoryChunk that = (FakeAshmemMemoryChunk) other;
    int numToCopy = Math.min(count, mBuf.length - offset);
    System.arraycopy(mBuf, offset, that.mBuf, otherOffset, numToCopy);
  }
}
=====================================================================
Found a 4 line (35 tokens) duplication in the following files: 
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\main\java\com\facebook\imagepipeline\memory\NativeMemoryChunk.java
Starting at line 73 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\main\java\com\facebook\imagepipeline\memory\BufferMemoryChunk.java

  public synchronized int write(
      final int memoryOffset, final byte[] byteArray, final int byteArrayOffset, final int count) {
    Preconditions.checkNotNull(byteArray);
    Preconditions.checkState(!isClosed());
=====================================================================
Found a 4 line (35 tokens) duplication in the following files: 
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\main\java\com\facebook\imagepipeline\memory\NativeMemoryChunk.java
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\main\java\com\facebook\imagepipeline\memory\BufferMemoryChunk.java

  public synchronized int read(
      final int memoryOffset, final byte[] byteArray, final int byteArrayOffset, final int count) {
    Preconditions.checkNotNull(byteArray);
    Preconditions.checkState(!isClosed());
=====================================================================
Found a 5 line (35 tokens) duplication in the following files: 
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\native-filters\src\main\java\com\facebook\imagepipeline\nativecode\NativeRoundingFilter.java
Starting at line 61 of C:\Users\anaca\Documents\Projetos\fresco\native-filters\src\main\java\com\facebook\imagepipeline\nativecode\NativeRoundingFilter.java

  public static void toCircle(Bitmap bitmap, boolean antiAliased) {
    Preconditions.checkNotNull(bitmap);
    if (bitmap.getWidth() < 3 || bitmap.getHeight() < 3) {
      return; // Image too small to round
    }
=====================================================================
Found a 4 line (35 tokens) duplication in the following files: 
Starting at line 38 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\androidTest\java\com\facebook\samples\scrollperf\data\impl\InfiniteSimpleAdapterTest.java
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\androidTest\java\com\facebook\samples\scrollperf\data\impl\InfiniteSimpleAdapterTest.java
Starting at line 21 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\androidTest\java\com\facebook\samples\scrollperf\data\impl\LocalResourceSimpleAdapterTest.java
Starting at line 32 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\androidTest\java\com\facebook\samples\scrollperf\data\impl\LocalResourceSimpleAdapterTest.java

  public void testInfiniteAdapter() {
    final Context context = getContext();
    final Resources res = context.getResources();
    final String[] uris = res.getStringArray(R.array.local_uri_test);
=====================================================================
Found a 10 line (35 tokens) duplication in the following files: 
Starting at line 57 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\main\java\com\facebook\samples\scrollperf\fragments\recycler\DraweeViewListAdapter.java
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\SimpleScaleTypeAdapter.java
Starting at line 142 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java

    return mSimpleAdapter.get(position);
  }

  @Override
  public long getItemId(int position) {
    return position;
  }

  @Override
  public View getView(int position, View convertView, ViewGroup parent) {
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRotationFragment.java
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\pjpeg\ImageFormatProgressiveJpegFragment.java

    spinner.setAdapter(adapter);
    spinner.setOnItemSelectedListener(
        new AdapterView.OnItemSelectedListener() {
          @Override
          public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
            final SimpleRotationOptionsAdapter.Entry spinnerEntry =
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeScaleTypeFragment.java
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineBitmapFactoryFragment.java
Starting at line 82 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java

    mSpinner.setAdapter(adapter);
    mSpinner.setOnItemSelectedListener(
        new AdapterView.OnItemSelectedListener() {
          @Override
          public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
            final SimpleScaleTypeAdapter.Entry spinnerEntry =
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\RetainingDataSourceSupplierFragment.java
Starting at line 47 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\datauri\ImageFormatDataUriFragment.java

    return inflater.inflate(R.layout.fragment_drawee_retaining_supplier, container, false);
  }

  @Override
  public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
    final SimpleDraweeView simpleDraweeView = view.findViewById(R.id.drawee_view);
=====================================================================
Found a 10 line (35 tokens) duplication in the following files: 
Starting at line 54 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 60 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\pjpeg\ImageFormatProgressiveJpegFragment.java

    return inflater.inflate(R.layout.fragment_format_gif, container, false);
  }

  @Override
  public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {

    mSpinnerEntries =
        new Entry[] {
          new Entry(
              R.string.format_gif_label_small,
=====================================================================
Found a 6 line (35 tokens) duplication in the following files: 
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\FrescoDrawable2ImplTest.java
Starting at line 98 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\FrescoDrawable2ImplTest.java
Starting at line 111 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\FrescoDrawable2ImplTest.java

    mFrescoDrawable.close();

    Assert.assertNull(mFrescoDrawable.mImageReference);
    Assert.assertTrue(mCloseableImage.isClosed());
    Assert.assertTrue(mLatch.await(3, TimeUnit.SECONDS));
  }
=====================================================================
Found a 12 line (34 tokens) duplication in the following files: 
Starting at line 180 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\main\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryImpl.java
Starting at line 206 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\main\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryImpl.java

        mAnimatedDrawableBackendProvider.get(tempResult, null);
    AnimatedImageCompositor animatedImageCompositor =
        new AnimatedImageCompositor(
            drawableBackend,
            mIsNewRenderImplementation,
            new AnimatedImageCompositor.Callback() {
              @Override
              public void onIntermediateResult(int frameNumber, Bitmap bitmap) {
                // Don't care.
              }

              @Override
=====================================================================
Found a 8 line (34 tokens) duplication in the following files: 
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\fresco\animation\bitmap\cache\FrescoFrameCacheTest.java
Starting at line 86 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\fresco\animation\bitmap\cache\FrescoFrameCacheTest.java

    when(mUnderlyingBitmap.isRecycled()).thenReturn(true);

    CloseableReference<Bitmap> extractedReference =
        FrescoFrameCache.convertToBitmapReferenceAndClose(mImageReference);

    // We only detach the reference and do not care if the bitmap is valid
    assertThat(extractedReference).isNotNull();
    assertThat(extractedReference.get()).isEqualTo(mUnderlyingBitmap);
=====================================================================
Found a 12 line (34 tokens) duplication in the following files: 
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\fresco\animation\bitmap\cache\FrescoFrameCacheTest.java
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\fresco\animation\bitmap\cache\FrescoFrameCacheTest.java

    when(mCloseableStaticBitmap.cloneUnderlyingBitmapReference()).thenReturn(null);

    CloseableReference<Bitmap> extractedReference =
        FrescoFrameCache.convertToBitmapReferenceAndClose(mImageReference);

    // We only detach the reference and do not care if the bitmap is valid
    assertThat(extractedReference).isNull();
    verify(mImageReference).close();
  }

  @Test
  public void testExtractAndClose_whenImageReferenceInvalid_thenReturnNull() throws Exception {
=====================================================================
Found a 3 line (34 tokens) duplication in the following files: 
Starting at line 259 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 278 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    verify(mBitmapFrameRenderer).renderFrame(1, mBitmap);
    verify(mCanvas).drawBitmap(eq(mBitmap), eq(0f), eq(0f), any(Paint.class));
    verifyFramePreparationStrategyCalled(1);
=====================================================================
Found a 17 line (34 tokens) duplication in the following files: 
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\main\java\com\facebook\animated\webp\WebPImage.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\main\java\com\facebook\animated\webp\WebPImage.java

    byteBuffer.put(source);
    byteBuffer.rewind();

    WebPImage image = nativeCreateFromDirectByteBuffer(byteBuffer);
    if (options != null) {
      image.mDecodeBitmapConfig = options.animatedBitmapConfig;
    }
    return image;
  }

  /**
   * Creates a {@link WebPImage} from a ByteBuffer containing the image. This will throw if it fails
   * to create.
   *
   * @param byteBuffer the ByteBuffer containing the image
   */
  public static WebPImage createFromByteBuffer(
=====================================================================
Found a 13 line (34 tokens) duplication in the following files: 
Starting at line 181 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 207 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 234 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 261 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 288 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 315 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 340 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 367 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 401 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 437 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 465 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java

    public static final ScaleType INSTANCE = new ScaleTypeFitXY();

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float dx = parentRect.left;
=====================================================================
Found a 5 line (34 tokens) duplication in the following files: 
Starting at line 298 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java
Starting at line 314 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java
Starting at line 319 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java

    InOrder inOrder = inOrder(listener1, listener2);

    mController.getControllerListener().onRelease("id");
    inOrder.verify(listener1, never()).onRelease(anyString());
    inOrder.verify(listener2, never()).onRelease(anyString());
=====================================================================
Found a 6 line (34 tokens) duplication in the following files: 
Starting at line 115 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\DrawableTestUtils.java
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\DrawableTestUtils.java

        .setCallback(any(Drawable.Callback.class));
    doAnswer(
            new Answer() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                if (callback.get() != null) {
=====================================================================
Found a 3 line (34 tokens) duplication in the following files: 
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 139 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 368 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java

    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[2]);
=====================================================================
Found a 3 line (34 tokens) duplication in the following files: 
Starting at line 91 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 181 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 208 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 246 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 389 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 407 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 84 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 98 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 176 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 203 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 241 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 377 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 395 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
=====================================================================
Found a 3 line (34 tokens) duplication in the following files: 
Starting at line 156 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 71 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 132 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 356 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
=====================================================================
Found a 6 line (34 tokens) duplication in the following files: 
Starting at line 73 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 174 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 242 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

  public void testHierarchy_WithScaleType() throws Exception {
    GenericDraweeHierarchy dh =
        mBuilder
            .setPlaceholderImage(mPlaceholderImage, ScaleType.CENTER)
            .setRetryImage(mRetryImage, ScaleType.FIT_CENTER)
            .setFailureImage(mFailureImage, ScaleType.CENTER_INSIDE)
=====================================================================
Found a 6 line (34 tokens) duplication in the following files: 
Starting at line 100 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 406 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

            .setPlaceholderImage(mPlaceholderImage, null)
            .setRetryImage(mRetryImage, null)
            .setFailureImage(mFailureImage, null)
            .setProgressBarImage(mProgressBarImage, null)
            .setActualImageScaleType(null)
            .build();
=====================================================================
Found a 6 line (34 tokens) duplication in the following files: 
Starting at line 149 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\DraweeHolderTest.java
Starting at line 175 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\DraweeHolderTest.java

  public void testSetNewHierarchyWithInvalidController() {
    final DraweeHierarchy draweeHierarchy2 = DraweeMocks.mockDraweeHierarchyOf(mTopLevelDrawable);
    final DraweeHolder draweeHolder2 = new DraweeHolder(draweeHierarchy2);

    mDraweeHolder.setController(mController);
    draweeHolder2.setController(mController);
=====================================================================
Found a 7 line (34 tokens) duplication in the following files: 
Starting at line 425 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\main\java\com\facebook\drawee\backends\pipeline\PipelineDraweeController.java
Starting at line 861 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java

      CloseableReference<CloseableImage> closeableImage = mMemoryCache.get(mCacheKey);
      if (closeableImage != null && !closeableImage.get().getQualityInfo().isOfFullQuality()) {
        closeableImage.close();
        return null;
      }
      return closeableImage;
    } finally {
=====================================================================
Found a 4 line (34 tokens) duplication in the following files: 
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\main\java\com\facebook\drawee\backends\pipeline\PipelineDraweeControllerBuilder.java
Starting at line 835 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java

    CacheKey cacheKey = null;
    if (cacheKeyFactory != null && imageRequest != null) {
      if (imageRequest.getPostprocessor() != null) {
        cacheKey = cacheKeyFactory.getPostprocessedBitmapCacheKey(imageRequest, getCallerContext());
=====================================================================
Found a 3 line (34 tokens) duplication in the following files: 
Starting at line 128 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java

  public static void v(Class<?> cls, String msg, Object... args) {
    if (sHandler.isLoggable(VERBOSE)) {
      sHandler.v(getTag(cls), formatString(msg, args));
=====================================================================
Found a 3 line (34 tokens) duplication in the following files: 
Starting at line 225 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java
Starting at line 231 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java

  public static void d(Class<?> cls, String msg, Object... args) {
    if (sHandler.isLoggable(DEBUG)) {
      sHandler.d(getTag(cls), formatString(msg, args));
=====================================================================
Found a 3 line (34 tokens) duplication in the following files: 
Starting at line 418 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java
Starting at line 424 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java

  public static void e(Class<?> cls, String msg, Object... args) {
    if (sHandler.isLoggable(ERROR)) {
      sHandler.e(getTag(cls), formatString(msg, args));
=====================================================================
Found a 3 line (34 tokens) duplication in the following files: 
Starting at line 466 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java
Starting at line 472 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java

  public static void wtf(Class<?> cls, String msg, Object... args) {
    if (sHandler.isLoggable(ERROR)) {
      sHandler.wtf(getTag(cls), formatString(msg, args));
=====================================================================
Found a 10 line (34 tokens) duplication in the following files: 
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\datasource\FirstAvailableDataSourceSupplier.java
Starting at line 114 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\datasource\RetainingDataSourceSupplier.java

    private void closeSafely(@Nullable DataSource<T> dataSource) {
      if (dataSource != null) {
        dataSource.close();
      }
    }

    private class InternalDataSubscriber implements DataSubscriber<T> {

      @Override
      public void onFailure(DataSource<T> dataSource) {
=====================================================================
Found a 8 line (34 tokens) duplication in the following files: 
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java
Starting at line 133 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java

    assertEquals(mFinalResult, actual);

    verify(mCountDownLatch, times(1)).await();
    verify(mCountDownLatch, times(1)).countDown();
  }

  @Test
  public void testWaitForFinalResult_whenOnlyIntermediateResult_thenNoUpdate() throws Throwable {
=====================================================================
Found a 11 line (34 tokens) duplication in the following files: 
Starting at line 91 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 130 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, mSrc2, NOT_CLOSED, FINISHED, WITH_RESULT, val2b, FAILED, throwable);

    testClose(dataSource, mSrc2);
    verifyState(dataSource, null, CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, throwable);
  }

  /**
   * All data sources failed, first two data sources produced intermediate results. Only first kept.
   */
  @Test
  public void testLifecycle_I1_F1_I2_F2_F3_C() {
=====================================================================
Found a 9 line (34 tokens) duplication in the following files: 
Starting at line 172 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 200 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 186 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 238 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 264 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 290 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 310 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 413 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 446 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);

    testClose(dataSource, mSrc1);
    verifyState(dataSource, null, CLOSED, FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
  }

  /** First data source succeeded, with multiple intermediate results. */
  @Test
  public void testLifecycle_I1_I1_S1_C() {
=====================================================================
Found a 5 line (34 tokens) duplication in the following files: 
Starting at line 210 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 399 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifySubscriber(dataSource, mSrc2, NO_INTERACTIONS);
    verifyState(dataSource, mSrc3, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val3a, NOT_FAILED, null);

    Object val3b = mock(Object.class);
    setState(mSrc3, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val3b, NOT_FAILED, null);
=====================================================================
Found a 8 line (34 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 98 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00, // Precision: 0 Id: 0
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
        (byte) 0xff,
=====================================================================
Found a 8 line (34 tokens) duplication in the following files: 
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 353 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 354 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 355 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x05,
        (byte) 0x01,
        (byte) 0x01,
        (byte) 0x01,
        (byte) 0x01,
        (byte) 0x01,
        (byte) 0x01,
        (byte) 0x00,
=====================================================================
Found a 9 line (34 tokens) duplication in the following files: 
Starting at line 144 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java
Starting at line 362 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\bitmaps\EmptyJpegGenerator.java

        (byte) 0x00,
        (byte) 0x00,
        (byte) 0x00,
        (byte) 0x00,
        (byte) 0x00,
        (byte) 0x00,
        (byte) 0x00,
        // Huffman code values
        (byte) 0x00,
=====================================================================
Found a 4 line (34 tokens) duplication in the following files: 
Starting at line 132 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\DiskCacheReadProducer.java
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducer.java

      Consumer<EncodedImage> consumer, ProducerContext producerContext) {
    if (producerContext.getLowestPermittedRequestLevel().getValue()
        >= ImageRequest.RequestLevel.DISK_CACHE.getValue()) {
      producerContext.putOriginExtra("disk", "nil-result_read");
=====================================================================
Found a 9 line (34 tokens) duplication in the following files: 
Starting at line 241 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\CloseableProducerToDataSourceAdapterTest.java
Starting at line 209 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

    mInternalConsumer.onNewResult(mResultRef2, Consumer.NO_FLAGS);
    verifyClosed(NOT_FINISHED, null);
    testSubscribe(NO_INTERACTIONS);
  }

  @Test
  public void test_C_L_a() {
    testClose(NOT_FINISHED, 1);
    mInternalConsumer.onNewResult(mResultRef2, Consumer.IS_LAST);
=====================================================================
Found a 2 line (34 tokens) duplication in the following files: 
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\decoder\ProgressiveJpegParserTest.java
Starting at line 96 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\decoder\ProgressiveJpegParserTest.java

          (byte) 0xff, (byte) 0xd8, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xda,
          (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0xff, (byte) 0xff, (byte) 0xff,
=====================================================================
Found a 7 line (34 tokens) duplication in the following files: 
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 111 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 148 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java

    assertEquals(0, encodedImage.getRotationAngle());
    assertEquals(-1, encodedImage.getWidth());
    assertEquals(-1, encodedImage.getHeight());
  }

  @Test
  public void testOnNewResultNotLastNotJpeg() {
=====================================================================
Found a 5 line (34 tokens) duplication in the following files: 
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 144 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java

    setupBitmapCacheGetSuccess();
    when(mProducerContext.getLowestPermittedRequestLevel())
        .thenReturn(ImageRequest.RequestLevel.BITMAP_MEMORY_CACHE);
    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(mFinalImageReference, Consumer.IS_LAST);
=====================================================================
Found a 5 line (34 tokens) duplication in the following files: 
Starting at line 199 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 414 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 329 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SwallowResultProducerTest.java
Starting at line 140 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SwallowResultProducerTest.java

  private class ProduceResultsFailureAnswer implements Answer<Void> {
    @Override
    public Void answer(InvocationOnMock invocation) throws Throwable {
      Consumer consumer = (Consumer) invocation.getArguments()[0];
      consumer.onFailure(mException);
=====================================================================
Found a 5 line (34 tokens) duplication in the following files: 
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 298 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 314 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    setupBitmapMemoryCacheGetSuccess();
    when(mProducerContext.getLowestPermittedRequestLevel())
        .thenReturn(ImageRequest.RequestLevel.BITMAP_MEMORY_CACHE);
    mBitmapMemoryCacheProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(mFinalImageReference, Consumer.IS_LAST);
=====================================================================
Found a 6 line (34 tokens) duplication in the following files: 
Starting at line 141 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 155 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    setupInputProducerStreamingSuccess();
    when(mMemoryCache.get(mBitmapMemoryCacheKey)).thenReturn(null);

    mBitmapMemoryCacheProducer.produceResults(mConsumer, mProducerContext);

    verify(mConsumer).onNewResult(mIntermediateImageReference, Consumer.NO_FLAGS);
=====================================================================
Found a 11 line (34 tokens) duplication in the following files: 
Starting at line 434 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 72 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalAssetFetchProducerTest.java
Starting at line 61 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 84 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 63 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java
Starting at line 69 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalResourceFetchProducerTest.java
Starting at line 66 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\NetworkFetchProducerTest.java
Starting at line 42 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ThreadHandoffProducerTest.java

    mProducerContext =
        new SettableProducerContext(
            mImageRequest,
            mRequestId,
            mProducerListener,
            mock(Object.class),
            ImageRequest.RequestLevel.FULL_FETCH,
            /* isPrefetch */ false,
            /* isIntermediateResultExpected */ true,
            Priority.MEDIUM,
            mConfig);
=====================================================================
Found a 5 line (34 tokens) duplication in the following files: 
Starting at line 243 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 333 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

    setupDiskCacheGetFailure(mDefaultBufferedDiskCache);
    setupInputProducerFailure();
    mDiskCacheReadProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
=====================================================================
Found a 5 line (34 tokens) duplication in the following files: 
Starting at line 245 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalFileFetchProducerTest.java
Starting at line 190 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

    mDiskCacheReadProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onFailure(mException);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
=====================================================================
Found a 6 line (34 tokens) duplication in the following files: 
Starting at line 393 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 101 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

    verify(mInputProducer, never()).produceResults(any(Consumer.class), eq(mProducerContext));
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithCancellation(mProducerContext, PRODUCER_NAME, null);
    verify(mProducerListener, never())
        .onProducerFinishWithFailure(
=====================================================================
Found a 4 line (34 tokens) duplication in the following files: 
Starting at line 101 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PostprocessedBitmapMemoryCacheProducerTest.java

    when(mProducerContext.getCallerContext()).thenReturn(mCallerContext);
    when(mProducerContext.getProducerListener()).thenReturn(mProducerListener);
    when(mProducerListener.requiresExtraMap(mProducerContext, PRODUCER_NAME)).thenReturn(true);
    when(mProducerContext.getLowestPermittedRequestLevel())
=====================================================================
Found a 3 line (34 tokens) duplication in the following files: 
Starting at line 124 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 189 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 206 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    setUpCacheEnabled(false);
    mEncodedMemoryCacheProducer.produceResults(mConsumer, mProducerContext);
    verify(mMemoryCache, never()).cache(any(CacheKey.class), any(CloseableReference.class));
=====================================================================
Found a 5 line (34 tokens) duplication in the following files: 
Starting at line 141 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 164 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 176 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 223 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 394 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java

    assertEquals(Consumer.NO_FLAGS, mJobScheduler.mStatus);
    assertEquals(0, mTestScheduledExecutorService.getPendingCount());
    assertEquals(0, mTestExecutorService.getPendingCount());
    assertEquals(0, mTestJobRunnable.jobs.size());
  }
=====================================================================
Found a 4 line (34 tokens) duplication in the following files: 
Starting at line 336 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 394 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java

    assertEquals(JobScheduler.JobState.IDLE, mJobScheduler.mJobState);
    assertEquals(0, mTestScheduledExecutorService.getPendingCount());
    assertEquals(0, mTestExecutorService.getPendingCount());
    assertEquals(2, mTestJobRunnable.jobs.size());
=====================================================================
Found a 4 line (34 tokens) duplication in the following files: 
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 114 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, true);
    assertThat(fetcher.getHiPriQueue()).isEmpty();
    assertThat(fetcher.getLowPriQueue()).isEmpty();
    assertThat(fetcher.getCurrentlyFetching()).containsExactly(one);
=====================================================================
Found a 4 line (34 tokens) duplication in the following files: 
Starting at line 765 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 886 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 897 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 960 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 971 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 983 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    assertThat(fetcher.getCurrentlyFetching()).containsExactlyElementsIn(hiPriRequests);
    assertThat(fetcher.getHiPriQueue()).isEmpty();
    assertThat(fetcher.getLowPriQueue()).isEmpty();
    assertThat(fetcher.getDelayedQeueue()).isEmpty();
=====================================================================
Found a 6 line (34 tokens) duplication in the following files: 
Starting at line 817 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 879 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 953 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    assertThat(fetcher.getHiPriQueue()).containsExactly(hipri2);
    assertThat(fetcher.getLowPriQueue()).isEmpty();

    // Simulate 2 failures in hipri1, the request should be requeued.
    getOnlyElement(recordingNetworkFetcher.callbacks.get(hipri1.delegatedState))
        .onFailure(new Exception());
=====================================================================
Found a 4 line (34 tokens) duplication in the following files: 
Starting at line 887 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 909 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 961 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    assertThat(fetcher.getHiPriQueue()).isEmpty();
    assertThat(fetcher.getLowPriQueue()).isEmpty();
    assertThat(fetcher.getDelayedQeueue()).isEmpty();
    assertThat(hipri1.requeueCount).isEqualTo(1);
=====================================================================
Found a 4 line (34 tokens) duplication in the following files: 
Starting at line 683 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DiskStorageCacheTest.java
Starting at line 692 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DiskStorageCacheTest.java

    mCacheEventListenerInOrder.verify(mCacheEventListener).onHit(cacheEventCaptor.capture());

    for (CacheEvent event : cacheEventCaptor.getAllValues()) {
      CacheEventAssert.assertThat(event).isNotNull().hasCacheKey(key).hasResourceId(resourceId);
=====================================================================
Found a 9 line (34 tokens) duplication in the following files: 
Starting at line 728 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DiskStorageCacheTest.java
Starting at line 740 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DiskStorageCacheTest.java

        .onWriteException(cacheEventCaptor.capture());

    CacheEventAssert.assertThat(cacheEventCaptor.getValue())
        .isNotNull()
        .hasCacheKey(key)
        .hasException(exception);
  }

  private void verifyListenerOnReadException(CacheKey key, IOException exception) {
=====================================================================
Found a 4 line (34 tokens) duplication in the following files: 
Starting at line 402 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 290 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    AbstractAdaptiveCountingMemoryCache.Entry<String, Integer> entry1 =
        mCache.mCachedEntries.get(KEY);

    CloseableReference<Integer> cachedRef2 = mCache.cache(KEY, newReference(120));
=====================================================================
Found a 5 line (34 tokens) duplication in the following files: 
Starting at line 544 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 623 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    valueRef3.close();
    assertTotalSize(2, 70);
    assertExclusivelyOwnedSize(1, 30);
    assertNotCached(KEYS[1], 10);
    assertNotCached(KEYS[2], 20);
=====================================================================
Found a 8 line (34 tokens) duplication in the following files: 
Starting at line 701 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 998 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1031 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1548 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

            100,
            1,
            2,
            initialLFUCacheFractionPromil);

    // insert item1 to MFU
    CloseableReference<Integer> originalRef1 = newReference(10);
    CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);
=====================================================================
Found a 4 line (34 tokens) duplication in the following files: 
Starting at line 875 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 626 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 665 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    mCache.trim(memoryTrimType);
    assertSharedWithCount(KEYS[0], 100, 1);
    assertSharedWithCount(KEYS[1], 101, 1);
    assertSharedWithCount(KEYS[9], 109, 1);
=====================================================================
Found a 6 line (34 tokens) duplication in the following files: 
Starting at line 175 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\main\java\com\facebook\imagepipeline\memory\AshmemMemoryChunk.java
Starting at line 159 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\main\java\com\facebook\imagepipeline\memory\BufferMemoryChunk.java

    if (!(other instanceof AshmemMemoryChunk)) {
      throw new IllegalArgumentException("Cannot copy two incompatible MemoryChunks");
    }
    Preconditions.checkState(!isClosed());
    Preconditions.checkState(!other.isClosed());
    Preconditions.checkNotNull(mByteBuffer);
=====================================================================
Found a 9 line (34 tokens) duplication in the following files: 
Starting at line 102 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\bitmap\BitmapAnimationDebugFragment.java
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineRegionDecodingFragment.java
Starting at line 64 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\FrescoVitoLithoRegionDecodeFragment.java

              updateBitmapFrameCache(bitmapFrameCache);
            }
          };

  @Nullable
  @Override
  public View onCreateView(
      LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
    return inflater.inflate(R.layout.fragment_debug_bitmap, container, false);
=====================================================================
Found a 10 line (34 tokens) duplication in the following files: 
Starting at line 69 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\SimpleScaleTypeAdapter.java
Starting at line 215 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 195 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\pjpeg\ImageFormatProgressiveJpegFragment.java
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java
Starting at line 250 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java

  }

  @Override
  public long getItemId(int position) {
    return position;
  }

  @Override
  public View getView(int position, View convertView, ViewGroup parent) {
    final LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
=====================================================================
Found a 7 line (34 tokens) duplication in the following files: 
Starting at line 33 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRotationFragment.java
Starting at line 64 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java

  private Uri mUri;

  @Nullable
  @Override
  public View onCreateView(
      LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
    return inflater.inflate(R.layout.fragment_drawee_rotation, container, false);
=====================================================================
Found a 10 line (34 tokens) duplication in the following files: 
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRotationFragment.java
Starting at line 193 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineBitmapFactoryFragment.java
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java

    }

    @Override
    public long getItemId(int position) {
      return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
      final LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
=====================================================================
Found a 5 line (34 tokens) duplication in the following files: 
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeScaleTypeFragment.java
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineBitmapFactoryFragment.java

    mSpinner.setAdapter(adapter);
    mSpinner.setOnItemSelectedListener(
        new AdapterView.OnItemSelectedListener() {
          @Override
          public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
=====================================================================
Found a 7 line (34 tokens) duplication in the following files: 
Starting at line 22 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeSimpleFragment.java
Starting at line 33 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\webp\ImageFormatWebpFragment.java

public class DraweeSimpleFragment extends BaseShowcaseFragment {

  @Nullable
  @Override
  public View onCreateView(
      LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
    return inflater.inflate(R.layout.fragment_drawee_simple, container, false);
=====================================================================
Found a 8 line (34 tokens) duplication in the following files: 
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\RetainingDataSourceSupplierFragment.java
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineBitmapFactoryFragment.java

    mSampleUris = sampleUris().getSampleGifUris();
  }

  @Nullable
  @Override
  public View onCreateView(
      LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
    return inflater.inflate(R.layout.fragment_drawee_retaining_supplier, container, false);
=====================================================================
Found a 5 line (34 tokens) duplication in the following files: 
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\color\ImageFormatColorFragment.java
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 55 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\keyframes\ImageFormatKeyframesFragment.java
Starting at line 45 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\svg\ImageFormatSvgFragment.java
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\webp\ImageFormatWebpFragment.java

    final SwitchCompat switchBackground = (SwitchCompat) view.findViewById(R.id.switch_background);
    switchBackground.setOnCheckedChangeListener(
        new CompoundButton.OnCheckedChangeListener() {
          @Override
          public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
=====================================================================
Found a 5 line (34 tokens) duplication in the following files: 
Starting at line 142 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePrefetchFragment.java
Starting at line 157 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePrefetchFragment.java
Starting at line 172 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePrefetchFragment.java

            mPrefetchDiskButton.setEnabled(false);
            final PrefetchSubscriber subscriber = new PrefetchSubscriber();
            for (Uri uri : mUris) {
              final DataSource<Void> ds =
                  Fresco.getImagePipeline().prefetchToDiskCache(ImageRequest.fromUri(uri), null);
=====================================================================
Found a 4 line (34 tokens) duplication in the following files: 
Starting at line 64 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\MultiGestureListener.java
Starting at line 96 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\MultiGestureListener.java

  public synchronized void onLongPress(MotionEvent e) {
    final int size = mListeners.size();
    for (int i = 0; i < size; i++) {
      mListeners.get(i).onLongPress(e);
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 184 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\main\java\com\facebook\imagepipeline\animated\impl\AnimatedDrawableBackendImpl.java
Starting at line 205 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\main\java\com\facebook\imagepipeline\animated\impl\AnimatedDrawableBackendImpl.java

    AnimatedImageFrame frame = mAnimatedImage.getFrame(frameNumber);
    try {
      if (frame.getWidth() <= 0 || frame.getHeight() <= 0) {
        return; // Frame not visible -> skipping
      }

      if (mAnimatedImage.doesRenderSupportScaling()) {
=====================================================================
Found a 5 line (33 tokens) duplication in the following files: 
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\fresco\animation\bitmap\cache\FrescoFrameCacheTest.java
Starting at line 88 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\fresco\animation\bitmap\cache\FrescoFrameCacheTest.java

    CloseableReference<Bitmap> extractedReference =
        FrescoFrameCache.convertToBitmapReferenceAndClose(mImageReference);

    assertThat(extractedReference).isNotNull();
    assertThat(extractedReference.get()).isEqualTo(mUnderlyingBitmap);
=====================================================================
Found a 6 line (33 tokens) duplication in the following files: 
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\animated\impl\AnimatedFrameCacheTest.java
Starting at line 167 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\animated\impl\AnimatedFrameCacheTest.java

    assertFalse(mAnimatedFrameCache.contains(2));

    CloseableReference<CloseableImage> free = mAnimatedFrameCache.getForReuse();
    free.close();

    assertFalse(mAnimatedFrameCache.contains(1));
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 92 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    int backendIntrinsicHeight = AnimationBackend.INTRINSIC_DIMENSION_UNSET;
    setupBoundsAndRendererDimensions(
        boundsWidth, boundsHeight, backendIntrinsicWidth, backendIntrinsicHeight);

    mBitmapAnimationBackend.setBounds(mBounds);

    assertThat(mBitmapAnimationBackend.getIntrinsicWidth()).isEqualTo(boundsWidth);
=====================================================================
Found a 9 line (33 tokens) duplication in the following files: 
Starting at line 133 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 165 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

  public void testSetBoundsUpdatesIntrinsicDimensionsWhenBackendDimensionsSet() {
    int boundsWidth = 160;
    int boundsHeight = 90;
    int backendIntrinsicWidth = 260;
    int backendIntrinsicHeight = 300;
    setupBoundsAndRendererDimensions(
        boundsWidth, boundsHeight, backendIntrinsicWidth, backendIntrinsicHeight);

    mBitmapAnimationBackend.setBounds(mBounds);
=====================================================================
Found a 8 line (33 tokens) duplication in the following files: 
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 184 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    int backendIntrinsicHeight = AnimationBackend.INTRINSIC_DIMENSION_UNSET;
    setupBoundsAndRendererDimensions(
        boundsWidth, boundsHeight, backendIntrinsicWidth, backendIntrinsicHeight);

    mBitmapAnimationBackend.setBounds(null);

    assertThat(mBitmapAnimationBackend.getIntrinsicWidth())
        .isEqualTo(AnimationBackend.INTRINSIC_DIMENSION_UNSET);
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 236 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 252 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    when(mBitmapFrameCache.getCachedFrame(anyInt())).thenReturn(mBitmapRefererence);

    mBitmapAnimationBackend.drawFrame(mParentDrawable, mCanvas, 1);

    verify(mFrameListener).onDrawFrameStart(mBitmapAnimationBackend, 1);
    verify(mBitmapFrameCache).getCachedFrame(1);
    verify(mCanvas).drawBitmap(eq(mBitmap), eq(0f), eq(0f), any(Paint.class));
=====================================================================
Found a 13 line (33 tokens) duplication in the following files: 
Starting at line 32 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\main\java\com\facebook\animated\gif\GifFrame.java
Starting at line 139 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\main\java\com\facebook\animated\gif\GifImage.java
Starting at line 32 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\main\java\com\facebook\animated\webp\WebPFrame.java
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\main\java\com\facebook\animated\webp\WebPImage.java

  GifFrame(long nativeContext) {
    mNativeContext = nativeContext;
  }

  @Override
  protected void finalize() {
    nativeFinalize();
  }

  @Override
  public void dispose() {
    nativeDispose();
  }
=====================================================================
Found a 15 line (33 tokens) duplication in the following files: 
Starting at line 53 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\main\java\com\facebook\animated\gif\GifFrame.java
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\main\java\com\facebook\animated\gif\GifImage.java
Starting at line 53 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\main\java\com\facebook\animated\webp\WebPFrame.java

    return nativeGetDurationMs();
  }

  @Override
  public int getWidth() {
    return nativeGetWidth();
  }

  @Override
  public int getHeight() {
    return nativeGetHeight();
  }

  @Override
  public int getXOffset() {
=====================================================================
Found a 5 line (33 tokens) duplication in the following files: 
Starting at line 33 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif-lite\src\main\java\com\facebook\animated\giflite\drawable\GifAnimationBackend.java
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\main\java\com\facebook\animated\webpdrawable\WebpAnimationBackend.java

  public static GifAnimationBackend create(String filePath) throws IOException {
    InputStream is = null;
    try {
      is = new BufferedInputStream(new FileInputStream(filePath));
      is.mark(Integer.MAX_VALUE);
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 289 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\AbstractDraweeController.java
Starting at line 322 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\AbstractDraweeController.java

  public void addControllerListener(ControllerListener<? super INFO> controllerListener) {
    Preconditions.checkNotNull(controllerListener);
    if (mControllerListener instanceof InternalForwardingListener) {
      ((InternalForwardingListener<INFO>) mControllerListener).addListener(controllerListener);
=====================================================================
Found a 5 line (33 tokens) duplication in the following files: 
Starting at line 133 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 180 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 210 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 359 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java

  protected void onBoundsChange(Rect bounds) {
    for (int i = 0; i < mLayers.length; i++) {
      Drawable drawable = mLayers[i];
      if (drawable != null) {
        drawable.setBounds(bounds);
=====================================================================
Found a 16 line (33 tokens) duplication in the following files: 
Starting at line 197 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedColorDrawable.java
Starting at line 157 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedCornersDrawable.java
Starting at line 154 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedDrawable.java

  }

  /** Gets the border color. */
  @Override
  public int getBorderColor() {
    return mBorderColor;
  }

  /** Gets the border width. */
  @Override
  public float getBorderWidth() {
    return mBorderWidth;
  }

  @Override
  public void setPadding(float padding) {
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 195 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 222 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 276 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 303 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 355 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 389 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 425 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 453 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 481 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java

      outTransform.setScale(scaleX, scaleY);
      outTransform.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
    }

    @Override
    public String toString() {
      return "fit_xy";
=====================================================================
Found a 11 line (33 tokens) duplication in the following files: 
Starting at line 209 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 236 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 263 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 290 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 342 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 22 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float scale = Math.min(scaleX, scaleY);
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 304 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java
Starting at line 309 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java

    mController.addControllerListener(listener1);
    mController.getControllerListener().onRelease("id");
    inOrder.verify(listener1, times(1)).onRelease("id");
    inOrder.verify(listener2, never()).onRelease(anyString());
=====================================================================
Found a 3 line (33 tokens) duplication in the following files: 
Starting at line 251 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 266 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 326 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(0, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(FadeDrawable.TRANSITION_RUNNING, mFadeDrawable.mTransitionState);
=====================================================================
Found a 5 line (33 tokens) duplication in the following files: 
Starting at line 220 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ScaleTypeDrawableTest.java
Starting at line 236 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ScaleTypeDrawableTest.java
Starting at line 255 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ScaleTypeDrawableTest.java
Starting at line 267 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ScaleTypeDrawableTest.java

  public void testConfigureBounds_FOCUS_CROP_VT() {
    Rect bounds = new Rect(10, 10, 410, 310);
    int width = 200;
    int height = 300;
    PointF focusPoint = new PointF(0.5f, 0.1f);
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 138 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 156 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 166 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

        mBuilder.setPlaceholderImage(mPlaceholderImage, ScaleType.CENTER).build();
    RootDrawable rootDrawable = (RootDrawable) dh.getTopLevelDrawable();
    FadeDrawable fadeDrawable = (FadeDrawable) rootDrawable.getCurrent();
    assertScaleTypeAndDrawable(mPlaceholderImage, ScaleType.CENTER, fadeDrawable.getDrawable(1));
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 343 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 358 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 372 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 378 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 387 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 393 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 439 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 465 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 492 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 530 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 569 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 607 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(ColorDrawable.class, actualImageSettableDrawable.getCurrent().getClass());
    assertEquals(true, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 349 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 364 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(mActualImage1, actualImageSettableDrawable.getCurrent());
    assertEquals(false, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(FadeDrawable.TRANSITION_STARTING, fadeDrawable.getTransitionState());
=====================================================================
Found a 5 line (33 tokens) duplication in the following files: 
Starting at line 54 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java
Starting at line 63 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java
Starting at line 74 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\internal\ImmutableMap.java

    Map<K, V> map = new HashMap<>(4);
    map.put(k1, v1);
    map.put(k2, v2);
    map.put(k3, v3);
    map.put(k4, v4);
=====================================================================
Found a 8 line (33 tokens) duplication in the following files: 
Starting at line 142 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\statfs\StatFsHelper.java
Starting at line 170 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\statfs\StatFsHelper.java
Starting at line 198 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\statfs\StatFsHelper.java

  public long getFreeStorageSpace(StorageType storageType) {
    ensureInitialized();

    maybeUpdateStats();

    StatFs statFS = storageType == StorageType.INTERNAL ? mInternalStatFs : mExternalStatFs;
    if (statFS != null) {
      long blockSize, availableBlocks;
=====================================================================
Found a 6 line (33 tokens) duplication in the following files: 
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\datasource\FirstAvailableDataSourceSupplier.java
Starting at line 171 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\datasource\IncreasingQualityDataSourceSupplier.java

      DataSource<T> dataSourceWithResult = getDataSourceWithResult();
      return (dataSourceWithResult != null) ? dataSourceWithResult.getResult() : null;
    }

    @Override
    public synchronized boolean hasResult() {
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 273 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\datasource\IncreasingQualityDataSourceSupplier.java
Starting at line 114 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\datasource\RetainingDataSourceSupplier.java

    private void closeSafely(DataSource<T> dataSource) {
      if (dataSource != null) {
        dataSource.close();
      }
    }

    private class InternalDataSubscriber implements DataSubscriber<T> {
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\streams\LimitedInputStreamTest.java
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\streams\LimitedInputStreamTest.java

  public void testDoesMark() throws Exception {
    mLimitedStream.mark(BYTES_LENGTH);
    mLimitedStream.read(mReadBuffer);
    final byte[] readBufferCopy = Arrays.copyOf(mReadBuffer, mReadBuffer.length);
=====================================================================
Found a 5 line (33 tokens) duplication in the following files: 
Starting at line 278 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 295 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribe(mDataSourceSupplier1, mSrc1);

    testClose(dataSource, mSrc1);
    verifySubscriber(dataSource, null, ON_CANCELLATION);
    verifyState(dataSource, null, CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
=====================================================================
Found a 3 line (33 tokens) duplication in the following files: 
Starting at line 31 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 62 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 100 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 144 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 195 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 247 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 273 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 299 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 319 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 339 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 352 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 378 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 428 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    DataSource<Object> dataSource = getAndSubscribe();
    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribeM(mDataSourceSupplier1, mSrc1);
    DataSubscriber<Object> subscriber2 = verifyGetAndSubscribeM(mDataSourceSupplier2, mSrc2);
=====================================================================
Found a 6 line (33 tokens) duplication in the following files: 
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\datasource\BaseBitmapDataSubscriber.java
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\datasource\BaseBitmapReferenceDataSubscriber.java

  public void onNewResultImpl(DataSource<CloseableReference<CloseableImage>> dataSource) {
    if (!dataSource.isFinished()) {
      return;
    }

    CloseableReference<CloseableImage> closeableImageRef = dataSource.getResult();
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\memory\PoolFactory.java
Starting at line 146 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\memory\PoolFactory.java
Starting at line 180 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\memory\PoolFactory.java

        mBufferMemoryChunkPool =
            (MemoryChunkPool)
                cons.newInstance(
                    mConfig.getMemoryTrimmableRegistry(),
                    mConfig.getMemoryChunkPoolParams(),
                    mConfig.getMemoryChunkPoolStatsTracker());
      } catch (ClassNotFoundException e) {
=====================================================================
Found a 12 line (33 tokens) duplication in the following files: 
Starting at line 158 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapProbeProducer.java
Starting at line 186 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducer.java

          }
        }

        getConsumer().onNewResult(newResult, status);

      } finally {
        if (FrescoSystrace.isTracing()) {
          FrescoSystrace.endSection();
        }
      }
    }
  }
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\DiskCacheReadProducer.java
Starting at line 114 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PartialDiskCacheProducer.java

        onFinishDiskReads(consumer, producerContext);
    diskLookupTask.continueWith(continuation);
    subscribeTaskForRequestCancellation(isCancelled, producerContext);
  }

  private Continuation<EncodedImage, Void> onFinishDiskReads(
      final Consumer<EncodedImage> consumer, final ProducerContext producerContext) {
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 142 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducer.java
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedProbeProducer.java

    }

    @Override
    public void onNewResultImpl(@Nullable EncodedImage newResult, @Status int status) {
      try {
        if (FrescoSystrace.isTracing()) {
          FrescoSystrace.beginSection("EncodedMemoryCacheProducer#onNewResultImpl");
=====================================================================
Found a 8 line (33 tokens) duplication in the following files: 
Starting at line 40 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalThumbnailBitmapProducer.java
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducer.java

  public LocalThumbnailBitmapProducer(Executor executor, ContentResolver contentResolver) {
    mExecutor = executor;
    mContentResolver = contentResolver;
  }

  @Override
  public void produceResults(
      final Consumer<CloseableReference<CloseableImage>> consumer, final ProducerContext context) {
=====================================================================
Found a 6 line (33 tokens) duplication in the following files: 
Starting at line 461 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\MultiplexProducer.java
Starting at line 543 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\MultiplexProducer.java

      }

      while (iterator.hasNext()) {
        Pair<Consumer<T>, ProducerContext> pair = iterator.next();
        synchronized (pair) {
          pair.second
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 181 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\NetworkFetchProducer.java
Starting at line 358 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PartialDiskCacheProducer.java

      ProducerContext context) {
    CloseableReference<PooledByteBuffer> result =
        CloseableReference.of(pooledOutputStream.toByteBuffer());
    EncodedImage encodedImage = null;
    try {
      encodedImage = new EncodedImage(result);
      encodedImage.setBytesRange(responseBytesRange);
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\CloseableProducerToDataSourceAdapterTest.java
Starting at line 65 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

    mResultRef3 = CloseableReference.of(new Object(), mResourceReleaser);
    mException = mock(Exception.class);

    mDataSubscriber1 = mock(DataSubscriber.class);
    mDataSubscriber2 = mock(DataSubscriber.class);

    mSettableProducerContext = mock(SettableProducerContext.class);
=====================================================================
Found a 3 line (33 tokens) duplication in the following files: 
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 138 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 159 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 184 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java

    when(ImageFormatChecker.getImageFormat_WrapIOException(any(InputStream.class)))
        .thenAnswer((Answer<ImageFormat>) i -> DefaultImageFormats.JPEG);
    when(JfifUtil.getAutoRotateAngleFromOrientation(orientation)).thenReturn(rotationAngle);
=====================================================================
Found a 5 line (33 tokens) duplication in the following files: 
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 87 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

        .thenReturn(true);
    when(mProducerContext.getLowestPermittedRequestLevel())
        .thenReturn(ImageRequest.RequestLevel.FULL_FETCH);
    when(mProducerContext.getCallerContext()).thenReturn(PRODUCER_NAME);
    when(mCacheKeyFactory.getBitmapCacheKey(mImageRequest, PRODUCER_NAME)).thenReturn(mCacheKey);
=====================================================================
Found a 5 line (33 tokens) duplication in the following files: 
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "true");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, true);
    Assert.assertTrue(!mFinalImageReference.isValid());
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 50 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 44 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 42 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalExifThumbnailProducerTest.java

@RunWith(RobolectricTestRunner.class)
@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "androidx.*", "android.*"})
@Config(manifest = Config.NONE)
@PrepareForTest({JobScheduler.class, ProgressiveJpegParser.class, DecodeProducer.class})
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 159 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 177 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 195 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 292 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

    setupDiskCacheGetSuccess(mDefaultBufferedDiskCache);
    mDiskCacheReadProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 141 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 164 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 176 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 223 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 302 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 394 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java

    assertEquals(Consumer.NO_FLAGS, mJobScheduler.mStatus);
    assertEquals(0, mTestScheduledExecutorService.getPendingCount());
    assertEquals(0, mTestExecutorService.getPendingCount());
    assertEquals(0, mTestJobRunnable.jobs.size());
=====================================================================
Found a 6 line (33 tokens) duplication in the following files: 
Starting at line 211 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 205 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ThumbnailBranchProducerTest.java

  private void mockResizeOptions(int width, int height) {
    ResizeOptions resizeOptions = new ResizeOptions(width, height);
    when(mImageRequest.getResizeOptions()).thenReturn(resizeOptions);
  }

  private void produceResults() {
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

        .onProducerFinishWithCancellation(mProducerContext, PRODUCER_NAME, null);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
    verify(mConsumer).onCancellation();
=====================================================================
Found a 6 line (33 tokens) duplication in the following files: 
Starting at line 347 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 413 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

    mProducerContext1.setIsPrefetch(false);
    mProducerContext2.setIsPrefetch(false);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext1);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext2);
    assertFalse(mMultiplexedContext1.isPrefetch());
    mProducerContext2.cancel();
=====================================================================
Found a 5 line (33 tokens) duplication in the following files: 
Starting at line 557 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 567 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

    mProducerContext2.setPriority(Priority.HIGH);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext1);
    assertEquals(Priority.MEDIUM, mMultiplexedContext1.getPriority());
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext2);
    assertEquals(Priority.HIGH, mMultiplexedContext1.getPriority());
=====================================================================
Found a 5 line (33 tokens) duplication in the following files: 
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PostprocessedBitmapMemoryCacheProducerTest.java
Starting at line 146 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ResizeAndRotateProducerTest.java

    mImageRef1Clone = mImageRef1.clone();

    when(mProducerContext.getImageRequest()).thenReturn(mImageRequest);
    when(mProducerContext.getProducerListener()).thenReturn(mProducerListener);
    when(mProducerListener.requiresExtraMap(mProducerContext, PRODUCER_NAME)).thenReturn(true);
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 159 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 225 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 1023 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    fetch(fetcher, "dontcare2", callback, true);

    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, true);
    PriorityFetchState<FetchState> two = fetch(fetcher, "2", callback, true);
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 185 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 339 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 374 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 410 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    PriorityFetchState<FetchState> dontcare2 = fetch(fetcher, "dontcare2", callback, true);

    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, false);
    PriorityFetchState<FetchState> two = fetch(fetcher, "2", callback, false);
=====================================================================
Found a 12 line (33 tokens) duplication in the following files: 
Starting at line 280 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 480 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

            delayTime,
            false,
            false /* nonRecoverableExceptionPreventsRequeue */,
            1 /* maxConnectAttemptCount */,
            1 /* maxAttemptCount */,
            false /* retryLowPriAll */,
            false /* retryLowPriUnknownHostException */,
            false /* retryLowPriConnectionException */,
            clock);

    // add a hi-pri, it will be fetched immediately.
    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, true);
=====================================================================
Found a 6 line (33 tokens) duplication in the following files: 
Starting at line 521 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 556 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    assertThat(fetcher.getExtraMap(one, 123)).containsEntry("priority_changed_count", "0");

    // enqueue a hi-pri request in the queue
    PriorityFetchState<FetchState> two = fetch(fetcher, "2", callback, true);
    assertThat(fetcher.getExtraMap(two, 123))
        .containsEntry("request_initial_priority_is_high", "true");
=====================================================================
Found a 11 line (33 tokens) duplication in the following files: 
Starting at line 586 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 866 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 940 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

            0,
            false,
            false /* nonRecoverableExceptionPreventsRequeue */,
            1 /* maxConnectAttemptCount */,
            1 /* maxAttemptCount */,
            false /* retryLowPriAll */,
            false /* retryLowPriUnknownHostException */,
            false /* retryLowPriConnectionException */,
            clock);

    PriorityFetchState<FetchState> hipri1 = fetch(fetcher, "hipri1", callback, true);
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 594 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 640 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 712 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 748 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 811 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

            clock);

    PriorityFetchState<FetchState> hipri1 = fetch(fetcher, "hipri1", callback, true);
    PriorityFetchState<FetchState> hipri2 = fetch(fetcher, "hipri2", callback, true);
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 647 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 721 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 822 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 880 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 954 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    assertThat(fetcher.getLowPriQueue()).isEmpty();

    // Simulate a failure in hipri1.
    getOnlyElement(recordingNetworkFetcher.callbacks.get(hipri1.delegatedState))
        .onFailure(new Exception());

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
=====================================================================
Found a 23 line (33 tokens) duplication in the following files: 
Starting at line 157 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\bitmaps\PlatformBitmapFactory.java
Starting at line 228 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\bitmaps\PlatformBitmapFactory.java

    return createBitmap(source, x, y, width, height, null, false, callerContext);
  }

  /**
   * Creates a bitmap from subset of the source bitmap, transformed by the optional matrix. It is
   * initialized with the same density as the original bitmap.
   *
   * @param source The bitmap we are subsetting
   * @param x The x coordinate of the first pixel in source
   * @param y The y coordinate of the first pixel in source
   * @param width The number of pixels in each row
   * @param height The number of rows
   * @param matrix Optional matrix to be applied to the pixels
   * @param filter true if the source should be filtered. Only applies if the matrix contains more
   *     than just translation.
   * @return a reference to the bitmap
   * @throws IllegalArgumentException if the x, y, width, height values are outside of the
   *     dimensions of the source bitmap, or width is <= 0, or height is <= 0
   * @throws TooManyBitmapsException if the pool is full
   * @throws java.lang.OutOfMemoryError if the Bitmap cannot be allocated
   */
  public CloseableReference<Bitmap> createBitmap(
      Bitmap source, int x, int y, int width, int height, @Nullable Matrix matrix, boolean filter) {
=====================================================================
Found a 27 line (33 tokens) duplication in the following files: 
Starting at line 538 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\bitmaps\PlatformBitmapFactory.java
Starting at line 565 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\bitmaps\PlatformBitmapFactory.java

    return createBitmap(display, colors, 0, width, width, height, config, callerContext);
  }

  /**
   * Creates a bitmap with the specified width and height. Its initial density is determined from
   * the given DisplayMetrics.
   *
   * @param display Display metrics for the display this bitmap will be drawn on
   * @param colors The colors to write to the bitmap
   * @param offset The index of the first color to read from colors[]
   * @param stride The number of colors in pixels[] to skip between rows.
   * @param width The width of the bitmap
   * @param height The height of the bitmap
   * @param config The bitmap config to create
   * @return a reference to the bitmap
   * @throws IllegalArgumentException if the width or height are <= 0
   * @throws TooManyBitmapsException if the pool is full
   * @throws java.lang.OutOfMemoryError if the Bitmap cannot be allocated
   */
  public CloseableReference<Bitmap> createBitmap(
      DisplayMetrics display,
      int[] colors,
      int offset,
      int stride,
      int width,
      int height,
      Bitmap.Config config) {
=====================================================================
Found a 6 line (33 tokens) duplication in the following files: 
Starting at line 222 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 149 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

      Preconditions.checkState(notPresentInBoth);
      Entry<K, V> oldEntry = mCachedEntries.remove(key);
      if (oldEntry != null) {
        makeOrphan(oldEntry);
        oldRefToClose = referenceToClose(oldEntry);
      }
=====================================================================
Found a 5 line (33 tokens) duplication in the following files: 
Starting at line 266 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 197 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

      oldMFUExclusive = mMostFrequentlyUsedExclusiveEntries.remove(key);
      Entry<K, V> entry = mCachedEntries.get(key);
      if (entry != null) {
        clientRef = newClientReference(entry);
      } else {
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 519 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1094 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1207 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1490 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1558 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    originalRef1.close();
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 522 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 718 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1498 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1566 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    originalRef2.close();
    CloseableReference<Integer> originalRef3 = newReference(30);
    CloseableReference<Integer> valueRef3 = mCache.cache(KEYS[3], originalRef3);
    originalRef3.close();
=====================================================================
Found a 5 line (33 tokens) duplication in the following files: 
Starting at line 815 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 853 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 874 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 604 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 643 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 664 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    when(mCacheTrimStrategy.getTrimRatio(memoryTrimType)).thenReturn(1.00);
    mCache.trim(memoryTrimType);
    assertSharedWithCount(KEYS[0], 100, 1);
    assertSharedWithCount(KEYS[1], 101, 1);
    assertSharedWithCount(KEYS[2], 102, 1);
=====================================================================
Found a 5 line (33 tokens) duplication in the following files: 
Starting at line 1643 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1713 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  private void assertExclusivelyOwned(String key, Integer value) {
    assertTrue("key not found in the cache", mCache.mCachedEntries.contains(key));
    assertTrue(
        "key not found in the exclusives",
        mCache.mLeastFrequentlyUsedExclusiveEntries.contains(key)
=====================================================================
Found a 6 line (33 tokens) duplication in the following files: 
Starting at line 72 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\image\EncodedImageTest.java
Starting at line 93 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\image\EncodedImageTest.java

    EncodedImage encodedImage = new EncodedImage(mByteBufferRef);
    encodedImage.setImageFormat(DefaultImageFormats.JPEG);
    encodedImage.setRotationAngle(0);
    encodedImage.setExifOrientation(5);
    encodedImage.setWidth(1);
    encodedImage.setHeight(2);
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 99 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 99 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 99 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java

            16, new IntPair(1, 0),
            8, new IntPair(0, 1),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
  }

  private void testNewByteBuf_3(
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 112 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 115 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 112 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 115 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 112 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 115 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java

            16, new IntPair(1, 0),
            8, new IntPair(0, 0),
            4, new IntPair(0, 0)),
        mStats.getBucketStats());
  }

  private void testNewByteBuf_4(
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 133 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\bitmap\BitmapAnimationCacheSelectorConfigurator.java
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\utils\SampleAnimationBackendConfigurator.java
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeScaleTypeFragment.java
Starting at line 109 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 84 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineBitmapFactoryFragment.java
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java

    mSpinner.setOnItemSelectedListener(
        new AdapterView.OnItemSelectedListener() {
          @Override
          public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
=====================================================================
Found a 5 line (33 tokens) duplication in the following files: 
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRotationFragment.java
Starting at line 79 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRoundedCornersFragment.java
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeScaleTypeFragment.java
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeSpanSimpleTextFragment.java
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\pjpeg\ImageFormatProgressiveJpegFragment.java
Starting at line 84 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineBitmapFactoryFragment.java
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java

    spinner.setOnItemSelectedListener(
        new AdapterView.OnItemSelectedListener() {
          @Override
          public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
            final SimpleRotationOptionsAdapter.Entry spinnerEntry =
=====================================================================
Found a 7 line (33 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\override\ImageFormatOverrideExample.java
Starting at line 29 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\VitoViewSimpleFragment.java

  private static final ImageDecoder CUSTOM_COLOR_DECODER = ColorImageExample.createDecoder();

  @Nullable
  @Override
  public View onCreateView(
      LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
    return inflater.inflate(R.layout.fragment_format_override, container, false);
=====================================================================
Found a 4 line (33 tokens) duplication in the following files: 
Starting at line 53 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\MultiGestureListener.java
Starting at line 73 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\MultiGestureListener.java
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\MultiGestureListener.java
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\MultiGestureListener.java
Starting at line 115 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\MultiGestureListener.java
Starting at line 126 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\MultiGestureListener.java
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\MultiGestureListener.java
Starting at line 148 of C:\Users\anaca\Documents\Projetos\fresco\samples\zoomable\src\main\java\com\facebook\samples\zoomable\MultiGestureListener.java

  public synchronized boolean onSingleTapUp(MotionEvent e) {
    final int size = mListeners.size();
    for (int i = 0; i < size; i++) {
      if (mListeners.get(i).onSingleTapUp(e)) {
=====================================================================
Found a 7 line (32 tokens) duplication in the following files: 
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\main\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryImpl.java
Starting at line 115 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\main\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryImpl.java

          "To encode animated gif please add the dependency " + "to the animated-gif module");
    }
    final CloseableReference<PooledByteBuffer> bytesRef = encodedImage.getByteBufferRef();
    Preconditions.checkNotNull(bytesRef);
    try {
      final PooledByteBuffer input = bytesRef.get();
      AnimatedImage gifImage;
=====================================================================
Found a 8 line (32 tokens) duplication in the following files: 
Starting at line 141 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 173 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 188 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 203 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    mBitmapAnimationBackend.setBounds(mBounds);

    assertThat(mBitmapAnimationBackend.getIntrinsicWidth()).isEqualTo(backendIntrinsicWidth);
    assertThat(mBitmapAnimationBackend.getIntrinsicHeight()).isEqualTo(backendIntrinsicHeight);
  }

  @Test
  public void testSetBoundsUpdatesIntrinsicDimensionsWhenBackendDimensionsUnsetAndNullBounds() {
=====================================================================
Found a 3 line (32 tokens) duplication in the following files: 
Starting at line 241 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 259 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 278 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 325 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 351 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    verify(mBitmapFrameCache).getCachedFrame(1);
    verify(mCanvas).drawBitmap(eq(mBitmap), eq(0f), eq(0f), any(Paint.class));
    verifyFramePreparationStrategyCalled(1);
=====================================================================
Found a 4 line (32 tokens) duplication in the following files: 
Starting at line 131 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\preparation\DefaultBitmapFramePreparerTest.java
Starting at line 183 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\preparation\DefaultBitmapFramePreparerTest.java

    when(mPlatformBitmapFactory.createBitmap(
            BACKEND_INTRINSIC_WIDTH, BACKEND_INTRINSIC_HEIGHT, BITMAP_CONFIG))
        .thenReturn(mBitmapReference);
    when(mBitmapFrameRenderer.renderFrame(1, mBitmap)).thenReturn(true);
=====================================================================
Found a 15 line (32 tokens) duplication in the following files: 
Starting at line 53 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\main\java\com\facebook\animated\gif\GifFrame.java
Starting at line 53 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\main\java\com\facebook\animated\webp\WebPFrame.java
Starting at line 123 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\main\java\com\facebook\animated\webp\WebPImage.java

    return nativeGetDurationMs();
  }

  @Override
  public int getWidth() {
    return nativeGetWidth();
  }

  @Override
  public int getHeight() {
    return nativeGetHeight();
  }

  @Override
  public int getXOffset() {
=====================================================================
Found a 3 line (32 tokens) duplication in the following files: 
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 168 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 168 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

    when(mGifImageMock.decodeFromNativeMemory(
            eq(byteBuffer.getNativePtr()), eq(byteBuffer.size()), any(ImageDecodeOptions.class)))
        .thenReturn(mockGifImage);
=====================================================================
Found a 4 line (32 tokens) duplication in the following files: 
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java

    int width = -1;
    for (int i = 0; i < mLayers.length; i++) {
      Drawable drawable = mLayers[i];
      if (drawable != null) {
=====================================================================
Found a 4 line (32 tokens) duplication in the following files: 
Starting at line 157 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 169 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java

    boolean stateChanged = false;
    for (int i = 0; i < mLayers.length; i++) {
      Drawable drawable = mLayers[i];
      if (drawable != null && drawable.setState(state)) {
=====================================================================
Found a 5 line (32 tokens) duplication in the following files: 
Starting at line 238 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 260 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 271 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 282 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java

    mDrawableProperties.setAlpha(alpha);
    for (int i = 0; i < mLayers.length; i++) {
      Drawable drawable = mLayers[i];
      if (drawable != null) {
        drawable.setAlpha(alpha);
=====================================================================
Found a 10 line (32 tokens) duplication in the following files: 
Starting at line 340 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 271 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ForwardingDrawable.java

  public void getTransform(Matrix transform) {
    if (mTransformCallback != null) {
      mTransformCallback.getTransform(transform);
    } else {
      transform.reset();
    }
  }

  @Override
  public void getRootBounds(RectF bounds) {
=====================================================================
Found a 11 line (32 tokens) duplication in the following files: 
Starting at line 34 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ProgressBarDrawable.java
Starting at line 163 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedColorDrawable.java

  public void setColor(int color) {
    if (mColor != color) {
      mColor = color;
      invalidateSelf();
    }
  }

  /** Gets the progress bar color. */
  public int getColor() {
    return mColor;
  }
=====================================================================
Found a 11 line (32 tokens) duplication in the following files: 
Starting at line 183 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 317 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 22 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java

    @Override
    public void getTransformImpl(
        Matrix outTransform,
        Rect parentRect,
        int childWidth,
        int childHeight,
        float focusX,
        float focusY,
        float scaleX,
        float scaleY) {
      float dx = parentRect.left;
=====================================================================
Found a 5 line (32 tokens) duplication in the following files: 
Starting at line 37 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ArrayDrawableTest.java
Starting at line 27 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\SettableDrawableTest.java

  @Before
  public void setUp() {
    mUnderlyingDrawable0 = mock(Drawable.class);
    mUnderlyingDrawable1 = mock(Drawable.class);
    mUnderlyingDrawable2 = mock(Drawable.class);
=====================================================================
Found a 4 line (32 tokens) duplication in the following files: 
Starting at line 154 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ArrayDrawableTest.java
Starting at line 178 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ArrayDrawableTest.java

    assertSame(newDrawable, mArrayDrawable.getDrawable(2));
    verify(mUnderlyingDrawable1).setCallback(isNull(Drawable.Callback.class));
    verify(newDrawable).setCallback(eq(mArrayDrawable));
    verify(newDrawable, never()).mutate();
=====================================================================
Found a 6 line (32 tokens) duplication in the following files: 
Starting at line 65 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java
Starting at line 204 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java

    verify(mOnFadeListener, times(1)).onFadeStarted();

    SystemClock.setCurrentTimeMillis((long) (DURATION * 0.5));
    mFadeDrawable.draw(mCanvas);
    mFadeDrawable.draw(mCanvas);
    mFadeDrawable.draw(mCanvas);
=====================================================================
Found a 2 line (32 tokens) duplication in the following files: 
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\RoundedBitmapDrawableTest.java
Starting at line 60 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\RoundedCornersDrawableTest.java

    mRoundedBitmapDrawable.setRadii(new float[] {1, 2, 3, 4, 5, 6, 7, 8});
    verify(mCallback).invalidateDrawable(mRoundedBitmapDrawable);
=====================================================================
Found a 6 line (32 tokens) duplication in the following files: 
Starting at line 298 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 983 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    GenericDraweeHierarchy dh =
        mBuilder
            .setPlaceholderImage(mWrappedImage, ScaleType.CENTER)
            .setFailureImage(mFailureImage, ScaleType.CENTER)
            .setRetryImage(mRetryImage, null)
            .setRoundingParams(roundingParams)
=====================================================================
Found a 4 line (32 tokens) duplication in the following files: 
Starting at line 452 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 478 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 516 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 555 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 631 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(true, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(progressBarImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(retryImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
=====================================================================
Found a 8 line (32 tokens) duplication in the following files: 
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\main\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListener2.java
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\main\java\com\facebook\drawee\backends\pipeline\info\internal\ImagePerfControllerListener2.java

      String id, @Nullable Throwable throwable, @Nullable ControllerListener2.Extras extras) {
    final long now = mClock.now();

    ImagePerfState state = obtainState();

    state.setExtraData(extras);

    state.setControllerFailureTimeMs(now);
=====================================================================
Found a 4 line (32 tokens) duplication in the following files: 
Starting at line 31 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\file\FileTree.java
Starting at line 576 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DefaultDiskStorageTest.java

    File[] files = directory.listFiles();
    if (files != null) {
      for (File file : files) {
        if (file.isDirectory()) {
=====================================================================
Found a 5 line (32 tokens) duplication in the following files: 
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 325 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 204 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 322 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 355 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);

    Object val2a = mock(Object.class);
    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2a, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
=====================================================================
Found a 6 line (32 tokens) duplication in the following files: 
Starting at line 114 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 223 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 260 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 103 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1, NOT_FAILED, null);

    // I2 gets ignored because we already have I1
    Object val2 = mock(Object.class);
    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
=====================================================================
Found a 4 line (32 tokens) duplication in the following files: 
Starting at line 121 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1, NOT_FAILED, null);

    setState(mSrc2, NOT_CLOSED, FINISHED, WITH_RESULT, val2, FAILED, mock(Throwable.class));
    subscriber2.onFailure(mSrc2);
=====================================================================
Found a 5 line (32 tokens) duplication in the following files: 
Starting at line 166 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 406 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 439 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribe(mDataSourceSupplier1, mSrc1);

    Object val = mock(Object.class);
    setState(mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
=====================================================================
Found a 8 line (32 tokens) duplication in the following files: 
Starting at line 269 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 280 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 331 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 344 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    testClose(dataSource, mSrc1, mSrc2);
    verifySubscriber(dataSource, null, ON_CANCELLATION);
    verifyState(dataSource, null, CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
  }

  /** Early close with no results. */
  @Test
  public void testLifecycle_C() {
=====================================================================
Found a 6 line (32 tokens) duplication in the following files: 
Starting at line 160 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 224 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 276 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);

    // gets ignored because DS2 was first to produce result
    Object val1a = mock(Object.class);
    setState(mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1a, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
=====================================================================
Found a 5 line (32 tokens) duplication in the following files: 
Starting at line 284 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 302 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1a, NOT_FAILED, null);

    Object val1b = mock(Object.class);
    setState(mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val1b, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
=====================================================================
Found a 10 line (32 tokens) duplication in the following files: 
Starting at line 204 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\decoder\DefaultImageDecoder.java
Starting at line 65 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\FrescoVitoRegionDecoder.java

              qualityInfo,
              encodedImage.getRotationAngle(),
              encodedImage.getExifOrientation());

      closeableStaticBitmap.setImageExtra(
          "is_rounded",
          didApplyTransformation && options.bitmapTransformation instanceof CircularTransformation);

      return closeableStaticBitmap;
    } finally {
=====================================================================
Found a 6 line (32 tokens) duplication in the following files: 
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducer.java
Starting at line 109 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducer.java

        listener.onProducerFinishWithSuccess(
            producerContext,
            getProducerName(),
            listener.requiresExtraMap(producerContext, getProducerName())
                ? ImmutableMap.of(EXTRA_CACHED_VALUE_FOUND, "false")
                : null);
=====================================================================
Found a 9 line (32 tokens) duplication in the following files: 
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducer.java
Starting at line 142 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedProbeProducer.java

        }
        getConsumer().onNewResult(newResult, status);
      } finally {
        if (FrescoSystrace.isTracing()) {
          FrescoSystrace.endSection();
        }
      }
    }
  }
=====================================================================
Found a 6 line (32 tokens) duplication in the following files: 
Starting at line 86 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalExifThumbnailProducer.java
Starting at line 36 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalFetchProducer.java
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducer.java

      final Consumer<EncodedImage> consumer, final ProducerContext producerContext) {

    final ProducerListener2 listener = producerContext.getProducerListener();
    final ImageRequest imageRequest = producerContext.getImageRequest();

    producerContext.putOriginExtra("local", "exif");
=====================================================================
Found a 12 line (32 tokens) duplication in the following files: 
Starting at line 287 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PostprocessorProducer.java
Starting at line 419 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\PostprocessorProducer.java

      synchronized (PostprocessorConsumer.this) {
        if (mIsClosed) {
          return false;
        }
        oldSourceImageRef = mSourceImageRef;
        mSourceImageRef = null;
        mIsClosed = true;
      }
      CloseableReference.closeSafely(oldSourceImageRef);
      return true;
    }
  }
=====================================================================
Found a 7 line (32 tokens) duplication in the following files: 
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\decoder\ProgressiveJpegParserTest.java
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\decoder\ProgressiveJpegParserTest.java

    assertFalse(mProgressiveJpegParser.isJpeg());
    assertEquals(0, mProgressiveJpegParser.getBestScanEndOffset());
    assertEquals(0, mProgressiveJpegParser.getBestScanNumber());
  }

  @Test
  public void testOnShortestJpeg() {
=====================================================================
Found a 5 line (32 tokens) duplication in the following files: 
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java
Starting at line 351 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java

  public void testGetBucketedSize_Invalid() throws Exception {
    int[] sizes = new int[] {-1, 0};
    for (int s : sizes) {
      try {
        mPool.getBucketedSize(s);
=====================================================================
Found a 6 line (32 tokens) duplication in the following files: 
Starting at line 54 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\GenericByteArrayPoolTest.java
Starting at line 60 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\AshmemMemoryChunkPoolTest.java
Starting at line 61 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\NativeMemoryChunkPoolTest.java
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\BufferMemoryChunkPoolTest.java

    Assert.assertEquals(64, mPool.getBucketedSize(33));
    Assert.assertEquals(64, mPool.getBucketedSize(64));
    Assert.assertEquals(128, mPool.getBucketedSize(69));

    // value larger than max bucket
    Assert.assertEquals(129, mPool.getBucketedSize(129));
=====================================================================
Found a 3 line (32 tokens) duplication in the following files: 
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 100 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java

  public void testOnNewResultLastNotJpeg() {
    when(ImageFormatChecker.getImageFormat_WrapIOException(any(InputStream.class)))
        .thenAnswer((Answer<ImageFormat>) i -> DefaultImageFormats.WEBP_SIMPLE);
=====================================================================
Found a 3 line (32 tokens) duplication in the following files: 
Starting at line 88 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 126 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 167 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 190 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 215 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    mAddMetaDataConsumer.onNewResult(mFinalResult, Consumer.IS_LAST);
    ArgumentCaptor<EncodedImage> argumentCaptor = ArgumentCaptor.forClass(EncodedImage.class);
    verify(mConsumer).onNewResult(argumentCaptor.capture(), eq(Consumer.IS_LAST));
=====================================================================
Found a 4 line (32 tokens) duplication in the following files: 
Starting at line 87 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 117 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 148 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 124 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 173 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 286 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 302 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 319 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    verify(mConsumer).onNewResult(mFinalImageReference, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "true");
=====================================================================
Found a 6 line (32 tokens) duplication in the following files: 
Starting at line 201 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 416 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 447 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 287 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java
Starting at line 331 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 133 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SwallowResultProducerTest.java

    public Void answer(InvocationOnMock invocation) throws Throwable {
      Consumer consumer = (Consumer) invocation.getArguments()[0];
      consumer.onFailure(mException);
      return null;
    }
  }
=====================================================================
Found a 7 line (32 tokens) duplication in the following files: 
Starting at line 370 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 288 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 86 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SwallowResultProducerTest.java

                statusFlags, Arrays.asList(mIntermediateImageReference, mFinalImageReference)))
        .when(mInputProducer)
        .produceResults(any(Consumer.class), eq(mProducerContext));
  }

  private void setupInputProducerNotFound() {
    final List<CloseableReference<CloseableImage>> nullArray =
=====================================================================
Found a 9 line (32 tokens) duplication in the following files: 
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapPrepareProducerTest.java
Starting at line 153 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

                return null;
              }
            })
        .when(mInputProducer)
        .produceResults(any(Consumer.class), any(ProducerContext.class));
  }

  @Test
  public void testProduceResults_whenCalled_thenInputProducerCalled() {
=====================================================================
Found a 5 line (32 tokens) duplication in the following files: 
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BranchOnSeparateImagesProducerTest.java
Starting at line 176 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BranchOnSeparateImagesProducerTest.java

    EncodedImage intermediateEncodedImage =
        new EncodedImage(mIntermediateResult.getByteBufferRef());
    intermediateEncodedImage.setImageFormat(DefaultImageFormats.JPEG);
    intermediateEncodedImage.setRotationAngle(-1);
    intermediateEncodedImage.setWidth(WIDTH);
=====================================================================
Found a 4 line (32 tokens) duplication in the following files: 
Starting at line 197 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener).onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, null);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, true);
=====================================================================
Found a 7 line (32 tokens) duplication in the following files: 
Starting at line 226 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 316 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testDiskCacheGetFailureInputProducerNotFound() {
=====================================================================
Found a 8 line (32 tokens) duplication in the following files: 
Starting at line 234 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 324 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

    setupDiskCacheGetFailure(mDefaultBufferedDiskCache);
    setupInputProducerNotFound();
    mDiskCacheReadProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
  }

  @Test
  public void testDiskCacheGetFailureInputProducerFailure() {
=====================================================================
Found a 3 line (32 tokens) duplication in the following files: 
Starting at line 418 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 423 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

  private void setupDiskCacheGetNotFound(BufferedDiskCache bufferedDiskCache) {
    when(bufferedDiskCache.get(eq(mCacheKey), any(AtomicBoolean.class)))
        .thenReturn(Task.<EncodedImage>forResult(null));
=====================================================================
Found a 6 line (32 tokens) duplication in the following files: 
Starting at line 100 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    mFinalEncodedImageFormatUnknown = new EncodedImage(mFinalImageReference);

    mFinalEncodedImage = new EncodedImage(mFinalImageReference);
    mFinalEncodedImage.setImageFormat(new ImageFormat("jpeg", null));
    mFinalEncodedImage.setWidth(100);
    mFinalEncodedImage.setHeight(100);
=====================================================================
Found a 10 line (32 tokens) duplication in the following files: 
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DownsampleUtilTest.java
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DownsampleUtilTest.java

            MAX_BITMAP_SIZE));

    whenRequestResizeWidthAndHeightWithExifRotation(50, 25);
    assertEquals(
        2,
        DownsampleUtil.determineSampleSize(
            mImageRequest.getRotationOptions(),
            mImageRequest.getResizeOptions(),
            mEncodedImage,
            MAX_BITMAP_SIZE));
=====================================================================
Found a 6 line (32 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 179 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java

    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, true);
  }

  @Test(expected = RuntimeException.class)
  public void testFetchLocalContentUriFailsByThrowing() throws Exception {
=====================================================================
Found a 7 line (32 tokens) duplication in the following files: 
Starting at line 156 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 100 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java

    produceResults();

    mProducerContext.cancel();
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    verify(mProducerListener)
        .onProducerFinishWithCancellation(mProducerContext, PRODUCER_NAME, null);
    verify(mConsumer).onCancellation();
=====================================================================
Found a 8 line (32 tokens) duplication in the following files: 
Starting at line 53 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SwallowResultProducerTest.java
Starting at line 61 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SwallowResultProducerTest.java

    setupInputProducerStreamingSuccess();
    mSwallowResultProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
    verifyNoMoreInteractions(mConsumer);
  }

  @Test
  public void testPassOnNullResult() {
=====================================================================
Found a 10 line (32 tokens) duplication in the following files: 
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ThumbnailBranchProducerTest.java
Starting at line 166 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ThumbnailBranchProducerTest.java

    mockProducersToProduce(THROW_FAILURE, null, thirdImage);

    mProducer.produceResults(mImageConsumer, mProducerContext);

    verify(mImageConsumer).onNewResult(thirdImage, Consumer.IS_LAST);
    verifyAllProducersRequestedForResults();
  }

  @Test
  public void testNullReturnedIfNoProducerSufficientForResizeOptions() {
=====================================================================
Found a 8 line (32 tokens) duplication in the following files: 
Starting at line 92 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\CountingMemoryCache.java
Starting at line 101 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\CountingMemoryCache.java

    }

    /** Creates a new entry with the usage count of 0. */
    @VisibleForTesting
    public static <K, V> CountingMemoryCache.Entry<K, V> of(
        final K key,
        final CloseableReference<V> valueRef,
        final @Nullable EntryStateObserver<K> observer) {
=====================================================================
Found a 4 line (32 tokens) duplication in the following files: 
Starting at line 61 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DefaultDiskStorageTest.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DiskStorageCacheTest.java

  public void before() throws Exception {
    mClock = mock(SystemClock.class);
    PowerMockito.mockStatic(SystemClock.class);
    PowerMockito.when(SystemClock.get()).thenReturn(mClock);
=====================================================================
Found a 5 line (32 tokens) duplication in the following files: 
Starting at line 56 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 56 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

  private static final int CACHE_ENTRY_MAX_SIZE = 1000;
  private static final long PARAMS_CHECK_INTERVAL_MS = TimeUnit.MINUTES.toMillis(5);

  @Mock public ResourceReleaser<Integer> mReleaser;
  @Mock public AbstractAdaptiveCountingMemoryCache.CacheTrimStrategy mCacheTrimStrategy;
=====================================================================
Found a 5 line (32 tokens) duplication in the following files: 
Starting at line 582 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 423 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    assertTotalSize(3, 900);
    assertExclusivelyOwnedSize(2, 500);
    assertExclusivelyOwned(KEYS[1], 200);
    assertExclusivelyOwned(KEYS[2], 300);
    assertSharedWithCount(KEYS[3], 400, 1);
=====================================================================
Found a 3 line (32 tokens) duplication in the following files: 
Starting at line 762 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 561 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> originalRef1 = newReference(110);
    CloseableReference<Integer> cachedRef1 = mCache.cache(KEYS[1], originalRef1);
    originalRef1.close();
=====================================================================
Found a 3 line (32 tokens) duplication in the following files: 
Starting at line 44 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\BoundedLinkedHashSetTest.java
Starting at line 63 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\BoundedLinkedHashSetTest.java

    boundedLinkedHashSet.add(9);
    assertThat(boundedLinkedHashSet.contains(1)).isFalse();
    assertThat(boundedLinkedHashSet.contains(9)).isTrue();
=====================================================================
Found a 7 line (32 tokens) duplication in the following files: 
Starting at line 154 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 160 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java

    assertEquals(130, (Object) mCountingLruMap.remove("key3"));
    assertEquals(1, mCountingLruMap.getCount());
    assertEquals(110, mCountingLruMap.getSizeInBytes());
    assertKeyOrder("key1");
    assertValueOrder(110);

    assertEquals(null, (Object) mCountingLruMap.remove("key4"));
=====================================================================
Found a 9 line (32 tokens) duplication in the following files: 
Starting at line 166 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 200 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java

    assertEquals(110, (Object) mCountingLruMap.remove("key1"));
    assertEquals(0, mCountingLruMap.getCount());
    assertEquals(0, mCountingLruMap.getSizeInBytes());
    assertKeyOrder();
    assertValueOrder();
  }

  @Test
  public void testRemoveAll() {
=====================================================================
Found a 7 line (32 tokens) duplication in the following files: 
Starting at line 33 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\image\CloseableStaticBitmapTest.java
Starting at line 53 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\image\CloseableStaticBitmapTest.java

    mBitmap = Bitmap.createBitmap(WIDTH, HEIGHT, Bitmap.Config.ARGB_8888);
    ResourceReleaser<Bitmap> releaser = SimpleBitmapReleaser.getInstance();
    mCloseableStaticBitmap =
        CloseableStaticBitmap.of(
            mBitmap,
            releaser,
            ImmutableQualityInfo.FULL_QUALITY,
=====================================================================
Found a 8 line (32 tokens) duplication in the following files: 
Starting at line 61 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\image\CloseableStaticBitmapTest.java
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\image\CloseableStaticBitmapTest.java

            ExifInterface.ORIENTATION_ROTATE_90);

    assertThat(mCloseableStaticBitmap.getWidth()).isEqualTo(WIDTH);
    assertThat(mCloseableStaticBitmap.getHeight()).isEqualTo(HEIGHT);
  }

  @Test
  public void testWidthAndHeightWithInvertedOrientationImage() {
=====================================================================
Found a 5 line (32 tokens) duplication in the following files: 
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\native-filters\src\main\java\com\facebook\imagepipeline\nativecode\NativeRoundingFilter.java
Starting at line 61 of C:\Users\anaca\Documents\Projetos\fresco\native-filters\src\main\java\com\facebook\imagepipeline\nativecode\NativeRoundingFilter.java
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\native-filters\src\main\java\com\facebook\imagepipeline\nativecode\NativeRoundingFilter.java

  public static void toCircle(Bitmap bitmap, boolean antiAliased) {
    Preconditions.checkNotNull(bitmap);
    if (bitmap.getWidth() < 3 || bitmap.getHeight() < 3) {
      return; // Image too small to round
    }
=====================================================================
Found a 4 line (32 tokens) duplication in the following files: 
Starting at line 133 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\bitmap\BitmapAnimationCacheSelectorConfigurator.java
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\utils\SampleAnimationBackendConfigurator.java
Starting at line 140 of C:\Users\anaca\Documents\Projetos\fresco\samples\comparison\src\main\java\com\facebook\samples\comparison\MainActivity.java
Starting at line 153 of C:\Users\anaca\Documents\Projetos\fresco\samples\comparison\src\main\java\com\facebook\samples\comparison\MainActivity.java
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRotationFragment.java
Starting at line 79 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRoundedCornersFragment.java
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeScaleTypeFragment.java
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeSpanSimpleTextFragment.java
Starting at line 109 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\pjpeg\ImageFormatProgressiveJpegFragment.java
Starting at line 84 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineBitmapFactoryFragment.java
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java
Starting at line 84 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java

    mSpinner.setOnItemSelectedListener(
        new AdapterView.OnItemSelectedListener() {
          @Override
          public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
=====================================================================
Found a 7 line (32 tokens) duplication in the following files: 
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\bitmap\BitmapAnimationDebugFragment.java
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\RetainingDataSourceSupplierFragment.java
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineBitmapFactoryFragment.java
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineRegionDecodingFragment.java
Starting at line 66 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\FrescoVitoLithoRegionDecodeFragment.java

          };

  @Nullable
  @Override
  public View onCreateView(
      LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
    return inflater.inflate(R.layout.fragment_debug_bitmap, container, false);
=====================================================================
Found a 7 line (32 tokens) duplication in the following files: 
Starting at line 31 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\bitmap\BitmapAnimationFragment.java
Starting at line 29 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\color\SimpleColorFragment.java
Starting at line 22 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeSimpleFragment.java
Starting at line 33 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\webp\ImageFormatWebpFragment.java

public class BitmapAnimationFragment extends Fragment {

  @Nullable
  @Override
  public View onCreateView(
      LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
    return inflater.inflate(R.layout.fragment_simple_container, container, false);
=====================================================================
Found a 4 line (32 tokens) duplication in the following files: 
Starting at line 36 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java
Starting at line 57 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java

      outTransform.setScale(scale, scale);
      outTransform.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
    }
  }
=====================================================================
Found a 5 line (32 tokens) duplication in the following files: 
Starting at line 33 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeSimpleFragment.java
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\transition\DraweeTransitionFragment.java

    final Uri uri = sampleUris().createSampleUri(ImageUriProvider.ImageSize.M);

    final SimpleDraweeView simpleDraweeView =
        (SimpleDraweeView) view.findViewById(R.id.drawee_view);
    simpleDraweeView.setImageURI(uri);
=====================================================================
Found a 7 line (32 tokens) duplication in the following files: 
Starting at line 28 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\transition\DraweeTransitionFragment.java
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\override\ImageFormatOverrideExample.java
Starting at line 33 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineQualifiedResourceFragment.java
Starting at line 40 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\VitoViewRecyclerFragment.java
Starting at line 29 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\VitoViewSimpleFragment.java

  public static final PointF FOCUS_POINT = new PointF(1, 0.5f);

  @Nullable
  @Override
  public View onCreateView(
      LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
    return inflater.inflate(R.layout.fragment_drawee_transition, container, false);
=====================================================================
Found a 6 line (32 tokens) duplication in the following files: 
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\color\ImageFormatColorFragment.java
Starting at line 57 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\svg\ImageFormatSvgFragment.java

        CustomImageFormatConfigurator.isGlobalColorDecoderEnabled(getContext()));
    switchCompat.setOnCheckedChangeListener(
        new CompoundButton.OnCheckedChangeListener() {
          @Override
          public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
            CustomImageFormatConfigurator.setGlobalColorDecoderEnabled(getContext(), isChecked);
=====================================================================
Found a 5 line (32 tokens) duplication in the following files: 
Starting at line 281 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\main\java\com\facebook\fresco\vito\core\impl\FrescoController2Impl.java
Starting at line 346 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\main\java\com\facebook\fresco\vito\core\impl\FrescoController2Impl.java

    if (isImmediate || imageRequest.imageOptions.getFadeDurationMs() <= 0) {
      drawable.showImageImmediately();
    } else {
      drawable.fadeInImage(imageRequest.imageOptions.getFadeDurationMs());
    }
=====================================================================
Found a 9 line (31 tokens) duplication in the following files: 
Starting at line 45 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\main\java\com\facebook\imagepipeline\animated\impl\AnimatedFrameCache.java
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\cache\common\MultiCacheKey.java

          .toString();
    }

    @Override
    public boolean equals(@Nullable Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof FrameKey) {
=====================================================================
Found a 6 line (31 tokens) duplication in the following files: 
Starting at line 145 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\animated\impl\AnimatedFrameCacheTest.java
Starting at line 175 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\animated\impl\AnimatedFrameCacheTest.java

    CloseableReference<CloseableImage> free = mAnimatedFrameCache.getForReuse();
    free.close();

    assertFalse(mAnimatedFrameCache.contains(1));
    assertFalse(mAnimatedFrameCache.contains(2));
  }
=====================================================================
Found a 6 line (31 tokens) duplication in the following files: 
Starting at line 119 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 238 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 343 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java

    mTestExecutorService.runUntilIdle();

    mInOrder.verify(mConsumer).onNewResult(any(CloseableReference.class), eq(Consumer.NO_FLAGS));
    mInOrder.verifyNoMoreInteractions();

    assertEquals(1, mResults.size());
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 250 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 292 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 316 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    when(mBitmapFrameCache.getBitmapToReuseForFrame(anyInt(), anyInt(), anyInt()))
        .thenReturn(mBitmapRefererence);
    when(mBitmapFrameRenderer.renderFrame(anyInt(), any(Bitmap.class))).thenReturn(true);
=====================================================================
Found a 7 line (31 tokens) duplication in the following files: 
Starting at line 196 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 234 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 281 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

    EncodedImage encodedImage =
        new EncodedImage(CloseableReference.of(byteBuffer, FAKE_RESOURCE_RELEASER));
    encodedImage.setImageFormat(ImageFormat.UNKNOWN);

    CloseableAnimatedImage closeableImage =
        (CloseableAnimatedImage)
            mAnimatedImageFactory.decodeGif(
=====================================================================
Found a 6 line (31 tokens) duplication in the following files: 
Starting at line 233 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 281 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 196 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

    EncodedImage encodedImage =
        new EncodedImage(CloseableReference.of(byteBuffer, FAKE_RESOURCE_RELEASER));
    encodedImage.setImageFormat(ImageFormat.UNKNOWN);
    CloseableAnimatedImage closeableImage =
        (CloseableAnimatedImage)
            mAnimatedImageFactory.decodeGif(
=====================================================================
Found a 11 line (31 tokens) duplication in the following files: 
Starting at line 60 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\controller\AbstractDraweeController.java
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\main\java\com\facebook\fresco\vito\core\impl\FrescoController2Impl.java

      ImmutableMap.<String, Object>of("component_tag", "drawee");
  private static final Map<String, Object> SHORTCUT_EXTRAS =
      ImmutableMap.<String, Object>of(
          "origin", "memory_bitmap",
          "origin_sub", "shortcut");

  /**
   * This class is used to allow an optimization of not creating a ForwardingControllerListener when
   * there is only a single controller listener.
   */
  private static class InternalForwardingListener<INFO> extends ForwardingControllerListener<INFO> {
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 181 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 196 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 211 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 239 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 250 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 261 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 272 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 283 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java
Starting at line 360 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ArrayDrawable.java

    for (int i = 0; i < mLayers.length; i++) {
      Drawable drawable = mLayers[i];
      if (drawable != null) {
        drawable.setBounds(bounds);
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 222 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 276 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 303 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 355 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 389 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 425 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 453 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 481 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\ScalingUtils.java
Starting at line 36 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java
Starting at line 57 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\common\CustomScaleTypes.java

      outTransform.setScale(scale, scale);
      outTransform.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
    }
=====================================================================
Found a 6 line (31 tokens) duplication in the following files: 
Starting at line 151 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\DrawableTestUtils.java
Starting at line 173 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\DrawableTestUtils.java

        .setVisibilityCallback(any(VisibilityCallback.class));
    doAnswer(
            new Answer() {
              @Override
              public Object answer(InvocationOnMock invocation) throws Throwable {
                if (callback.get() != null) {
=====================================================================
Found a 8 line (31 tokens) duplication in the following files: 
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java
Starting at line 28 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

  private Drawable[] mLayers =
      new Drawable[] {
        DrawableTestUtils.mockDrawable(),
        DrawableTestUtils.mockDrawable(),
        DrawableTestUtils.mockDrawable(),
      };

  private FakeFadeDrawable mFadeDrawable;
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 74 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 93 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 127 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 144 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 161 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 254 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 338 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 364 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 385 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 403 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 373 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 391 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(FadeDrawable.TRANSITION_NONE, mFadeDrawable.mTransitionState);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[0]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[1]);
    Assert.assertEquals(255, mFadeDrawable.mAlphas[2]);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 121 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 367 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 388 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 406 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 376 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 394 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(255, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[2]);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 138 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    verify(mCallback).invalidateDrawable(mFadeDrawable);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
=====================================================================
Found a 14 line (31 tokens) duplication in the following files: 
Starting at line 417 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 405 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

      super(layers, true, 0);
      mCurrentTimeMs = 0;
    }

    @Override
    protected long getCurrentTimeMs() {
      return mCurrentTimeMs;
    }

    void incrementCurrentTimeMs(long increment) {
      mCurrentTimeMs += increment;
    }
  }
}
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 114 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 355 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(0, mFadeDrawable.mAlphas[2]);
    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[0]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
=====================================================================
Found a 5 line (31 tokens) duplication in the following files: 
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java

    expectedMatrix.setScale(-1, 1);
    assertFalse(drawable.mRotationMatrix.isIdentity());
    AndroidGraphicsTestUtils.assertEquals(expectedMatrix, drawable.mRotationMatrix);
    verifySetBounds(expectedMatrix);
  }
=====================================================================
Found a 8 line (31 tokens) duplication in the following files: 
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java

    expectedMatrix.setScale(-1, 1);
    assertFalse(drawable.mRotationMatrix.isIdentity());
    AndroidGraphicsTestUtils.assertEquals(expectedMatrix, drawable.mRotationMatrix);
    verifySetBounds(expectedMatrix);
  }

  @Test
  public void testCreation_flipVertical() {
=====================================================================
Found a 5 line (31 tokens) duplication in the following files: 
Starting at line 170 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ScaleTypeDrawableTest.java
Starting at line 186 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ScaleTypeDrawableTest.java
Starting at line 203 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ScaleTypeDrawableTest.java

  public void testConfigureBounds_FOCUS_CROP_HL() {
    Rect bounds = new Rect(10, 10, 410, 310);
    int width = 400;
    int height = 200;
    PointF focusPoint = new PointF(0.1f, 0.5f);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 221 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 272 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

        mBuilder.setPlaceholderImage(mPlaceholderImage, null).setOverlay(mOverlay1).build();
    RootDrawable rootDrawable = (RootDrawable) dh.getTopLevelDrawable();
    FadeDrawable fadeDrawable = (FadeDrawable) rootDrawable.getCurrent();
    assertEquals(7, fadeDrawable.getNumberOfLayers());
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 444 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 455 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 470 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 497 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 508 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 535 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 574 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 585 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 612 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 623 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 634 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(false, fadeDrawable.isLayerOn(failureImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(backgroundIndex));
    assertLayersOn(fadeDrawable, overlaysIndex, numOverlays);
    assertEquals(FadeDrawable.TRANSITION_NONE, fadeDrawable.getTransitionState());
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 450 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 476 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 503 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 514 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 541 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 553 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 580 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 618 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(mActualImage2, finalImageSettableDrawable.getCurrent());
    assertEquals(false, fadeDrawable.isLayerOn(placeholderImageIndex));
    assertEquals(true, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(false, fadeDrawable.isLayerOn(progressBarImageIndex));
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 898 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 975 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    GenericDraweeHierarchy dh = testRoundingParams_createHierarchy(prev, roundingParams);
    RootDrawable rootDrawable = (RootDrawable) dh.getTopLevelDrawable();
    FadeDrawable fadeDrawable = (FadeDrawable) rootDrawable.getCurrent();
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 72 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java
Starting at line 115 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\AspectRatioMeasureTest.java

    AspectRatioMeasure.updateMeasureSpec(mSpec, 1.5f, layoutParams1, 10, 10);
    assertEquals(makeMeasureSpec(410, EXACTLY), mSpec.width);
    assertEquals(makeMeasureSpec(310, EXACTLY), mSpec.height);
=====================================================================
Found a 8 line (31 tokens) duplication in the following files: 
Starting at line 138 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\DraweeViewTest.java
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\DraweeViewTest.java

    mDraweeView.onFinishTemporaryDetach();
    inOrder.verify(mController).onAttach();
    mDraweeView.onDetachedFromWindow();
    inOrder.verify(mController).onDetach();
  }

  @Test
  public void testLifecycle_ControllerSetWhileAttached() {
=====================================================================
Found a 5 line (31 tokens) duplication in the following files: 
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\ImagePerfMonitorTest.java
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\drawee-backends\drawee-pipeline\src\test\java\com\facebook\drawee\backends\pipeline\info\ImagePerfMonitorTest.java

    mImagePerfMonitor.setEnabled(true);
    mImagePerfMonitor.addImagePerfDataListener(listener);
    mImagePerfMonitor.notifyStatusUpdated(state, ImageLoadStatus.SUCCESS);

    verify(state).setImageLoadStatus(eq(ImageLoadStatus.SUCCESS));
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 79 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java

  public static void v(String tag, String msg, Object arg1, Object arg2, Object arg3, Object arg4) {
    if (sHandler.isLoggable(VERBOSE)) {
      sHandler.v(tag, formatString(msg, arg1, arg2, arg3, arg4));
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java

  public static void v(String tag, String msg, Object... args) {
    if (sHandler.isLoggable(VERBOSE)) {
      sHandler.v(tag, formatString(msg, args));
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 176 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java
Starting at line 207 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java

  public static void d(String tag, String msg, Object arg1, Object arg2, Object arg3, Object arg4) {
    if (sHandler.isLoggable(DEBUG)) {
      sHandler.d(tag, formatString(msg, arg1, arg2, arg3, arg4));
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 273 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java
Starting at line 304 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java

  public static void i(String tag, String msg, Object arg1, Object arg2, Object arg3, Object arg4) {
    if (sHandler.isLoggable(INFO)) {
      sHandler.i(tag, formatString(msg, arg1, arg2, arg3, arg4));
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 310 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java
Starting at line 316 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java

  public static void i(String tag, String msg, Object... args) {
    if (sHandler.isLoggable(INFO)) {
      sHandler.i(tag, formatString(msg, args));
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 358 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java
Starting at line 364 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java

  public static void w(String tag, String msg, Object... args) {
    if (sHandler.isLoggable(WARN)) {
      sHandler.w(tag, formatString(msg, args));
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 406 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java
Starting at line 412 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java

  public static void e(String tag, String msg, Object... args) {
    if (sHandler.isLoggable(ERROR)) {
      sHandler.e(tag, formatString(msg, args));
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 454 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java
Starting at line 460 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java

  public static void wtf(String tag, String msg, Object... args) {
    if (sHandler.isLoggable(ERROR)) {
      sHandler.wtf(tag, formatString(msg, args));
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 37 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 386 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    DataSubscriber<Object> subscriber2 = verifyGetAndSubscribe(mDataSourceSupplier2, mSrc2);
    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);

    setState(mSrc2, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, mock(Throwable.class));
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 328 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 157 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 436 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2a, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2a, NOT_FAILED, null);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 334 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 157 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2b, NOT_FAILED, null);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 106 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 185 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 191 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 215 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 252 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 292 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

    setState(mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
    verifySubscriber(dataSource, mSrc1, ON_NEW_RESULT);
    verifyState(dataSource, mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1, NOT_FAILED, null);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 153 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 334 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

    setState(mSrc2, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);
    subscriber2.onNewResult(mSrc2);
    verifySubscriber(dataSource, mSrc2, ON_NEW_RESULT);
    verifyState(dataSource, mSrc2, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 169 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 197 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 287 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    setState(mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);
    subscriber1.onNewResult(mSrc1);
    verifySubscriber(dataSource, mSrc1, ON_NEW_RESULT);
    verifyState(dataSource, mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 183 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 261 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 307 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 443 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    subscriber1.onNewResult(mSrc1);
    mInOrder.verify(mSrc2).close();
    verifySubscriber(dataSource, mSrc1, ON_NEW_RESULT);
    verifyState(dataSource, mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val1c, NOT_FAILED, null);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 201 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 214 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 397 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 403 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    setState(mSrc3, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val3a, NOT_FAILED, null);
    subscriber3.onNewResult(mSrc3);
    verifySubscriber(dataSource, mSrc3, ON_NEW_RESULT);
    verifyState(dataSource, mSrc3, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val3a, NOT_FAILED, null);
=====================================================================
Found a 8 line (31 tokens) duplication in the following files: 
Starting at line 47 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 46 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanTest.java

  private final int mExpectedBottom;

  @ParameterizedRobolectricTestRunner.Parameters
  public static Collection<Object[]> data() {
    return Arrays.asList(
        new Object[][] {
          // -------------------------- Small drawable left/right margin --------------------------
          {
=====================================================================
Found a 20 line (31 tokens) duplication in the following files: 
Starting at line 284 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java
Starting at line 305 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\core\ImagePipeline.java

        imageRequest, callerContext, lowestPermittedRequestLevelOnSubmit, null);
  }

  /**
   * Submits a request for execution and returns a DataSource representing the pending decoded
   * image(s).
   *
   * <p>The returned DataSource must be closed once the client has finished with it.
   *
   * @param imageRequest the request to submit
   * @param callerContext the caller context for image request
   * @param lowestPermittedRequestLevelOnSubmit the lowest request level permitted for image reques
   * @param requestListener additional image request listener independent of ImageRequest listeners
   * @return a DataSource representing the pending decoded image(s)
   */
  public DataSource<CloseableReference<CloseableImage>> fetchDecodedImage(
      ImageRequest imageRequest,
      @Nullable Object callerContext,
      ImageRequest.RequestLevel lowestPermittedRequestLevelOnSubmit,
      @Nullable RequestListener requestListener) {
=====================================================================
Found a 10 line (31 tokens) duplication in the following files: 
Starting at line 62 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BaseProducerContext.java
Starting at line 50 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\SettableProducerContext.java

  public BaseProducerContext(
      ImageRequest imageRequest,
      String id,
      ProducerListener2 producerListener,
      Object callerContext,
      ImageRequest.RequestLevel lowestPermittedRequestLevel,
      boolean isPrefetch,
      boolean isIntermediateResultExpected,
      Priority priority,
      ImagePipelineConfigInterface imagePipelineConfig) {
=====================================================================
Found a 8 line (31 tokens) duplication in the following files: 
Starting at line 98 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapProbeProducer.java
Starting at line 86 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedProbeProducer.java

    private final BufferedDiskCache mDefaultBufferedDiskCache;
    private final BufferedDiskCache mSmallImageBufferedDiskCache;
    private final CacheKeyFactory mCacheKeyFactory;
    private final BoundedLinkedHashSet<CacheKey> mEncodedMemoryCacheHistory;
    private final BoundedLinkedHashSet<CacheKey> mDiskCacheHistory;

    public ProbeConsumer(
        Consumer<CloseableReference<CloseableImage>> consumer,
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 118 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducer.java
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducer.java
Starting at line 117 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedProbeProducer.java

      if (isNotLast(status)
          || newResult == null
          || statusHasAnyFlag(status, DO_NOT_CACHE_ENCODED | IS_PARTIAL_RESULT)
          || newResult.getImageFormat() == ImageFormat.UNKNOWN) {
=====================================================================
Found a 9 line (31 tokens) duplication in the following files: 
Starting at line 119 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalExifThumbnailProducer.java
Starting at line 66 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalFetchProducer.java
Starting at line 111 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalThumbnailBitmapProducer.java
Starting at line 128 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducer.java

    producerContext.addCallbacks(
        new BaseProducerContextCallbacks() {
          @Override
          public void onCancellationRequested() {
            cancellableProducerRunnable.cancel();
          }
        });
    mExecutor.execute(cancellableProducerRunnable);
  }
=====================================================================
Found a 10 line (31 tokens) duplication in the following files: 
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalThumbnailBitmapProducer.java
Starting at line 101 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducer.java

            if (thumbnailBitmap == null) {
              return null;
            }

            CloseableStaticBitmap closeableStaticBitmap =
                CloseableStaticBitmap.of(
                    thumbnailBitmap,
                    SimpleBitmapReleaser.getInstance(),
                    ImmutableQualityInfo.FULL_QUALITY,
                    0);
=====================================================================
Found a 5 line (31 tokens) duplication in the following files: 
Starting at line 461 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\MultiplexProducer.java
Starting at line 498 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\MultiplexProducer.java
Starting at line 543 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\MultiplexProducer.java

      }

      while (iterator.hasNext()) {
        Pair<Consumer<T>, ProducerContext> pair = iterator.next();
        synchronized (pair) {
=====================================================================
Found a 11 line (31 tokens) duplication in the following files: 
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\SettableProducerContext.java
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\SettableProducerContext.java

      String id,
      ProducerListener2 producerListener,
      Object callerContext,
      ImageRequest.RequestLevel lowestPermittedRequestLevel,
      boolean isPrefetch,
      boolean isIntermediateResultExpected,
      Priority priority,
      ImagePipelineConfigInterface imagePipelineConfig) {
    super(
        imageRequest,
        id,
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 144 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\cache\BufferedDiskCacheTest.java
Starting at line 201 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\cache\BufferedDiskCacheTest.java

    Task<EncodedImage> readTask = mBufferedDiskCache.get(mCacheKey, mIsCancelled);
    mReadPriorityExecutor.runUntilIdle();
    verify(mFileCache).getResource(eq(mCacheKey));
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 299 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 318 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 337 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 358 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 380 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 400 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 537 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

    assertFalse(dataSource.isFinished());
    verify(mRequestListener1).onRequestStart(mImageRequest, mCallerContext, "0", false);
    verify(mRequestListener2).onRequestStart(mImageRequest, mCallerContext, "0", false);
=====================================================================
Found a 8 line (31 tokens) duplication in the following files: 
Starting at line 32 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\GenericByteArrayPoolTest.java

    mStats = new PoolStats<byte[]>(mPool);
  }

  // Test out the alloc method
  @Test
  public void testAlloc() throws Exception {
    Assert.assertEquals(1, mPool.alloc(1).length);
    Assert.assertEquals(3, mPool.alloc(3).length);
=====================================================================
Found a 7 line (31 tokens) duplication in the following files: 
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java
Starting at line 82 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\GenericByteArrayPoolTest.java

    Assert.assertEquals(6, mPool.getBucketedSizeForValue(new byte[6]));
  }

  @Test
  public void testGetSizeInBytes() throws Exception {
    Assert.assertEquals(1, mPool.getSizeInBytes(1));
    Assert.assertEquals(2, mPool.getSizeInBytes(2));
=====================================================================
Found a 9 line (31 tokens) duplication in the following files: 
Starting at line 161 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\platform\ArtDecoderTest.java
Starting at line 173 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\platform\ArtDecoderTest.java

        .thenAnswer((Answer<Bitmap>) invocation -> MockBitmapFactory.create());
    try {
      mArtDecoder.decodeFromEncodedImage(mEncodedImage, DEFAULT_BITMAP_CONFIG, null);
    } finally {
      verify(mBitmapPool).release(mBitmap);
    }
  }

  @Test(expected = ConcurrentModificationException.class)
=====================================================================
Found a 5 line (31 tokens) duplication in the following files: 
Starting at line 64 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    when(mCloseableImage1.getQualityInfo()).thenReturn(ImmutableQualityInfo.FULL_QUALITY);

    when(mProducerContext.getImageRequest()).thenReturn(mImageRequest);
    when(mProducerContext.getProducerListener()).thenReturn(mProducerListener);
    when(mProducerContext.getId()).thenReturn(mRequestId);
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 285 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 301 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 204 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java
Starting at line 226 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 257 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 172 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 285 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 301 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 318 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 226 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 257 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 176 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java

    mBitmapMemoryCacheGetProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(null, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
    Map<String, String> extraMap =
=====================================================================
Found a 7 line (31 tokens) duplication in the following files: 
Starting at line 167 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 452 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 292 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java

    doAnswer(new ProduceResultsNewResultAnswer(mFinalImageReference))
        .when(mInputProducer)
        .produceResults(any(Consumer.class), eq(mProducerContext));
  }

  private void setupInputProducerNotFound() {
    doAnswer(new ProduceResultsNewResultAnswer(null))
=====================================================================
Found a 7 line (31 tokens) duplication in the following files: 
Starting at line 173 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 379 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 438 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 278 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java
Starting at line 296 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 95 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SwallowResultProducerTest.java

    doAnswer(new ProduceResultsNewResultAnswer(null))
        .when(mInputProducer)
        .produceResults(any(Consumer.class), eq(mProducerContext));
  }

  private void setupInputProducerFailure() {
    doAnswer(new ProduceResultsFailureAnswer())
=====================================================================
Found a 6 line (31 tokens) duplication in the following files: 
Starting at line 95 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

    when(mImageRequest.isMemoryCacheEnabled()).thenReturn(true);
    setUpCacheEnabled(true);
  }

  private void setUpCacheEnabled(boolean enabled) {
    when(mImageRequest.isCacheEnabled(ImageRequest.CachesLocationsMasks.BITMAP_READ))
=====================================================================
Found a 7 line (31 tokens) duplication in the following files: 
Starting at line 113 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 162 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    mBitmapMemoryCacheProducer.produceResults(mConsumer, mProducerContext);
    verify(mMemoryCache, never())
        .cache(any(BitmapMemoryCacheKey.class), any(CloseableReference.class));
  }

  @Test
  public void testBitmapMemoryCacheGetSuccessful() {
=====================================================================
Found a 5 line (31 tokens) duplication in the following files: 
Starting at line 210 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 236 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

        .thenReturn(ImmutableQualityInfo.of(INTERMEDIATE_SCAN_1, false, false));
    CloseableReference<CloseableImage> closeableImageRef = CloseableReference.of(closeableImage);
    setupBitmapMemoryCacheGetSuccessOnSecondRead(closeableImageRef);
    mBitmapMemoryCacheProducer.produceResults(mConsumer, mProducerContext);
    verify(mMemoryCache).cache(mBitmapMemoryCacheKey, mIntermediateImageReference);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 322 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 261 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

        ImmutableMap.of(BitmapMemoryCacheProducer.EXTRA_CACHED_VALUE_FOUND, "false");
    verify(mProducerListener)
        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, false);
=====================================================================
Found a 5 line (31 tokens) duplication in the following files: 
Starting at line 331 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 360 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java

        .decode(mEncodedImage, IMAGE_SIZE, ImmutableQualityInfo.FULL_QUALITY, IMAGE_DECODE_OPTIONS);
    inOrder
        .verify(mProducerListener)
        .onProducerFinishWithSuccess(
            eq(mProducerContext), eq(DecodeProducer.PRODUCER_NAME), nullable(Map.class));
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 335 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 394 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 401 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

            eq(mProducerContext), eq(DecodeProducer.PRODUCER_NAME), nullable(Map.class));
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }
=====================================================================
Found a 7 line (31 tokens) duplication in the following files: 
Starting at line 335 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 394 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 301 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 343 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

            eq(mProducerContext), eq(DecodeProducer.PRODUCER_NAME), nullable(Map.class));
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testDecode_Intermediate_pJPEG() throws Exception {
=====================================================================
Found a 6 line (31 tokens) duplication in the following files: 
Starting at line 404 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 420 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java

    setupLocalUri(ResizeOptions.forDimensions(resizedWidth, resizedHeight));

    produceResults();
    JobScheduler.JobRunnable jobRunnable = getJobRunnable();

    jobRunnable.run(mEncodedImage, Consumer.IS_LAST);
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 160 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 178 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 293 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 313 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

    mDiskCacheReadProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 196 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 274 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

    mDiskCacheReadProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener).onProducerStart(mProducerContext, PRODUCER_NAME);
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 316 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 104 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalVideoThumbnailProducerTest.java

    verify(mProducerListener).onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, null);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
=====================================================================
Found a 7 line (31 tokens) duplication in the following files: 
Starting at line 435 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 463 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 303 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java

                consumer.onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
                return null;
              }
            })
        .when(mInputProducer)
        .produceResults(any(Consumer.class), eq(mProducerContext));
  }
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheWriteProducerTest.java
Starting at line 163 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java

        mFinalImageReference.getUnderlyingReferenceTestOnly());
    verify(mConsumer).onNewResult(mIntermediateEncodedImage, Consumer.NO_FLAGS);
    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
=====================================================================
Found a 13 line (31 tokens) duplication in the following files: 
Starting at line 44 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DownsampleUtilTest.java
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DownsampleUtilTest.java
Starting at line 136 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DownsampleUtilTest.java

    when(mImageRequest.getRotationOptions()).thenReturn(RotationOptions.autoRotate());
    // Null resizeOptions
    assertEquals(
        1,
        DownsampleUtil.determineSampleSize(
            mImageRequest.getRotationOptions(),
            mImageRequest.getResizeOptions(),
            mEncodedImage,
            MAX_BITMAP_SIZE));
  }

  @Test
  public void testDetermineSampleSize_NoEncodedImageDimensions() {
=====================================================================
Found a 12 line (31 tokens) duplication in the following files: 
Starting at line 99 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DownsampleUtilTest.java
Starting at line 220 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DownsampleUtilTest.java

    whenRequestResizeWidthAndHeightWithExifRotation(50, 25);
    assertEquals(
        2,
        DownsampleUtil.determineSampleSize(
            mImageRequest.getRotationOptions(),
            mImageRequest.getResizeOptions(),
            mEncodedImage,
            MAX_BITMAP_SIZE));
  }

  @Test
  public void testDetermineSampleSize_PNG() {
=====================================================================
Found a 6 line (31 tokens) duplication in the following files: 
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 105 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PostprocessedBitmapMemoryCacheProducerTest.java

    mEncodedMemoryCacheProducer.produceResults(mConsumer, mProducerContext);
    verify(mMemoryCache, never()).cache(any(CacheKey.class), any(CloseableReference.class));
  }

  @Test
  public void testEncodedMemoryCacheGetSuccessful() {
=====================================================================
Found a 6 line (31 tokens) duplication in the following files: 
Starting at line 53 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalExifThumbnailProducerTest.java
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ResizeAndRotateProducerTest.java

  @Mock public ImageRequest mImageRequest;
  @Mock public ProducerListener2 mProducerListener;
  @Mock public Consumer<EncodedImage> mConsumer;
  @Mock public ProducerContext mProducerContext;
  @Mock public PooledByteBufferFactory mPooledByteBufferFactory;
  @Mock public PooledByteBuffer mThumbnailByteBuffer;
=====================================================================
Found a 5 line (31 tokens) duplication in the following files: 
Starting at line 279 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 294 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

    mForwardingConsumer1.onFailure(mException);
    assertTrue(mMultiplexProducer.mMultiplexers.isEmpty());

    mMultiplexProducer.produceResults(mConsumer2, mProducerContext2);
    assertTrue(mMultiplexProducer.mMultiplexers.size() == 1);
=====================================================================
Found a 5 line (31 tokens) duplication in the following files: 
Starting at line 333 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 347 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 424 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

    mProducerContext1.setIsPrefetch(true);
    mProducerContext2.setIsPrefetch(false);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext1);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext2);
    assertFalse(mMultiplexedContext1.isPrefetch());
=====================================================================
Found a 5 line (31 tokens) duplication in the following files: 
Starting at line 588 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java
Starting at line 599 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\MultiplexProducerTest.java

    mProducerContext2.setPriority(Priority.HIGH);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext1);
    mMultiplexProducer.produceResults(mConsumer1, mProducerContext2);
    assertEquals(Priority.HIGH, mMultiplexedContext1.getPriority());
    mProducerContext1.cancel();
=====================================================================
Found a 9 line (31 tokens) duplication in the following files: 
Starting at line 144 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 201 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    fetcher.onFetchCompletion(dontcare1, 4317);
    verify(delegate).fetch(eq(one.delegatedState), any(NetworkFetcher.Callback.class));
  }

  /**
   * Assert that when hi-pri requests are LIFO when PriorityNetworkFetcher is configured this way.
   */
  @Test
  public void hipriIsLifo() {
=====================================================================
Found a 7 line (31 tokens) duplication in the following files: 
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 322 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 336 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 436 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 454 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 549 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

  public void hipriIsLifo() {
    // Hi-pri is LIFO, Max hi-pri: 2, max low-pri: 1
    PriorityNetworkFetcher<FetchState> fetcher =
        newFetcher(delegate, false, 2, 1, true, 0, false, false);

    // Fill the currently-fetching set, so additional requests are not sent to network.
    PriorityFetchState<FetchState> dontcare1 = fetch(fetcher, "dontcare1", callback, true);
=====================================================================
Found a 7 line (31 tokens) duplication in the following files: 
Starting at line 509 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 1021 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

  public void changePriorityIsReturnedInExtraMap() {
    // all request should wait in the priority queues
    PriorityNetworkFetcher<FetchState> fetcher =
        newFetcher(delegate, false, 1, 0, true, 0, false, false);

    // fill the currently fetching queue so all the next requests will wait in the priority queues.
    PriorityFetchState<FetchState> dontcare1 = fetch(fetcher, "dontcare1", callback, true);
=====================================================================
Found a 6 line (31 tokens) duplication in the following files: 
Starting at line 515 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 551 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    PriorityFetchState<FetchState> dontcare1 = fetch(fetcher, "dontcare1", callback, true);

    // enqueue a low-pri request in the queue
    PriorityFetchState<FetchState> one = fetch(fetcher, "1", callback, false);
    assertThat(fetcher.getExtraMap(one, 123))
        .containsEntry("request_initial_priority_is_high", "false");
=====================================================================
Found a 7 line (31 tokens) duplication in the following files: 
Starting at line 647 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 721 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 822 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 880 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 891 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 954 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 965 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    assertThat(fetcher.getLowPriQueue()).isEmpty();

    // Simulate a failure in hipri1.
    getOnlyElement(recordingNetworkFetcher.callbacks.get(hipri1.delegatedState))
        .onFailure(new Exception());

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri1);
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

    verify(mProducerListener).onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, null);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
=====================================================================
Found a 5 line (31 tokens) duplication in the following files: 
Starting at line 308 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java
Starting at line 325 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

  public int removeAll(Predicate<K> predicate) {
    ArrayList<Entry<K, V>> oldExclusives;
    ArrayList<Entry<K, V>> oldEntries;
    synchronized (this) {
      oldExclusives = mExclusiveEntries.removeAll(predicate);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 50 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DefaultDiskStorageTest.java
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DiskStorageCacheTest.java

@RunWith(RobolectricTestRunner.class)
@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "androidx.*", "android.*"})
@PrepareOnlyThisForTest({SystemClock.class})
public class DefaultDiskStorageTest {
=====================================================================
Found a 6 line (31 tokens) duplication in the following files: 
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DynamicDefaultDiskStorageTest.java
Starting at line 109 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DynamicDefaultDiskStorageTest.java

    File baseDir = new File(cacheDir, mBaseDirectoryName);
    Assert.assertTrue(baseDir.exists());
    Assert.assertTrue(getStorageSubdirectory(baseDir, 1).exists());

    // no change => should get back the same storage instance
    DiskStorage storage2 = storage.get();
=====================================================================
Found a 11 line (31 tokens) duplication in the following files: 
Starting at line 124 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 184 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

  public void testCache() {
    mCache =
        createDummyAdaptiveCountingMemoryCache(
            mParamsSupplier,
            mCacheTrimStrategy,
            mValueDescriptor,
            100,
            1,
            2,
            initialLFUCacheFractionPromil);
    mCache.cache(KEY, newReference(100));
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 466 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 517 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 325 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 367 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> originalRef1 = newReference(400);
    CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);
    originalRef1.close();
    CloseableReference<Integer> originalRef2 = newReference(500);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 469 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 520 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 328 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 370 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> originalRef2 = newReference(500);
    CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);
    originalRef2.close();
    CloseableReference<Integer> originalRef3 = newReference(100);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 472 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 523 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 331 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 373 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> originalRef3 = newReference(100);
    CloseableReference<Integer> valueRef3 = mCache.cache(KEYS[3], originalRef3);
    originalRef3.close();
    CloseableReference<Integer> originalRef4 = newReference(1000);
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 519 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 612 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1042 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    originalRef1.close();
    CloseableReference<Integer> originalRef2 = newReference(20);
    CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 526 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 376 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    CloseableReference<Integer> originalRef4 = newReference(40);
    CloseableReference<Integer> valueRef4 = mCache.cache(KEYS[4], originalRef4);
    originalRef4.close();
    CloseableReference<Integer> originalRef5 = newReference(50);
=====================================================================
Found a 5 line (31 tokens) duplication in the following files: 
Starting at line 679 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 906 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 503 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java
Starting at line 584 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

            CACHE_ENTRY_MAX_SIZE,
            PARAMS_CHECK_INTERVAL_MS);
    when(mParamsSupplier.get()).thenReturn(mParams);

    PowerMockito.when(SystemClock.uptimeMillis()).thenReturn(PARAMS_CHECK_INTERVAL_MS);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 836 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 626 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\LruCountingMemoryCacheTest.java

    cachedRefs[8].close();
    assertSharedWithCount(KEYS[0], 100, 1);
    assertSharedWithCount(KEYS[1], 101, 1);
    assertSharedWithCount(KEYS[5], 105, 1);
=====================================================================
Found a 6 line (31 tokens) duplication in the following files: 
Starting at line 1101 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1497 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java
Starting at line 1565 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCacheTest.java

    assertMFUExclusivelyOwned(KEYS[1], 10);
    assertLFUExclusivelyOwned(KEYS[2], 20);

    // insert item3 to MFU
    CloseableReference<Integer> originalRef3 = newReference(30);
    CloseableReference<Integer> valueRef3a = mCache.cache(KEYS[3], originalRef3);
=====================================================================
Found a 7 line (31 tokens) duplication in the following files: 
Starting at line 65 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 174 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java
Starting at line 208 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\cache\CountingLruMapTest.java

  public void testPut_SameKeyTwice() {
    mCountingLruMap.put("key1", 110);
    mCountingLruMap.put("key2", 120);
    mCountingLruMap.put("key3", 130);

    // last inserted element should be last in the queue
    mCountingLruMap.put("key2", 150);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 47 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\image\CloseableBitmapTest.java
Starting at line 60 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\image\CloseableBitmapTest.java

    mCloseableStaticBitmap.close();
    Assert.assertTrue(mCloseableStaticBitmap.isClosed());
    Assert.assertNull(mCloseableStaticBitmap.getUnderlyingBitmap());
    verify(mResourceReleaser).release(mBitmap);
=====================================================================
Found a 6 line (31 tokens) duplication in the following files: 
Starting at line 46 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\image\CloseableStaticBitmapTest.java
Starting at line 63 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\image\CloseableStaticBitmapTest.java
Starting at line 80 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\imagepipeline\image\CloseableStaticBitmapTest.java

    assertThat(mCloseableStaticBitmap.getWidth()).isEqualTo(WIDTH);
    assertThat(mCloseableStaticBitmap.getHeight()).isEqualTo(HEIGHT);
  }

  @Test
  public void testWidthAndHeightWithRotatedImage() {
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 126 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 130 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 126 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 130 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 126 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferFactoryTest.java
Starting at line 130 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\memory\MemoryPooledByteBufferOutputStreamTest.java

            32, new IntPair(1, 0),
            16, new IntPair(0, 0),
            8, new IntPair(0, 0),
            4, new IntPair(0, 0)),
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\main\java\com\facebook\imagepipeline\memory\NativeMemoryChunk.java
Starting at line 93 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\main\java\com\facebook\imagepipeline\memory\NativeMemoryChunk.java
Starting at line 63 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\main\java\com\facebook\imagepipeline\memory\BufferMemoryChunk.java
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\main\java\com\facebook\imagepipeline\memory\BufferMemoryChunk.java

    Preconditions.checkState(!isClosed());
    final int actualCount = MemoryChunkUtil.adjustByteCount(memoryOffset, count, mSize);
    MemoryChunkUtil.checkBounds(
        memoryOffset, byteArray.length, byteArrayOffset, actualCount, mSize);
=====================================================================
Found a 5 line (31 tokens) duplication in the following files: 
Starting at line 106 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\bitmap\BitmapAnimationDebugFragment.java
Starting at line 33 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\bitmap\BitmapAnimationFragment.java
Starting at line 31 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\color\SimpleColorFragment.java
Starting at line 32 of C:\Users\anaca\Documents\Projetos\fresco\samples\animation2\src\main\java\com\facebook\samples\animation2\MediaControlFragment.java
Starting at line 37 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeMediaPickerFragment.java
Starting at line 42 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRecyclerViewFragment.java
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRotationFragment.java
Starting at line 24 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeSimpleFragment.java
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeSpanSimpleTextFragment.java
Starting at line 54 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\RetainingDataSourceSupplierFragment.java
Starting at line 30 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\transition\DraweeTransitionFragment.java
Starting at line 34 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\color\ImageFormatColorFragment.java
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\datauri\ImageFormatDataUriFragment.java
Starting at line 50 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 30 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\keyframes\ImageFormatKeyframesFragment.java
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\override\ImageFormatOverrideExample.java
Starting at line 56 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\pjpeg\ImageFormatProgressiveJpegFragment.java
Starting at line 33 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\svg\ImageFormatSvgFragment.java
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\webp\ImageFormatWebpFragment.java
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineBitmapFactoryFragment.java
Starting at line 45 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineNotificationFragment.java
Starting at line 66 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java
Starting at line 35 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineQualifiedResourceFragment.java
Starting at line 72 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineRegionDecodingFragment.java
Starting at line 67 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java
Starting at line 31 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\misc\WelcomeFragment.java
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\FrescoVitoLithoRegionDecodeFragment.java
Starting at line 42 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\VitoViewRecyclerFragment.java
Starting at line 31 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\vito\VitoViewSimpleFragment.java

  @Nullable
  @Override
  public View onCreateView(
      LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
    return inflater.inflate(R.layout.fragment_debug_bitmap, container, false);
=====================================================================
Found a 3 line (31 tokens) duplication in the following files: 
Starting at line 50 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeScaleTypeFragment.java
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java

    mDraweeTop2 = (SimpleDraweeView) view.findViewById(R.id.drawee_view_top_2);
    mDraweeMain = (SimpleDraweeView) view.findViewById(R.id.drawee_view);
    mSpinner = (Spinner) view.findViewById(R.id.spinner);
=====================================================================
Found a 9 line (31 tokens) duplication in the following files: 
Starting at line 224 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 204 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\pjpeg\ImageFormatProgressiveJpegFragment.java
Starting at line 202 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineBitmapFactoryFragment.java
Starting at line 152 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java
Starting at line 203 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java
Starting at line 259 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java

      final LayoutInflater layoutInflater = getLayoutInflater(null);

      final View view =
          convertView != null
              ? convertView
              : layoutInflater.inflate(
                  android.R.layout.simple_spinner_dropdown_item, parent, false);

      final TextView textView = (TextView) view.findViewById(android.R.id.text1);
=====================================================================
Found a 4 line (31 tokens) duplication in the following files: 
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelinePostProcessorFragment.java
Starting at line 76 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java

    mUri = sampleUris().createSampleUri(ImageUriProvider.ImageSize.L);

    mButton = (Button) view.findViewById(R.id.button);
    mDraweeMain = (SimpleDraweeView) view.findViewById(R.id.drawee_view);
=====================================================================
Found a 7 line (31 tokens) duplication in the following files: 
Starting at line 61 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\FrescoDrawable2ImplTest.java
Starting at line 73 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\FrescoDrawable2ImplTest.java
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\FrescoDrawable2ImplTest.java
Starting at line 100 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\FrescoDrawable2ImplTest.java

    Assert.assertNull(mFrescoDrawable.mImageReference);
    Assert.assertTrue(mCloseableImage.isClosed());
    Assert.assertTrue(mLatch.await(3, TimeUnit.SECONDS));
  }

  @Test
  public void testFrescoDrawable_whenNewImageDrawableSet_thenReleaseOldImageReference()
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 55 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\main\java\com\facebook\fresco\animation\bitmap\cache\AnimationFrameCacheKey.java
Starting at line 299 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\generic\RoundingParams.java

    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
=====================================================================
Found a 9 line (30 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\fresco\animation\bitmap\cache\FrescoFrameCacheTest.java
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\fresco\animation\bitmap\cache\FrescoFrameCacheTest.java

    when(mImageReference.isValid()).thenReturn(false);

    CloseableReference<Bitmap> extractedReference =
        FrescoFrameCache.convertToBitmapReferenceAndClose(mImageReference);

    // We only detach the reference and do not care if the bitmap is valid
    assertThat(extractedReference).isNull();
    verify(mImageReference).close();
  }
=====================================================================
Found a 2 line (30 tokens) duplication in the following files: 
Starting at line 88 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\animated\impl\AnimatedFrameCacheTest.java
Starting at line 96 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\animated\impl\AnimatedFrameCacheTest.java

    assertSame(mFrame1.get(), mAnimatedFrameCache.get(1).get());
    assertSame(mFrame2.get(), mAnimatedFrameCache.get(2).get());
=====================================================================
Found a 4 line (30 tokens) duplication in the following files: 
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 47 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedSingleUsePostprocessorProducerTest.java
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RepeatedPostprocessorProducerTest.java
Starting at line 47 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

  @Mock public ProducerListener2 mProducerListener;
  @Mock public Producer<CloseableReference<CloseableImage>> mInputProducer;
  @Mock public Consumer<CloseableReference<CloseableImage>> mConsumer;
  @Mock public RepeatedPostprocessor mPostprocessor;
=====================================================================
Found a 4 line (30 tokens) duplication in the following files: 
Starting at line 91 of C:\Users\anaca\Documents\Projetos\fresco\animated-base\src\test\java\com\facebook\imagepipeline\producers\AnimatedRepeatedPostprocessorProducerTest.java
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\SingleUsePostprocessorProducerTest.java

    when(mImageRequest.getPostprocessor()).thenReturn(mPostprocessor);
    mResults = new ArrayList<>();
    when(mPostprocessor.getName()).thenReturn(POSTPROCESSOR_NAME);
    when(mProducerListener.requiresExtraMap(mProducerContext, POSTPROCESSOR_NAME)).thenReturn(true);
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 277 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java
Starting at line 306 of C:\Users\anaca\Documents\Projetos\fresco\animated-drawable\src\test\java\com\facebook\fresco\animation\bitmap\BitmapAnimationBackendTest.java

    verify(mPlatformBitmapFactory).createBitmap(0, 0, Bitmap.Config.ARGB_8888);
    verify(mBitmapFrameRenderer).renderFrame(2, mBitmap);
    verify(mCanvas).drawBitmap(eq(mBitmap), eq(0f), eq(0f), any(Paint.class));
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 219 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\main\java\com\facebook\animated\gif\GifImage.java
Starting at line 90 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif-lite\src\main\java\com\facebook\animated\giflite\draw\MovieAnimatedImage.java
Starting at line 175 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\main\java\com\facebook\animated\webp\WebPImage.java

      return new AnimatedDrawableFrameInfo(
          frameNumber,
          frame.getXOffset(),
          frame.getYOffset(),
          frame.getWidth(),
          frame.getHeight(),
=====================================================================
Found a 7 line (30 tokens) duplication in the following files: 
Starting at line 245 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 295 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryGifImplTest.java
Starting at line 246 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java
Starting at line 295 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\test\java\com\facebook\imagepipeline\animated\factory\AnimatedImageFactoryWebPImplTest.java

    assertFalse(imageResult.hasDecodedFrame(0));

    // Should not have interacted with these.
    verify(mMockAnimatedDrawableBackendProvider)
        .get(any(AnimatedImageResult.class), isNull(Rect.class));
    verifyNoMoreInteractions(mMockAnimatedDrawableBackendProvider);
    verify(mMockBitmapFactory).createBitmapInternal(50, 50, DEFAULT_BITMAP_CONFIG);
=====================================================================
Found a 15 line (30 tokens) duplication in the following files: 
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\animated-gif-lite\src\main\java\com\facebook\animated\giflite\drawable\GifAnimationBackend.java
Starting at line 87 of C:\Users\anaca\Documents\Projetos\fresco\animated-webp\src\main\java\com\facebook\animated\webpdrawable\WebpAnimationBackend.java

    return true;
  }

  @Override
  public void setAlpha(int alpha) {
    // unimplemented
  }

  @Override
  public void setColorFilter(@Nullable ColorFilter colorFilter) {
    // unimplemented
  }

  @Override
  public void setBounds(Rect bounds) {
=====================================================================
Found a 4 line (30 tokens) duplication in the following files: 
Starting at line 25 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedColorDrawable.java
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\main\java\com\facebook\drawee\drawable\RoundedDrawable.java

  private final float[] mRadii = new float[8];
  @VisibleForTesting final float[] mBorderRadii = new float[8];
  @VisibleForTesting @Nullable float[] mInsideBorderRadii;
  @VisibleForTesting final Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 258 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java
Starting at line 266 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\controller\AbstractDraweeControllerTest.java

    inOrder.verify(draweeHierarchy1, times(1)).setControllerOverlay(null);
    inOrder.verify(draweeHierarchy1, times(0)).reset();
    inOrder.verify(draweeHierarchy2, times(1)).setControllerOverlay(controllerOverlay1);
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 182 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 209 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 247 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableAllOnTest.java
Starting at line 177 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 204 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 242 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java
Starting at line 357 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableTest.java

    Assert.assertEquals(true, mFadeDrawable.mIsLayerOn[1]);
    Assert.assertEquals(false, mFadeDrawable.mIsLayerOn[2]);
    verify(mCallback).invalidateDrawable(mFadeDrawable);
=====================================================================
Found a 5 line (30 tokens) duplication in the following files: 
Starting at line 63 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java
Starting at line 88 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java

    mFadeDrawable.fadeInLayer(ACTUAL_LAYER_INDEX);
    mFadeDrawable.draw(mCanvas);
    verify(mOnFadeListener, times(1)).onFadeStarted();

    SystemClock.setCurrentTimeMillis((long) (DURATION * 0.5));
=====================================================================
Found a 9 line (30 tokens) duplication in the following files: 
Starting at line 73 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java
Starting at line 98 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java
Starting at line 129 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\FadeDrawableOnFadeListenerTest.java

    SystemClock.setCurrentTimeMillis((long) (DURATION * 1.5));
    mFadeDrawable.draw(mCanvas);
    verify(mOnFadeListener, times(1)).onFadeFinished();

    verifyNoMoreInteractions(mOnFadeListener);
  }

  @Test
  public void testComplex() {
=====================================================================
Found a 8 line (30 tokens) duplication in the following files: 
Starting at line 66 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java
Starting at line 80 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java
Starting at line 108 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\OrientedDrawableTest.java

    expectedMatrix.setRotate(90, drawable.getBounds().centerX(), drawable.getBounds().centerY());
    assertFalse(drawable.mRotationMatrix.isIdentity());
    AndroidGraphicsTestUtils.assertEquals(expectedMatrix, drawable.mRotationMatrix);
    verifySetBounds(expectedMatrix);
  }

  @Test
  public void testCreation_hundredAndEightyDegrees() {
=====================================================================
Found a 11 line (30 tokens) duplication in the following files: 
Starting at line 176 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ScaleTypeDrawableTest.java
Starting at line 226 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\drawable\ScaleTypeDrawableTest.java

    expectedMatrix.setScale(1.5f, 1.5f);
    expectedMatrix.postTranslate(10, 10);
    testConfigureBounds(bounds, width, height, ScaleType.FOCUS_CROP, focusPoint, expectedMatrix);
  }

  /**
   * Underlying drawable's aspect ratio is bigger than view's, so it has to be slided horizontally
   * after scaling. Focus point is at 40% and it can be completely centered.
   */
  @Test
  public void testConfigureBounds_FOCUS_CROP_HC() {
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 331 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 422 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    final int actualImageIndex = 2;

    FadeDrawable fadeDrawable = (FadeDrawable) dh.getTopLevelDrawable().getCurrent();

    assertEquals(mPlaceholderImage, fadeDrawable.getDrawable(placeholderImageIndex));
    assertEquals(ForwardingDrawable.class, fadeDrawable.getDrawable(actualImageIndex).getClass());
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 351 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 395 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(true, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(FadeDrawable.TRANSITION_STARTING, fadeDrawable.getTransitionState());
    assertEquals(250, fadeDrawable.getTransitionDuration());
=====================================================================
Found a 8 line (30 tokens) duplication in the following files: 
Starting at line 351 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 380 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 483 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 521 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 560 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java
Starting at line 598 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\generic\GenericDraweeHierarchyTest.java

    assertEquals(true, fadeDrawable.isLayerOn(actualImageIndex));
    assertEquals(FadeDrawable.TRANSITION_STARTING, fadeDrawable.getTransitionState());
    assertEquals(250, fadeDrawable.getTransitionDuration());

    // initial state -> final image (immediate)
    // reset hierarchy to initial state
    dh.reset();
    assertEquals(ColorDrawable.class, actualImageSettableDrawable.getCurrent().getClass());
=====================================================================
Found a 8 line (30 tokens) duplication in the following files: 
Starting at line 48 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java
Starting at line 182 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java

    mMultiHolder.onDetach();
    verify(mHolder1).onDetach();
    verify(mHolder2).onDetach();
    verify(mHolder3).onDetach();
  }

  @Test
  public void testTouchEvent_Handled() {
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 103 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java
Starting at line 128 of C:\Users\anaca\Documents\Projetos\fresco\drawee\src\test\java\com\facebook\drawee\view\MultiDraweeHolderTest.java

    mMultiHolder.clear();
    reset(mHolder1, mHolder2, mHolder3);

    assertEquals(0, mMultiHolder.mHolders.size());
    mMultiHolder.add(mHolder1);
    assertEquals(1, mMultiHolder.mHolders.size());
=====================================================================
Found a 14 line (30 tokens) duplication in the following files: 
Starting at line 141 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\executors\ConstrainedExecutorService.java
Starting at line 38 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\executors\HandlerExecutorServiceImpl.java
Starting at line 47 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base-test\src\main\java\com\facebook\imagepipeline\testing\TestExecutorService.java

  }

  @Override
  public boolean isShutdown() {
    return false;
  }

  @Override
  public boolean isTerminated() {
    return false;
  }

  @Override
  public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException {
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 200 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java
Starting at line 207 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java

  public static void d(Class<?> cls, String msg, Object arg1, Object arg2, Object arg3) {
    if (sHandler.isLoggable(DEBUG)) {
      sHandler.d(getTag(cls), formatString(msg, arg1, arg2, arg3));
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 297 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java
Starting at line 304 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java

  public static void i(Class<?> cls, String msg, Object arg1, Object arg2, Object arg3) {
    if (sHandler.isLoggable(INFO)) {
      sHandler.i(getTag(cls), formatString(msg, arg1, arg2, arg3));
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 424 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java
Starting at line 472 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\logging\FLog.java

  public static void e(Class<?> cls, Throwable tr, String msg, Object... args) {
    if (sHandler.isLoggable(ERROR)) {
      sHandler.e(getTag(cls), formatString(msg, args), tr);
=====================================================================
Found a 5 line (30 tokens) duplication in the following files: 
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\HashCodeUtil.java
Starting at line 52 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\HashCodeUtil.java
Starting at line 66 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\common\util\HashCodeUtil.java

        o3 == null ? 0 : o3.hashCode());
  }

  public static int hashCode(
      @Nullable Object o1, @Nullable Object o2, @Nullable Object o3, @Nullable Object o4) {
=====================================================================
Found a 9 line (30 tokens) duplication in the following files: 
Starting at line 47 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\datasource\FirstAvailableDataSourceSupplier.java
Starting at line 83 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\datasource\IncreasingQualityDataSourceSupplier.java
Starting at line 47 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\image\ImmutableQualityInfo.java

    return mDataSourceSuppliers.hashCode();
  }

  @Override
  public boolean equals(@Nullable Object other) {
    if (other == this) {
      return true;
    }
    if (!(other instanceof FirstAvailableDataSourceSupplier)) {
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 89 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\datasource\FirstAvailableDataSourceSupplier.java
Starting at line 181 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\datasource\IncreasingQualityDataSourceSupplier.java

      DataSource<T> dataSourceWithResult = getDataSourceWithResult();
      return (dataSourceWithResult != null) && dataSourceWithResult.hasResult();
    }

    @Override
    public boolean close() {
=====================================================================
Found a 7 line (30 tokens) duplication in the following files: 
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\datasource\FirstAvailableDataSourceSupplier.java
Starting at line 273 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\main\java\com\facebook\datasource\IncreasingQualityDataSourceSupplier.java

    private void closeSafely(@Nullable DataSource<T> dataSource) {
      if (dataSource != null) {
        dataSource.close();
      }
    }

    private class InternalDataSubscriber implements DataSubscriber<T> {
=====================================================================
Found a 4 line (30 tokens) duplication in the following files: 
Starting at line 39 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\references\CloseableReferenceTest.java
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\common\references\CloseableReferenceTest.java

  public void testClone() {
    CloseableReference<Closeable> copy = mCloseableReference.clone();
    Assert.assertEquals(
        2, mCloseableReference.getUnderlyingReferenceTestOnly().getRefCountTestOnly());
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 77 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java
Starting at line 102 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java
Starting at line 125 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java
Starting at line 150 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\DataSourcesTest.java

                dataSubscriber.onNewResult(mDataSource);
                return null;
              }
            })
        .when(mDataSource)
        .subscribe(any(DataSubscriber.class), any(Executor.class));
=====================================================================
Found a 5 line (30 tokens) duplication in the following files: 
Starting at line 30 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 142 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 310 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

  public void testLifecycle_F1_F2_F3_C() {
    DataSource<Object> dataSource = getAndSubscribe();
    DataSubscriber<Object> subscriber1 = verifyGetAndSubscribe(mDataSourceSupplier1, mSrc1);

    setState(mSrc1, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, mock(Throwable.class));
=====================================================================
Found a 5 line (30 tokens) duplication in the following files: 
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 45 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 70 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    DataSubscriber<Object> subscriber3 = verifyGetAndSubscribe(mDataSourceSupplier3, mSrc3);
    verifyState(dataSource, null, NOT_CLOSED, NOT_FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);

    Throwable throwable = mock(Throwable.class);
    setState(mSrc3, NOT_CLOSED, FINISHED, WITHOUT_RESULT, null, FAILED, throwable);
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 113 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 187 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 222 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 259 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

    DataSubscriber<Object> subscriber2 = verifyGetAndSubscribe(mDataSourceSupplier2, mSrc2);
    verifyState(dataSource, mSrc1, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val1, NOT_FAILED, null);

    // I2 gets ignored because we already have I1
    Object val2 = mock(Object.class);
    setState(mSrc2, NOT_CLOSED, NOT_FINISHED, WITH_RESULT, val2, NOT_FAILED, null);
=====================================================================
Found a 5 line (30 tokens) duplication in the following files: 
Starting at line 156 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 237 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java
Starting at line 337 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\FirstAvailableDataSourceSupplierTest.java

    verifyState(dataSource, mSrc2, NOT_CLOSED, FINISHED, WITH_RESULT, val, NOT_FAILED, null);

    testClose(dataSource, mSrc2);
    verifyState(dataSource, null, CLOSED, FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
  }
=====================================================================
Found a 5 line (30 tokens) duplication in the following files: 
Starting at line 186 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 238 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 264 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 290 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 310 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java
Starting at line 463 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\datasource\IncreasingQualityDataSourceSupplierTest.java

    verifyState(dataSource, mSrc1, NOT_CLOSED, FINISHED, WITH_RESULT, val1c, NOT_FAILED, null);

    testClose(dataSource, mSrc1);
    verifyState(dataSource, null, CLOSED, FINISHED, WITHOUT_RESULT, null, NOT_FAILED, null);
  }
=====================================================================
Found a 15 line (30 tokens) duplication in the following files: 
Starting at line 59 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 173 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 403 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 460 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 517 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java

                0, // margin top
                0, // margin right
                0 // margin bottom
                ),
            10, // drawableHeight
            -20, // fontAscent
            10, // fontDescent
            -20, // expectedAscent
            10, // expectedDescent
            -25, // fontTop
            15, // fontBottom
            -25, // expectedTop
            15 // expectedBottom
          },
          {
=====================================================================
Found a 15 line (30 tokens) duplication in the following files: 
Starting at line 288 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java
Starting at line 689 of C:\Users\anaca\Documents\Projetos\fresco\fbcore\src\test\java\com\facebook\widget\text\span\BetterImageSpanMarginTest.java

                0, // margin top
                0, // margin right
                0 // margin bottom
                ),
            50, // drawableHeight
            -20, // fontAscent
            10, // fontDescent
            -50, // expectedAscent
            10, // expectedDescent
            -25, // fontTop
            15, // fontBottom
            -50, // expectedTop
            15 // expectedBottom
          },
          {
=====================================================================
Found a 8 line (30 tokens) duplication in the following files: 
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\BitmapProbeProducer.java
Starting at line 94 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\main\java\com\facebook\imagepipeline\producers\EncodedProbeProducer.java

        MemoryCache<CacheKey, PooledByteBuffer> encodedMemoryCache,
        BufferedDiskCache defaultBufferedDiskCache,
        BufferedDiskCache smallImageBufferedDiskCache,
        CacheKeyFactory cacheKeyFactory,
        BoundedLinkedHashSet<CacheKey> encodedMemoryCacheHistory,
        BoundedLinkedHashSet<CacheKey> diskCacheHistory) {
      super(consumer);
      mProducerContext = producerContext;
=====================================================================
Found a 4 line (30 tokens) duplication in the following files: 
Starting at line 376 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 530 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

            mImageRequest, mCallerContext, ImageRequest.RequestLevel.BITMAP_MEMORY_CACHE);
    Producer<CloseableReference<CloseableImage>> bitmapCacheSequence = mock(Producer.class);
    when(mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest))
        .thenReturn(bitmapCacheSequence);
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 502 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java
Starting at line 509 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ImagePipelineTest.java

    when(mMainDiskStorageCache.diskCheckSync(isNull(CacheKey.class))).thenReturn(true);
    assertTrue(mImagePipeline.isInDiskCacheSync(mImageRequest));
  }

  @Test
  public void testIsInDiskCacheFromSmallDiskCache() {
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 116 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ProducerSequenceFactoryTest.java
Starting at line 334 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\core\ProducerSequenceFactoryTest.java

    PowerMockito.when(mImageRequest.getSourceUriType()).thenReturn(SOURCE_TYPE_NETWORK);
    Producer producer = mProducerSequenceFactory.getDecodedImageProducerSequence(mImageRequest);
    assertSame(producer, mProducerSequenceFactory.getNetworkFetchSequence());
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 154 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\CloseableProducerToDataSourceAdapterTest.java
Starting at line 124 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\datasource\ProducerToDataSourceAdapterTest.java

    verifyReferenceCount(resultRef);
    verifyNoMoreInteractionsAndReset();
  }

  private void verifyClosed(boolean isFinished, Throwable throwable) {
    verifyState(isFinished, WITHOUT_RESULT, null, throwable != null, throwable);
=====================================================================
Found a 10 line (30 tokens) duplication in the following files: 
Starting at line 40 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java
Starting at line 43 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\GenericByteArrayPoolTest.java

    Assert.assertEquals(2, mPool.alloc(2).length);
  }

  @Test
  public void testFree() throws Exception {}

  // tests out the getBucketedSize method
  @Test
  public void testGetBucketedSize() throws Exception {
    Assert.assertEquals(2, mPool.getBucketedSize(1));
=====================================================================
Found a 8 line (30 tokens) duplication in the following files: 
Starting at line 184 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java
Starting at line 231 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java
Starting at line 297 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java

    Assert.assertEquals(2, mStats.mUsedBytes);
    Assert.assertEquals(0, mStats.mFreeCount);
    Assert.assertEquals(1, mStats.mUsedCount);
  }

  // Get via alloc - exception on max size hard cap
  @Test
  public void testGet_AllocFailure() throws Exception {
=====================================================================
Found a 8 line (30 tokens) duplication in the following files: 
Starting at line 277 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java
Starting at line 344 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java

    Assert.assertEquals(2, mStats.mUsedCount);
    Assert.assertEquals(0, mStats.mFreeBytes);
    Assert.assertEquals(0, mStats.mFreeCount);
  }

  // Test releasing an 'unknown' value
  @Test
  public void testRelease_UnknownValue() throws Exception {
=====================================================================
Found a 8 line (30 tokens) duplication in the following files: 
Starting at line 395 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java
Starting at line 402 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\memory\BasePoolTest.java

    mPool.release(b1);

    mStats.refresh();
    Assert.assertEquals(12, mStats.mFreeBytes);
    Assert.assertEquals(2, mStats.mUsedBytes);

    // perform a dummy trim - nothing should happen
    mPool.trimToSize(100);
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 69 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityStarvingThrottlingProducerTest.java
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\RemoveImageTransformMetaDataProducerTest.java
Starting at line 160 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ResizeAndRotateProducerTest.java
Starting at line 57 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ThrottlingProducerTest.java

                mAddMetaDataConsumer = (Consumer<EncodedImage>) invocation.getArguments()[0];
                return null;
              }
            })
        .when(mInputProducer)
        .produceResults(any(Consumer.class), any(ProducerContext.class));
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 100 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\AddImageTransformMetaDataProducerTest.java

  public void testOnNewResultLastNotJpeg() {
    when(ImageFormatChecker.getImageFormat_WrapIOException(any(InputStream.class)))
        .thenAnswer((Answer<ImageFormat>) i -> DefaultImageFormats.WEBP_SIMPLE);
=====================================================================
Found a 7 line (30 tokens) duplication in the following files: 
Starting at line 107 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 137 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheGetProducerTest.java
Starting at line 200 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 226 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 251 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 276 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 291 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 335 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 394 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 226 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 249 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 301 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 316 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 343 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 171 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 217 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 232 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 247 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 123 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java
Starting at line 147 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\StatefulProducerRunnableTest.java

        .onProducerFinishWithSuccess(mProducerContext, PRODUCER_NAME, extraMap);
    verify(mProducerListener, never())
        .onUltimateProducerReached(eq(mProducerContext), anyString(), anyBoolean());
  }

  @Test
  public void testBitmapMemoryCacheGetNotFoundInputProducerNotFound() {
=====================================================================
Found a 7 line (30 tokens) duplication in the following files: 
Starting at line 49 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 51 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\EncodedMemoryCacheProducerTest.java
Starting at line 41 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PostprocessedBitmapMemoryCacheProducerTest.java

  @Mock public MemoryCache<CacheKey, CloseableImage> mMemoryCache;
  @Mock public CacheKeyFactory mCacheKeyFactory;
  @Mock public Producer mInputProducer;
  @Mock public Consumer mConsumer;
  @Mock public ProducerContext mProducerContext;
  @Mock public ImageRequest mImageRequest;
  @Mock public ProducerListener2 mProducerListener;
=====================================================================
Found a 7 line (30 tokens) duplication in the following files: 
Starting at line 140 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 186 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

    setupBitmapMemoryCacheGetNotFound();
    setupInputProducerStreamingSuccess();
    when(mMemoryCache.get(mBitmapMemoryCacheKey)).thenReturn(null);

    mBitmapMemoryCacheProducer.produceResults(mConsumer, mProducerContext);

    verify(mConsumer).onNewResult(mIntermediateImageReference, Consumer.NO_FLAGS);
=====================================================================
Found a 5 line (30 tokens) duplication in the following files: 
Starting at line 206 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java
Starting at line 232 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapMemoryCacheProducerTest.java

  public void testCacheIntermediateImageAsBetterScan() {
    setupInputProducerStreamingSuccess();
    CloseableImage closeableImage = mock(CloseableImage.class);
    when(closeableImage.getQualityInfo())
        .thenReturn(ImmutableQualityInfo.of(INTERMEDIATE_SCAN_1, false, false));
=====================================================================
Found a 9 line (30 tokens) duplication in the following files: 
Starting at line 85 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapPrepareProducerTest.java
Starting at line 110 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapPrepareProducerTest.java

  public void testProduceResults_whenPrefetch_andPreparePrefetchNotEnabled_thenPassThrough() {
    createBitmapPrepareProducer(false);

    when(mProducerContext.isPrefetch()).thenReturn(true);

    mBitmapPrepareProducer.produceResults(mConsumer, mProducerContext);

    // note: the given consumer is used and not the BitmapPrepareConsumer
    verify(mInputProducer, times(1)).produceResults(eq(mConsumer), eq(mProducerContext));
=====================================================================
Found a 9 line (30 tokens) duplication in the following files: 
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapPrepareProducerTest.java
Starting at line 122 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\BitmapPrepareProducerTest.java

  public void testProduceResults_whenPrefetch_andPreparePrefetchEnabled_thenNotPassThrough() {
    createBitmapPrepareProducer(true);

    when(mProducerContext.isPrefetch()).thenReturn(true);

    mBitmapPrepareProducer.produceResults(mConsumer, mProducerContext);

    // note: the given consumer is used and not the BitmapPrepareConsumer
    verify(mInputProducer, never()).produceResults(eq(mConsumer), eq(mProducerContext));
=====================================================================
Found a 4 line (30 tokens) duplication in the following files: 
Starting at line 50 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DecodeProducerTest.java
Starting at line 44 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\JobSchedulerTest.java
Starting at line 42 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalExifThumbnailProducerTest.java
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ResizeAndRotateProducerTest.java

@RunWith(RobolectricTestRunner.class)
@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "androidx.*", "android.*"})
@Config(manifest = Config.NONE)
@PrepareForTest({JobScheduler.class, ProgressiveJpegParser.class, DecodeProducer.class})
=====================================================================
Found a 7 line (30 tokens) duplication in the following files: 
Starting at line 168 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 186 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 199 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

    assertEquals("0", resultMap.get(DiskCacheReadProducer.ENCODED_IMAGE_SIZE));
    verify(mProducerListener).onUltimateProducerReached(mProducerContext, PRODUCER_NAME, true);
    Assert.assertFalse(EncodedImage.isValid(mFinalEncodedImage));
  }

  @Test
  public void testSmallImageDiskCacheGetSuccessful() {
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 221 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java
Starting at line 291 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DiskCacheReadProducerTest.java

    setupDiskCacheGetFailure(mDefaultBufferedDiskCache);
    setupInputProducerSuccess();
    mDiskCacheReadProducer.produceResults(mConsumer, mProducerContext);
    verify(mConsumer).onNewResult(mFinalEncodedImage, Consumer.IS_LAST);
    verify(mProducerListener)
        .onProducerFinishWithFailure(mProducerContext, PRODUCER_NAME, mException, null);
=====================================================================
Found a 11 line (30 tokens) duplication in the following files: 
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DownsampleUtilTest.java
Starting at line 68 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\DownsampleUtilTest.java

    whenRequestResizeWidthAndHeightWithExifRotation(1, 1);
    assertEquals(
        1,
        DownsampleUtil.determineSampleSize(
            mImageRequest.getRotationOptions(),
            mImageRequest.getResizeOptions(),
            mEncodedImage,
            MAX_BITMAP_SIZE));

    // Width or height of the encoded image are 0
    mEncodedImage.setWidth(100);
=====================================================================
Found a 7 line (30 tokens) duplication in the following files: 
Starting at line 66 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriFetchProducerTest.java
Starting at line 89 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\LocalContentUriThumbnailFetchProducerTest.java
Starting at line 75 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\QualifiedResourceFetchProducerTest.java

            mock(Object.class),
            ImageRequest.RequestLevel.FULL_FETCH,
            false,
            true,
            Priority.MEDIUM,
            mConfig);
    when(mImageRequest.getSourceUri()).thenReturn(mContentUri);
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 126 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\NetworkFetchProducerTest.java
Starting at line 134 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\NetworkFetchProducerTest.java
Starting at line 165 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\NetworkFetchProducerTest.java

    verify(mPooledByteBufferFactory).newOutputStream();
    verify(mConsumer, never()).onNewResult(any(CloseableReference.class), anyInt());
    verifyPooledByteBufferUsed(0);

    // Allow NetworkFetchProducer to read 1024 bytes and check that consumer is not notified
    inputStream.increaseBytesToRead(1024);
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 165 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PostprocessedBitmapMemoryCacheProducerTest.java
Starting at line 189 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PostprocessedBitmapMemoryCacheProducerTest.java

    when(mMemoryCache.cache(mPostprocessedBitmapCacheKey, mImageRef2)).thenReturn(null);

    Consumer consumer = performCacheMiss();
    consumer.onNewResult(mImageRef1, Consumer.NO_FLAGS);
    mImageRef1.close();
    consumer.onNewResult(mImageRef2, Consumer.IS_LAST);
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 646 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 688 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 817 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 827 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    assertThat(fetcher.getHiPriQueue()).containsExactly(hipri2);
    assertThat(fetcher.getLowPriQueue()).isEmpty();

    // Simulate a failure in hipri1.
    getOnlyElement(recordingNetworkFetcher.callbacks.get(hipri1.delegatedState))
        .onFailure(new Exception());
=====================================================================
Found a 12 line (30 tokens) duplication in the following files: 
Starting at line 837 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 1009 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 1042 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java

    assertThat(fetcher.getCurrentlyFetching()).containsExactly(hipri2);
    assertThat(fetcher.getHiPriQueue()).isEmpty();
    assertThat(fetcher.getLowPriQueue()).isEmpty();
  }

  /**
   * Scenario: an image fetch fails. We expect it to be re-queued up to maxNumberOfRequeue times.
   * The reuqest should be re-queued immediately up to immediateRequeueCount and then it will wait
   * in the delayedQueue to be re-queued again after delayTimeInMillis.
   */
  @Test
  public void testMovingDelayedRequeue_requeueOnFail() {
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 1372 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\PriorityNetworkFetcherTest.java
Starting at line 109 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\common\ImageDecodeOptions.java

    public boolean equals(Object o) {
      if (this == o) return true;
      if (o == null || getClass() != o.getClass()) return false;
=====================================================================
Found a 9 line (30 tokens) duplication in the following files: 
Starting at line 627 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ResizeAndRotateProducerTest.java
Starting at line 642 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline\src\test\java\com\facebook\imagepipeline\producers\ResizeAndRotateProducerTest.java

          eq(rotationAngle),
          eq(numerator),
          eq(DEFAULT_JPEG_QUALITY));
    } catch (IOException ioe) {
      throw new RuntimeException(ioe);
    }
  }

  private static void verifyJpegTranscoderExifOrientationInteractions(
=====================================================================
Found a 5 line (30 tokens) duplication in the following files: 
Starting at line 585 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\AbstractAdaptiveCountingMemoryCache.java
Starting at line 440 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\main\java\com\facebook\imagepipeline\cache\LruCountingMemoryCache.java

    if (ExclusixeEntries.getCount() <= count && ExclusixeEntries.getSizeInBytes() <= size) {
      return null;
    }
    ArrayList<Entry<K, V>> oldEntries = new ArrayList<>();
    while (ExclusixeEntries.getCount() > count || ExclusixeEntries.getSizeInBytes() > size) {
=====================================================================
Found a 7 line (30 tokens) duplication in the following files: 
Starting at line 562 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DiskStorageCacheTest.java
Starting at line 586 of C:\Users\anaca\Documents\Projetos\fresco\imagepipeline-base\src\test\java\com\facebook\cache\disk\DiskStorageCacheTest.java

    assertTrue(cache2.isIndexReady());
    assertTrue(cache2.hasKey(key));
    assertTrue(cache2.hasKeySync(key));
  }

  @Test
  public void testHasKeyWithPopulateAtStartupWithAwaitingIndex() throws Exception {
=====================================================================
Found a 5 line (30 tokens) duplication in the following files: 
Starting at line 175 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\main\java\com\facebook\imagepipeline\memory\AshmemMemoryChunk.java
Starting at line 174 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\nativememory\src\main\java\com\facebook\imagepipeline\memory\NativeMemoryChunk.java
Starting at line 159 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\main\java\com\facebook\imagepipeline\memory\BufferMemoryChunk.java

    if (!(other instanceof AshmemMemoryChunk)) {
      throw new IllegalArgumentException("Cannot copy two incompatible MemoryChunks");
    }
    Preconditions.checkState(!isClosed());
    Preconditions.checkState(!other.isClosed());
=====================================================================
Found a 8 line (30 tokens) duplication in the following files: 
Starting at line 25 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\ashmem\src\test\java\com\facebook\imagepipeline\testing\FakeAshmemMemoryChunkPool.java
Starting at line 27 of C:\Users\anaca\Documents\Projetos\fresco\memory-types\simple\src\test\java\com\facebook\imagepipeline\testing\FakeBufferMemoryChunkPool.java

  public FakeAshmemMemoryChunkPool(PoolParams poolParams) {
    super(
        Mockito.mock(MemoryTrimmableRegistry.class),
        poolParams,
        Mockito.mock(PoolStatsTracker.class));
  }

  @Override
=====================================================================
Found a 11 line (30 tokens) duplication in the following files: 
Starting at line 78 of C:\Users\anaca\Documents\Projetos\fresco\samples\comparison\src\main\java\com\facebook\samples\comparison\instrumentation\InstrumentedDraweeView.java
Starting at line 37 of C:\Users\anaca\Documents\Projetos\fresco\samples\comparison\src\main\java\com\facebook\samples\comparison\instrumentation\InstrumentedImageView.java
Starting at line 33 of C:\Users\anaca\Documents\Projetos\fresco\samples\comparison\src\main\java\com\facebook\samples\comparison\instrumentation\InstrumentedNetworkImageView.java

    mInstrumentation.init(tag, perfListener);
  }

  @Override
  public void onDraw(final Canvas canvas) {
    super.onDraw(canvas);
    mInstrumentation.onDraw(canvas);
  }

  @Override
  public void setImageURI(Uri uri, @Nullable Object callerContext) {
=====================================================================
Found a 5 line (30 tokens) duplication in the following files: 
Starting at line 120 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java
Starting at line 143 of C:\Users\anaca\Documents\Projetos\fresco\samples\gestures\src\test\java\com\facebook\samples\gestures\MultiPointerGestureDetectorTest.java

    assertEquals(600f, mGestureDetector.getCurrentY()[1], 0);
    inOrder.verify(mListener).onGestureEnd(mGestureDetector);
    inOrder.verify(mListener).onGestureBegin(mGestureDetector);

    mGestureDetector.onTouchEvent(event4);
=====================================================================
Found a 9 line (30 tokens) duplication in the following files: 
Starting at line 58 of C:\Users\anaca\Documents\Projetos\fresco\samples\scrollperf\src\main\java\com\facebook\samples\scrollperf\fragments\recycler\DraweeViewListAdapter.java
Starting at line 97 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeRotationFragment.java
Starting at line 215 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\gif\ImageFormatGifFragment.java
Starting at line 195 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imageformat\pjpeg\ImageFormatProgressiveJpegFragment.java
Starting at line 193 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineBitmapFactoryFragment.java
Starting at line 194 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java
Starting at line 250 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\imagepipeline\ImagePipelineResizingFragment.java

  }

  @Override
  public long getItemId(int position) {
    return position;
  }

  @Override
  public View getView(int position, View convertView, ViewGroup parent) {
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 82 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeSpanSimpleTextFragment.java
Starting at line 102 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\drawee\DraweeSpanSimpleTextFragment.java

    DraweeHierarchy draweeHierarchy =
        GenericDraweeHierarchyBuilder.newInstance(getResources())
            .setPlaceholderImage(new ColorDrawable(Color.RED))
            .setActualImageScaleType(mScaleType)
            .build();
    DraweeController controller =
=====================================================================
Found a 10 line (30 tokens) duplication in the following files: 
Starting at line 33 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\postprocessor\BenchmarkPostprocessorForDuplicatedBitmap.java
Starting at line 31 of C:\Users\anaca\Documents\Projetos\fresco\samples\showcase\src\main\java\com\facebook\fresco\samples\showcase\postprocessor\BenchmarkPostprocessorForDuplicatedBitmapInPlace.java

    mPostprocessor.process(destBitmap, sourceBitmap);
    showDuration(System.nanoTime() - startTime);
  }

  @Nullable
  @Override
  public CacheKey getPostprocessorCacheKey() {
    return mPostprocessor.getPostprocessorCacheKey();
  }
}
=====================================================================
Found a 5 line (30 tokens) duplication in the following files: 
Starting at line 221 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\androidTest\java\com\facebook\webpsupport\WebpBitmapFactoryTest.java
Starting at line 247 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\androidTest\java\com\facebook\webpsupport\WebpBitmapFactoryTest.java

  public void testInScaled() throws Throwable {
    BitmapFactory.Options options = new BitmapFactory.Options();
    options.inScaled = true;
    options.inScreenDensity = 240;
    options.inDensity = 480;
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 225 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\androidTest\java\com\facebook\webpsupport\WebpBitmapFactoryTest.java
Starting at line 238 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\androidTest\java\com\facebook\webpsupport\WebpBitmapFactoryTest.java

    options.inDensity = 480;
    options.inTargetDensity = 240;

    final Bitmap bitmap = mWebpBitmapFactory.decodeStream(getTestWebpInputStream(), null, options);

    testBitmapDefault(bitmap, 10, 10);
=====================================================================
Found a 6 line (30 tokens) duplication in the following files: 
Starting at line 239 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\androidTest\java\com\facebook\webpsupport\WebpBitmapFactoryTest.java
Starting at line 252 of C:\Users\anaca\Documents\Projetos\fresco\static-webp\src\androidTest\java\com\facebook\webpsupport\WebpBitmapFactoryTest.java

    options.inTargetDensity = 240;

    final Bitmap bitmap = mWebpBitmapFactory.decodeStream(getTestWebpInputStream(), null, options);

    testBitmapDefault(bitmap, 20, 20);
  }
=====================================================================
Found a 3 line (30 tokens) duplication in the following files: 
Starting at line 323 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\main\java\com\facebook\fresco\vito\core\impl\FrescoDrawable2Impl.java
Starting at line 332 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\main\java\com\facebook\fresco\vito\core\impl\FrescoDrawable2Impl.java

  public void onNewResult(DataSource<CloseableReference<CloseableImage>> dataSource) {
    if (dataSource != mDataSource || mImageRequest == null || mDrawableDataSubscriber == null) {
      getImagePerfListener().onIgnoreResult(this);
=====================================================================
Found a 4 line (30 tokens) duplication in the following files: 
Starting at line 81 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\HierarcherImplTest.java
Starting at line 92 of C:\Users\anaca\Documents\Projetos\fresco\vito\core-java-impl\src\test\java\com\facebook\fresco\vito\core\impl\HierarcherImplTest.java

  public void testBuildPlaceholderDrawable() {
    final Drawable expected = new ColorDrawable(Color.YELLOW);
    ImageOptions options =
        ImageOptions.create().placeholder(expected).placeholderScaleType(null).build();
=====================================================================
